//all comments to be implemented post kalix-study
//all comments to be implemented post kalix-study

query GetAllTenantIds is { ??? }
result AllTenantIds is {tenants: TenantId*}

query GetAllOrgIds is { ??? }
result AllOrgIds is {orgs: OrganizationId*}

query GetAllEventIds is { ??? }
result AllEventIds {events: EventId*}

query GetAllMemberIds is { ??? }
result AllMemberIds is {members: MemberId*}

query GetAllStoreIds is { ??? }
result AllStoreIds is {stores: StoreContext.StoreId*}

query GetAllSkus is { ??? }
result AllSkus is {skus: SKU*}

context AllIdsProjections is  {
  projector AllTenantIdsView is {
     record AllTenantIdsFields {
        tenant: TenantId
        //tenantStatus: TenantContext.Status
    }
    handler AllTenantIdsViewHandler is {

        on event TenantEstablished {
          "create row with tenant set to TenantEstablished.tenantId and tenantStatus to Draft"
        }
        //on event TenantContext.StatusUpdated {
        //    then "update row with tenant set to StatusUpdated.tenantId to tenantStatus with StatusUpdated.newStatus"
        //}
        on query GetAllTenantIds {
          "reply with AllTenantIds packed with entire table filtered by tenantStatus == Active"
        }
    }
  }

  projector AllOrgIdsView is {
     record AllOrgIdsFields {
        org: OrganizationId
        //orgStatus: OrganizationContext.Status
    }
    handler AllOrgIdsViewHandler is {
        on event OrganizationEstablished {
          "create row with org set to OrganizationEstablished.orgId"// and orgStatus set to Draft"
        }
        //on event OrganizationStatusUpdated {
        //    then "update row with org set to OrganizationStatusUpdated.orgId to orgStatus with OrganizationStatusUpdated.newStatus"
        //}
        on query GetAllOrgIds {
          "reply with AllOrgIds packed with entire table filtered by orgStatus == Active"
        }
    }
  }

  projector AllEventIdsView is {
     record AllEventIdsFields{
        event: EventId
        //eventStatus: EventContext.Status
    }
    handler AllTenantIdsViewHandler is {
        on event EventScheduled {
          "create row with event set to EventEstablished.eventId"// and eventStatus set to Scheduled"
        }
        //on event EventCancelled {
        //    then "update row with event set to EventCancelled.eventId to eventStatus with Status.Cancelled"
        //}
        //on event EventRescheduled {
        //    then "update row with event set to EventRescheduled.eventId to eventStatus with Status.Scheduled"
        //}
        //on event EventDelayed {
        //    then "update row with event set to EventDelayed.eventId to eventStatus with Status.Delayed"
        //}
        //on event EventStarted {
        //    then "update row with event set to EventStarted.eventId to eventStatus with Status.InProgress"
        //}
        //on event EventEnded {
        //    then "update row with event set to EventEnded.eventId to eventStatus with Status.Past"
        //}
        on query GetAllEventIds {
          "reply with AllEventIds packed with entire table filtered by eventStatus == Scheduled"
        }
    }
  }

  projector AllMemberIdsView is {
     record AllMemberIdsFields {
        member: MemberId,
        memberStatus: MemberContext.Status
    }
    handler AllMemberIdsViewHandler is {
        on event MemberContext.MemberRegistered {
          "create row with member set to MemberRegistered.memberId"// and memberStatus set to Active"
        }
        //on event MemberStatusUpdated {
        //    then "update row with member set to MemberStatusUpdated.memberId to memberStatus with MemberStatusUpdated.newStatus"
        //}
        on query GetAllMemberIds {
          "reply with AllMemberIds packed with entire table"
        }
    }
  }

  projector AllStoreIdsView is {
     record AllStoreIdsFields {
        store: ImprovingApp.StoreContext.StoreId
    }
    handler AllStoreIdsViewHandler is {
        on event StoreCreated {
          "create rows with store set to StoreCreated.storeId"
        }
        on query GetAllStoreIds {
          "reply with AllStoreIds packed with entire table"
        }
    }
  }

  projector AllSkusView is {
     record AllSkusFields {
        sku: SKU
    }
    handler AllSkusViewHandler is {
        on event ProductCreated {
          "create rows with sku set to ProductCreated.sku"
        }
        on query GetAllSkus {
          "reply with AllSkus packed with entire table"
        }
    }
  }
}
