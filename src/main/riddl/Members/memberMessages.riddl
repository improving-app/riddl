type RegisterMemberList is command {memberList: MemberMap+, registeringMember: MemberId} briefly "RegisterMemberList creates multiple members with a single call. The limitation is you can only define a single MemberType in each call, and all new Members must be assigned to an Organization (typically a BaseOrg)."
type MemberListRegistered is event {memberData:MemberData*}

type RegisterMember is command {memberToAdd: MembersMap, registeringMember: MemberId?} briefly "RegisterMember creates a single new member. As this could be a self-service request the OrganizationType is optional. Also registeringMember is optional - if you are registering yourself then you are the registering member for yourself - you just don't exist yet"
type MemberRegistered is event {memberId: MemberId, memberInfo: MemberInfo, memberMeta: MemberMetaInfo} briefly "Event issued after either RegisterMember or RegisterMemberList is called. In the case of RegisterMemberList one event per member in the list is published."

type UpdateMemberInfo is command {memberMap:MemberMap, actingMember: MemberId} briefly "All member info will be overwritten as provided in this command. Best practice would be to retrieve current values first and modify attributes that you desire to change and submit the full MemberInfo object back."
type MemberInfoUpdated is event {memberId: MemberId, memberInfo: MemberInfo, memberMeta: MemberMetaInfo}

type ActivateMember is command {memberId: MemberId, actingMember: MemberId}
type MemberActivated is event {memberId: MemberId, memberMeta: MemberMetaInfo}

type InactivateMember is command {memberId: MemberId, actingMember: MemberId}
type MemberInactivated is event {memberId: MemberId, memberMeta: MemberMetaInfo}

type SuspendMember is command {memberId: MemberId, actingMember: MemberId}
type MemberSuspended is event {memberId: MemberId, memberMeta: MemberMetaInfo}

type TerminateMember is command {memberId: MemberId, actingMember: MemberId}
type MemberTerminated is event {memberId: MemberId, memberMeta: MemberMetaInfo}

type GetMemberInfo is query {memberId: MemberId}
type MemberData is result {memberId: MemberId, memberInfo: MemberInfo, memberMeta: MemberMetaInfo}

type GetMemberForHandle is query {handle:string}
type MemberForHandle is result {memberId: MemberId?}