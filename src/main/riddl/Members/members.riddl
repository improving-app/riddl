type MemberId is Id(ImprovingApp.MembersContext.Member)
  briefly "Unique identifier for Tenant Entity"

  type MemberMap is mapping from MemberId to MembersContext.Info

context MembersContext  is {
    //Member Details

    entity Member is {
        options(aggregate, technology("akka"))

        handler MemberHandler is {
            on command RegisterMember {
                then "morph entity Member to state Member.Active"
                and "set Member.Active.entityId to @RegisterMember.memberId"
                and "set Member.Active.info to @RegisterMember.info"
            }
            on command RegisterMemberList {
                //TODO: list operations on the following:
                then morph entity Member to state Member.Active
                //TODO: How do you reference members of a mapping?
                //and set Active.memberId to @RegisterMemberList.MemberList.memberId
                //and set Active.info to @RegisterMemberList.MemberList.info
            }
        }

        state Active is {
            fields {
                info: MembersContext.Info,
                meta: MembersContext.MetaInfo
            }
            invariant time_sanity is {
              <=(@Active.meta.createdOn, @Active.meta.lastModifiedOn)
            }
            invariant firstName is {
              >=(length(@Active.info.firstName), 3)
            }
            invariant lastName is {
              >=(length(@Active.info.firstName), 3)
            }

/*
                    handle: String briefly "username. Must be unique.",
                    avatar: URL briefly "thumbnail image of the user. Need to screen to ensure community guidelines compliance. i.e. no porn or offensive content. Use Gravitar?",
                    firstName: String,
                    lastName: String,
                    mobileNumber: MobileNumber?,
                    emailAddress: EmailAddress?,
                    notificationPreference: NotificationPreference?
                      briefly "if this is set it is assumed that the user has opted in.",
                    organizationMembership: OrganizationId*
                      briefly "A list of organizations this member belongs to."
                    //memberType: MemberType+
*/

            handler ActiveMemberHandler {
                on command UpdateMemberInfo {
                    then "set entity Info to non-Empty fields in UpdateInfo from message"
                    and "set entity lastModifiedBy to actingMember from message"
                    and "set entity lastModifiedOn to today()"
                    and "yield event MemberInfoUpdated"
                }
                on command UpdateMemberStatus {
                    then "set entity Status to Status field from message"
                    and "set entity lastModifiedBy to actingMember from message"
                    and "set entity lastModifiedOn to today()"
                    and "yield event MemberStatusUpdated"
                }
                on query GetMemberData {
                    then "yield Info for entity"
                }
            }
        }


        state Terminated is {
            fields {
                memberId: MemberId // needed for compilation - RIDDL requires fields object and fields object requires at least one field
            }
            handler TerminatedMemberHandler is {
                on other { then error "Terminated members cannot process messages" }
            }
        } //A terminated member is one who exercises their right to be forgotten.

    } described in file "member-entity.md"
} described in file "members-context.md"
