context MemberContext is {
    include "memberSources"

    type MemberId is Id(MemberContext.Member) with {
      briefly "Unique identifier for Tenant Entity"
    }

    type MemberMap is mapping from MemberContext.MemberId to MemberContext.Info

    //Member Details
    type MemberStates is any of {Draft, Active, Suspended} with {
      briefly "Internal status of an Organization."
    }

    type NotificationPreference is any of { Email, SMS, Application } with {
      described as {
        | The values of this enumeration define the ways in which a member may
        | be notified of changes.
      }
    }

    type Info is {
        contact: Contact with {
          briefly "Required - Contact information of the member" },
        handle: String with {
          briefly "Required - username. Must be unique." },
        avatar: URL with {
          briefly "Required - thumbnail image of the user. Need to screen to ensure community guidelines compliance. i.e. no porn or offensive content. Use Gravitar?" },
        firstName: String with {
          briefly "Required - Real first name of the member"},
        lastName: String with {
          briefly "Required - Real last name of the member"},
        notificationPreference: ImprovingApp.GatewayAPI.MemberGateway.NotificationPreference? with {
          briefly "if this is set it is assumed that the user has opted in."},
        organizationMembership: OrganizationId* with {
          briefly "A possibly empty list of organizations this member belongs to." },
        tenant: TenantId with {
          briefly "Required - Tenant id of the member" }
    } with {
      described as {
        |//mobileNumber: MobileNumber? with { briefly "Optional mobile phone number" },
        |//emailAddress: EmailAddress? with { briefly "Optional email address" },
        |This type provides the basic information about members that is
        |retained by the Member entity. The fields of this type form the profile
        |of the Member with demographics, contact info, and various options
        |like notifications and group membership the Member can opt in to.
      }
    }
    type EditableInfo is {
        handle: String? with {
          briefly "username. Must be unique."},
        avatar: URL? with {
          briefly "thumbnail image of the user."
           described as {
             |Need to screen to ensure community guidelines compliance.
             | i.e. no porn or offensive content. Use Gravitar?
           }
        },
        firstName: String? with { briefly "Real first name of the member"},
        lastName: String? with { briefly "Real last name of the member" }
        notificationPreference: ImprovingApp.GatewayAPI.MemberGateway.NotificationPreference?
          with { briefly "if this is set it is assumed that the user has opted in." },
        organizationMembership: OrganizationId*
          with { briefly "A list of organizations this member belongs to." },
        tenant: TenantId*
          with { briefly "the tenant(s) this Member would belong to" }
    } with {
      described as {
        |//mobileNumber: MobileNumber?,
        |//emailAddress: EmailAddress?,
        |This aggregate type specifies a way to update any or all of the
        |MemberInfo fields. If a field value is missing (they are all optional)
        |then the current value is not updated.
      }
    }
    type MetaInfo is {
        createdOn: TimeStamp
          with { briefly "The timestamp the member was created" },
        createdBy: MemberContext.MemberId
           with { briefly "The member that created this member" },
        lastModifiedOn: TimeStamp
           with { briefly "The timestamp the member was last modified" },
        lastModifiedBy: MemberContext.MemberId
           with { briefly "The member that last modified this member" },
        currentState: MemberStates
    }
    type MetaInfoQuery is {
        createdOn: TimeStamp?
           with { briefly "Optionally the timestamp to match a member's creation timestamp against" },
        createdBy: MemberContext.MemberId?
           with { briefly "Optionally the member id to match a member's creator against" },
        lastModifiedOn: TimeStamp?
           with { briefly "Optionally the timestamp to match a member's last modification timestamp against" },
        lastModifiedBy: MemberContext.MemberId?
           with { briefly "Optionally the member id to match a member's last modifier against" },
        currentState: MemberStates
    }

    command RegisterMember is {
      memberId: MemberId  with { briefly "Unique identifier for the new member" },
      info: MemberContext.EditableInfo  with { briefly "Info needed for registration" },
      registeringMember: MemberId  with { briefly "Member that registered new member" }
    } with {
      briefly "Create a single new member"
      described as {
        |RegisterMember creates a single new member. The member can be
        |registered by either another member or by themselves. As this
        |could be a self-service request the OrganizationType is optional.
      }
    }

    event MemberRegistered is {
      memberId: MemberId  with { briefly "Unique identifier for the registered member" },
      info: MemberContext.EditableInfo  with { briefly "Info describing the member" },
      meta: MemberContext.MetaInfo
    } with {
      briefly "Event issued after RegisterMember or RegisterMemberList"
      described as {
        |This event occurs whenever a member is registered and provides the
        |meta information for the registered member.  In the case of
        |RegisterMemberList one event per member in the list is published.
      }
    }
    // TODO: DO we still want this? Needs to be discussed, not sure why it was taken out - Alex
    //command RegisterMemberList is {
    //  memberList: MemberMap,
    //  registeringMember: MemberId
    //} briefly "Create a bunch of members"
    //described as {
    //  |RegisterMemberList creates multiple members with a single call. The
    //  |limitation is you can only define a single MemberType in each call, and
    //  |all new Members must be assigned to the same Organization (typically a
    //  |BaseOrg).
    //}

    //event MemberListRegistered is {
    //  memberList: MemberMap,
    //  registeringMember: MemberId
    //}

    command EditMemberInfo is {memberId: MemberId, info: MemberContext.EditableInfo, editingMember: MemberId}
     with { briefly "Edit info of a member"
      described as {
        |This command will overwrite the values of attributes provided in UpdateInfo.
        |If an attribute is not referenced it will be left as is. If an attribute is
        |referenced with no value, an empty value will replace what is currently
        |stored. If an attribute is referenced with a value, the new value will
        |overwrite what is stored.
      }
    }

    event MemberInfoEdited is {
      memberId: MemberId,
      info: MemberContext.Info,
      meta: MemberContext.MetaInfo
    } with {
       briefly "Event issued after EditMemberInfo"
       described as {
         |This event occurs whenever a member's information is edited.
       }
     }

    command ActivateMember is {
      memberId: MemberId,
      activatingMember: MemberId
    } with {
      briefly "Update state of member to Active"
      described as {
        |This command activates the member.
      }
    }

    event MemberActivated is {
      memberId: MemberId,
      meta: MemberContext.MetaInfo
    } with {
      briefly "Event issued after ActivateMember"
      described as {
        |This event is issued after ActivateMember to denote
        |that the member is now active.
      }
    }


    command SuspendMember is {
      memberId: MemberId,
      suspendingMember: MemberId
    } with {
      briefly "Update state of member to Suspended"
      described as {
        |This command suspends the member such that most operations are not available.
      }
    }

    event MemberSuspended is {
      memberId: MemberId,
      meta: MemberContext.MetaInfo
    } with {
      briefly "Event issued after SuspendMember"
      described as {
        |This event is issued after SuspendMember to denote
        |that the member is now suspended.
      }
    }

    command TerminateMember is {
      memberId: MemberId,
      terminatingMember: MemberId
    } with {
      briefly "Update state of member to Terminated"
      described as {
        |This command terminates the member.
      }
    }

    event MemberTerminated is {
      memberId: MemberId,
      meta: MemberContext.MetaInfo
    } with {
      briefly "Event issued after TerminateMember"
      described as {
        |This event is issued after TerminateMember to denote
        |that the member is now terminated.
      }
    }

    query GetMemberData is { memberId: MemberId } with {
      briefly "Get the data of a member"
      described as {
        |This query gets the data of a member if it exists.
      }
    }

    result MemberData is {info: MemberContext.Info, meta: MemberContext.MetaInfo}
    with {
      briefly "The data of the member returned from the GetMemberData query"
      described as {
        |This result contains the member id, member information, and member metadata.
      }
    }

    query GetMembersByMetaInfo is {queryData: MemberContext.MetaInfoQuery} with {
      briefly "Get the members based on the meta info"
      described as {
        |This query gets the members by checking if at least one of the fields of
        |MetaInfoQuery has matched.
      }
    }

    result MemberListResult is {members: ImprovingApp.MemberContext.MemberMap} with {
      briefly "The data returned from the GetMembersByMetaInfo query"
      described as {
        |This result contains the MemberMap, which contains all members that
        |matched to at least one of the fields of MetaInfoQuery.
      }
    }

    entity Member is {
        option aggregate
        option technology("akka")

        handler MemberHandler is {
          on command ImprovingApp.GatewayAPI.MemberGateway.RegisterMember {
            morph entity ImprovingApp.MemberContext.Member to state DraftMemberState with record DraftMember
          }
          //on command RegisterMemberList {
          //    //TODO: list operations on the following:
          //    then morph entity Member to state Member.Active
          //      with record ^^ActiveState(info = MemberContext.Info(),
          //        meta = MemberContext.MetaInfo())
          //    //TODO: How do you reference members of a mapping?
          //    //and set Active.memberId to @RegisterMemberList.MemberList.memberId
          //    //and set Active.info to @RegisterMemberList.MemberList.info
          //}
        }

        record DraftMember is {
          id: MemberId,
          info: MemberContext.EditableInfo,
          meta: MemberContext.MetaInfo
        }
        state DraftMemberState of record DraftMember with {
          described as {
            |This state is the initial state of a Member. It describes that the member
            |is not yet ready to be active. Once out of this state, a member cannot go
            |back to Draft.
          }
        }

        handler DraftMemberHandler {
          on command ImprovingApp.MemberContext.RegisterMember {
            error "Member has already been registered."
          }
          on command ImprovingApp.MemberContext.ActivateMember {
            if "all required fields in requiredInfo are not None or Empty" then
              send event MemberRegistered to outlet MemberEventsSource.Events
              morph entity Member to state RegisteredMemberState with record RegisteredMember
            else {
              if "all required fields in state are not present" then
                error "state is not sufficiently filled out to activate organization"
              else
                "do nothing"
              end
            } end
          }
          on command EditMemberInfo {
            set field Member.DraftMemberState.info to "MemberContext.EditableInfo"
            set field Member.DraftMemberState.meta to "MemberContext.MetaInfo"
            send event MemberInfoEdited to outlet ImprovingApp.MemberContext.MemberEventsSource.Events
          }
          // For GetMemberData, eventually probably only admins and self should be able to make this call. Also
          // potentially allow other roles to get some limited information (this will require adding another
          // aggregate).
          on query GetMemberData {
            send record MemberInfo to outlet ImprovingApp.MemberContext.MemberEventsSource.Events
          }
        }

        record RegisteredMember is {
            id: MemberId,
            info: MemberContext.Info,
            meta: MemberContext.MetaInfo
        }
        state RegisteredMemberState of RegisteredMember

        invariant time_sanity is "<=(@RegisteredMemberState.meta, @RegisteredMemberState.meta)"
        invariant firstName is ">=(length(@RegisteredMemberState.info.firstName), 3)"
        invariant lastName is ">=(length(@RegisteredMemberState.info.firstName), 3)"

        handler ActiveMemberHandler {
            on command ImprovingApp.MemberContext.RegisterMember {
              error "Member has already been registered."
            }
            on command EditMemberInfo {
                set field RegisteredMemberState.info to "MemberContext.Info(
                   contact = @EditMemberInfo.info.contact,
                   handle = @EditMemberInfo.info.handle,
                   avatar = @EditMemberInfo.info.avatar,
                   firstName = @EditMemberInfo.info.firstName,
                   lastName = @EditMemberInfo.info.lastName,
                   notificationPreference = @EditMemberInfo.info.notificationPreference,
                   organizationMembership = @EditMemberInfo.info.organizationMembership,
                   tenant = @EditMemberInfo.info.tenant
                )"
                set field RegisteredMemberState.meta to
                "!MemberContext.MetaInfo(
                    createdOn = @RegisteredMemberState.meta.createdOn,
                    createdBy = @RegisteredMemberState.meta.createdBy,
                    lastUpdatedOn = now(),
                    lastUpdatedBy = @EditMemberInfo.editingMember,
                    currentState = @MemberStates.Draft
                )"
                send event MemberInfoEdited to outlet ImprovingApp.MemberContext.MemberEventsSource.Events
            }
            on command ImprovingApp.MemberContext.SuspendMember {
              if "all required fields in requiredInfo are not None or Empty" then {
                send event MemberSuspended to outlet MemberEventsSource.Events
                  become entity Member to handler SuspendedMemberHandler
                }
            }
            on command ImprovingApp.MemberContext.TerminateMember {
              set field RegisteredMemberState.meta to "record MemberContext.MetaInfo"
              morph entity ImprovingApp.MemberContext.Member to state ImprovingApp.MemberContext.Member.TerminatedMember with record TerminatedMemberState
            }
            on query GetMemberData {
              reply record MemberInfo
            }
        } with {
          described as {
            |This state describes that a member is now active. An active
            |member can transition to any state other than Draft.
          }
        }

        handler SuspendedMemberHandler {
            on command ImprovingApp.MemberContext.RegisterMember {
              error "Member has already been registered."
            }
            on command ImprovingApp.MemberContext.ActivateMember {
              send event ImprovingApp.GatewayAPI.MemberGateway.MemberActivated to outlet ImprovingApp.MemberContext.MemberEventsSource.Events
              become entity ImprovingApp.MemberContext.Member to handler ActiveMemberHandler
            }
            on command ImprovingApp.MemberContext.SuspendMember {
               set field RegisteredMemberState.meta to "MemberContext.MetaInfo"
               send event ImprovingApp.MemberContext.MemberSuspended to outlet ImprovingApp.MemberContext.MemberEventsSource.Events
            } with { briefly "A suspension reason can be updated by re-issuing the command" }
            on command ImprovingApp.MemberContext.TerminateMember {
              set field RegisteredMemberState.meta to "MemberContext.MetaInfo"
              morph entity ImprovingApp.MemberContext.Member to state TerminatedMember with record TerminatedMemberState
            }
            on query GetMemberData {
              reply record ImprovingApp.MemberContext.Info
            }
        } with {
          described as {
            |This handle does not let a member access anything due
            |to being a bad user. This state transition is only possible
            |as a command issued by an administrator and therefore can only
            |be removed from the suspended state by an administrator.
          }
        }

        record TerminatedMemberState is {
            lastMeta: MemberContext.MetaInfo
        }
        state TerminatedMember of TerminatedMemberState with {
          described as {
           |This state describes a member who exercises their right to be forgotten.
          }
        }
        handler TerminatedMemberHandler is {
          on other {
            error "Terminated members cannot process messages"
          }
        }

    } with { described in file "member-entity.md" }
} with { described in file "members-context.md" }
