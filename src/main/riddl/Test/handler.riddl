handler TestGateway is {
  on command CreateTenants {
    given "each of the TenantInfo values provided in CreateTenants"
    then "create a tenant with matching content, 0 members, and 0 organizations"
  }
  on command CreateOrganizations {
    given "each of the OrgInfo values provided in CreateOrganizations"
    then "create an organization with matching content, no members, no child organizations"
  }
  on command CreateMembers {
    given "each of the MemberInfo values provided in CreateMembers"
    then "create a member with matching content"
  }
  on command CreateEvents {
    given "each of the EventInfo values provided in CreateEvents"
    then "create an event with matching content, no reservation"
  }
  on command CreateStores {
    given "each of the StoreInfo values provided in CreateStores"
    then "create a store with matching content"
  }
  on command CreateProducts {
    given "each of the ProductInfo values provided in CreateProducts"
    then "create a product with matching content"
  }
  on command CreateOrders {
    given "each of the OrderInfoForMember values provided in CreateOrganization"
    then "create an order using OrderInfoForMember.info, the coupled memberId as creatingMember, and CreateOrders.storeId as storeId"
  }
  on query GetAllTenantIds {
    then "forward the query to AllIdsProjection & return its reply"
  }
  on query GetAllOrgIds {
    then "forward the query to AllIdsProjection & return its reply"
  }
  on query GetAllEventIds {
    then "forward the query to AllIdsProjection & return its reply"
  }
  on query GetAllMemberIds {
    then "forward the query to AllIdsProjection & return its reply"
  }
  on query GetAllStoreIds {
    then "forward the query to AllIdsProjection & return its reply"
  }
  on query GetAllSkus {
    then "forward the query to AllIdsProjection & return its reply"
  }
  on query FindMembersAtEventsOnDayForOrg {
    then "forward the query to MembersAttendingEventsForAnOrganizationProjection & return its reply"
  }
  on command StartScenario {
    given "The scenario information in the command"
    then "use the values to create new entities per already-created entity of another type, in order of how they are listed, storing all results in memory"
    and "return all ids retrieved from creation as ScenarioResults"
  }
  on command EndScenario {
    given "the results of a previous scenario"
    then "call each service to delete the ids contained in the results"
  }
}
