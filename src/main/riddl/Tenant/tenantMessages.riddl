command EstablishTenant is {
  tenantId: TenantId,
  tenantInfo: TenantContext.TenantInfo,
  establishingMember: MemberId
} brief "A command that creates a new Tenant"
described by {
  |Given a TenantId and the corresponding TenantInfo, the tenant is created and
  |set to the active state. This command yields a TenantEstablished event.
}
event TenantEstablished is {
  tenantId: TenantId,
  tenantInfo: TenantContext.TenantInfo,
  metaInfo: TenantContext.TenantMetaInfo
} briefly "The event resulting from creating a new Tenant"
described by {
  |When a Tenant is created, this event is raised to provide information
  |about the tenant.
}

command ActivateTenant is {
	tenantId: TenantId,
	activatingUser: MemberId
} briefly "A command that activates a tenant so that operations can be allowed"
described by {
  |Given a TenantId, the tenant is activated so that certain user functions can be performed.
  |This command yields a TenantSuspended event.
}
event TenantActivated is {
  tenantId: TenantId,
  info: TenantContext.TenantInfo,
  meta: TenantContext.TenantMetaInfo
} briefly "The event resulting from updating a Tenant's state to Active"

command SuspendTenant is {
	tenantId: TenantId,
	suspendingUser: MemberId
} briefly "A command that suspends a tenant so that many operations are not allowed"
described by {
  |Given a TenantId, the tenant is suspended so that certain user functions cannot be performed.
  |This command yields a TenantSuspended event.
}
event TenantSuspended is {
  tenantId: TenantId,
  info: TenantContext.TenantInfo,
  meta: TenantContext.TenantMetaInfo
} briefly "The event resulting from updating a Tenant's state to Suspended"

command TerminateTenant is {
	tenantId: TenantId,
	terminatingUser: MemberId
} briefly "A command that terminates a tenant by deleting all data except its ID"
described by {
  |Given a TenantId, the tenant is terminated per GDPR requirement, resulting in deletion of all PII.
  |This command yields a TenantTerminated event.
}
event TenantTerminated is {
  tenantId: TenantId,
  meta: TenantContext.TenantMetaInfo
} briefly "The event resulting from updating a Tenant's status to terminated"

command EditInfo {
  tenantId: TenantId briefly "The unique Id of the tenant to create",
  newInfo: TenantContext.OptionalInfo briefly "The information about the tenant",
  updatingUser: String
} briefly "A command to edit the values of an Tenant's Info "
event InfoEdited is {
  tenantId: TenantId,
  info: TenantContext.TenantInfo,
  meta: TenantContext.TenantMetaInfo
}
command AddOrganizations is { tenantId: TenantId, orgId: OrganizationId*, updatingUser: String }
event OrganizationsAdded is { tenantId: TenantId, newOrgsList: OrganizationId*, meta: TenantContext.TenantMetaInfo }
command RemoveOrganizations is { tenantId: TenantId, orgId: OrganizationId*, updatingUser: String }
event OrganizationsRemoved is { tenantId: TenantId, newOrgsList: OrganizationId*, newContact: Contact, meta: TenantContext.TenantMetaInfo }

command UpdatePrimaryContact is { tenantId: TenantId, newContact: Contact, updatingUser: String }
event PrimaryContactUpdated is { tenantId: TenantId, oldContact: Contact, newContact: Contact, meta: TenantContext.TenantMetaInfo }

command ChangeTenantName is { tenantId: TenantId, newName: String, updatingUser: String }
event TenantNameChanged is { tenantId: TenantId, oldName: String, newName: String, meta: TenantContext.TenantMetaInfo }

// command SwapBillingAccount is { tenantId: TenantId, newBillingAccount: BillingAccountId, updatingUser: String }
// event BillingAccountSwapped is { tenantId: TenantId, name: String, oldAccount: BillingAccountId, newAccount: BillingAccountId, meta: TenantContext.TenantMetaInfo }
// command SwapDistributionAccount is { tenantId: TenantId, newDistributionAccount: DistributionAccountId, updatingUser: String }
// event DistributionAccountSwapped is { tenantId: TenantId, name: String, oldAccount: DistributionAccountId, newAccount: DistributionAccountId, meta: TenantContext.TenantMetaInfo }
