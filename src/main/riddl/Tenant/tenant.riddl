type TenantId is Id(ImprovingApp.TenantContext.Tenant)
  briefly "Unique identifier for Tenant Entity"

context TenantContext is {
    include "tenantTypeDefinitions"
    include "tenantMessages"
    include "tenantProjections"
    include "tenantSources"

    entity Tenant is {
        options (event-sourced, available)

        handler TenantHandler is {
            on command EstablishTenant {
                example Success {
                    then "Set fields from EstablishTenant for tenant"
                    and "Set meta data to reflect change"
                    and "yield TenantEstablished event"
                }
                example NameAlreadyTaken{
                    when "name is being used for another tenant"
                    then error "Name is not available for use"
                }
                example IncompletePrimaryContact {
                    when "primaryContact info is not complete"
                    then error "primaryContact must be complete in order to establish a Tenant"
                }
            }
        }
        state DraftTenant is {
            fields {
                info: TenantContext.Info,
                meta: TenantContext.MetaInfo
            }
            handler DraftTenantHandler is {
                on command TenantContext.EditInfo {
                    then "Copy fields from TenantContext.EditInfo into Draft info fields"
                    and "adjust meta fields to reflect the change set"
                    and "yield event TenantContext.InfoUpdated"
                }
                on command TenantContext.UpdateStatus {
                    example Success {
                        then "Morph Tenant to Active state"
                        and "Set Tenant meta data to reflect the change"
                        and "yield TenantContext.StatusUpdated event"
                    }
                    // example NoBillingAccount {
                    //     when "Desired status is Active and BillingAccount is null"
                    //     then error "Tenant must have a BillingAccount to be Activated"
                    // }
                    // example NoDistributionAccount {
                    //     when "Desired status is Active and DistributionAccount is null"
                    //     then error "Tenant must have a DistributionAccount to be Activated"
                    // }
                    example NotAuthorized {
                        when "Desired status is Active and updating user is not authorized to activate the tenant"
                        then error "User is not authorized to Activate Tenant"
                    }
                }
                on command UpdatePrimaryContact {
                    example Success {
                        then "update info's primary contact details with arguments from UpdatePrimaryContact"
                        and "set Tenant meta data to reflect the change"
                        and "yield UpdatedPrimaryContactEvent"
                    }
                    example IncompleteContactInfo {
                        when "incoming primary contact info does not have all fields"
                        then error "primary contact info is not complete"
                    }
                    example NotAuthorized {
                        when "updating user is not authorized to make changes to the tenant"
                        then error "User is not authorized to modify Tenant"
                    }
                }
                on command ChangeTenantName {
                    example Success {
                        then "update info's tenant name"
                        and "Set Tenant meta data to reflect change"
                        and "yield TenantNameChanged event"
                    }
                    example TenantNameAlreadyExists {
                        when "Another Tenant is already using the provided name"
                        then error "Tenant name is already in use"
                    }
                }
                // on command SwapBillingAccount {
                //     example Success {
                //         then "Update the BillingAccountId"
                //         and "set tenant meta data to reflect change"
                //         and "yield BillingAccountSwapped event"
                //     }
                //     example InvalidBillingAccount {
                //         when "BillingAccount ID does not exist"
                //         then error "BillingAccount ID does not exist"
                //     }
                //     example NotAuthorized {
                //         when "updating user is not authorized to make changes to the tenant"
                //         then error "User is not authorized to modify Tenant"
                //     }
                // }
                // on command SwapDistributionAccount {
                //     example Success {
                //         then "Update the DistributionAccountId"
                //         and "set tenant meta data to reflect change"
                //         and "yield DistributionAccountSwapped event"
                //     }
                //     example InvalidBillingAccount {
                //         when "DistributionAccount ID does not exist"
                //         then error "DistributionAccount ID does not exist"
                //     }
                //     example NotAuthorized {
                //         when "updating user is not authorized to make changes to the tenant"
                //         then error "User is not authorized to modify Tenant"
                //     }
                // }
                on other { then error "Command not allowed in Draft state" }
            }
        }
        state ActiveTenant is {
            fields {
                info: TenantContext.Info,
                meta: TenantContext.MetaInfo
            }
            handler ActiveTenantHandler is {
                 on command TenantContext.UpdateStatus {
                    example Success {
                        then "Morph Tenant to Suspended state"
                        and "Set Tenant meta data to reflect the change"
                        and "yield TenantContext.StatusUpdated event"
                    }
                    example NotAuthorized {
                        when "updating user is not authorized to suspend tenant"
                        then error "User is not authorized to suspend Tenant"
                    }
                }
                on command UpdatePrimaryContact {
                    example Success {
                        then "update info's primary contact details with arguments from UpdatePrimaryContact"
                        and "set Tenant meta data to reflect the change"
                        and "yield UpdatedPrimaryContactEvent"
                    }
                    example IncompleteContactInfo {
                        when "incoming primary contact info does not have all fields"
                        then error "primary contact info is not complete"
                    }
                    example NotAuthorized {
                        when "updating user is not authorized to make changes to the tenant"
                        then error "User is not authorized to modify Tenant"
                    }
                }
                on command ChangeTenantName {
                    example Success {
                        then "update info's tenant name"
                        and "Set Tenant meta data to reflect change"
                        and "yield TenantNameChanged event"
                    }
                    example TenantNameAlreadyExists {
                        when "Another Tenant is already using the provided name"
                        then error "Tenant name is already in use"
                    }
                    example NotAuthorized {
                        when "updating user is not authorized to make changes to the tenant"
                        then error "User is not authorized to modify Tenant"
                    }
                }
                // on command SwapBillingAccount {
                //     example Success {
                //         then "Update the BillingAccountId"
                //         and "set tenant meta data to reflect change"
                //         and "yield BillingAccountSwapped event"
                //     }
                //     example InvalidBillingAccount {
                //         when "BillingAccount ID does not exist"
                //         then error "BillingAccount ID does not exist"
                //     }
                //     example NotAuthorized {
                //         when "updating user is not authorized to make changes to the tenant"
                //         then error "User is not authorized to modify Tenant"
                //     }
                // }
                // on command SwapDistributionAccount {
                //     example Success {
                //         then "Update the DistributionAccountId"
                //         and "set tenant meta data to reflect change"
                //         and "yield DistributionAccountSwapped event"
                //     }
                //     example InvalidBillingAccount {
                //         when "DistributionAccount ID does not exist"
                //         then error "DistributionAccount ID does not exist"
                //     }
                //     example NotAuthorized {
                //         when "updating user is not authorized to make changes to the tenant"
                //         then error "User is not authorized to modify Tenant"
                //     }
                // }
                on other { then error "Command not allowed in Active state" }
            }
        }
        state SuspendedTenant is {
            fields {
                info: TenantContext.Info,
                meta: TenantContext.MetaInfo
            }
            handler SuspendedTenantHandler is {
                 on command TenantContext.UpdateStatus {
                    example Success {
                        then "Morph Tenant to Active state"
                        and "Set Tenant meta data to reflect the change"
                        and "yield TenantContext.StatusUpdated event"
                    }
                    example NotAuthorized {
                        when "updating user is not authorized to activate the tenant"
                        then error "User is not authorized to Activate Tenant"
                    }
                }
                on other { then error "Command not allowed in Suspended state" }
            }
        }
    }
} described in file "tenant.md"
