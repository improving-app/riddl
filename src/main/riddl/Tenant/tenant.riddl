type TenantId is Id(ImprovingApp.TenantContext.Tenant)
  briefly "Unique identifier for Tenant Entity"

context TenantContext is {
    include "tenantTypeDefinitions"
    include "tenantMessages"
    include "tenantProjections"
    include "tenantSources"

    entity Tenant is {
        options (event-sourced, available)

        handler TenantHandler is {
          on command EstablishTenant {
            if "name is being used for another tenant" then {
              error "Name is not available for use"
            } else {
              if "primaryContact info is not complete" then {
                error "primaryContact must be complete in order to establish a Tenant"
              } else {
                send event TenantEstablished to outlet TenantEvents.Events
                morph entity Tenant to state EstablishedTenant with
                  record EstablishedTenantState
              }
            }
          }
        }

        // TODO: Do we want to have Draft state or not for Tenant? Needs to be approved by James
        //record DraftTenantState is  {
        //    info: TenantContext.OptionalInfo,
        //    meta: TenantContext.TenantMetaInfo
        //} briefly "Tenant is inactive, in process of being created/defined",
        //state DraftTenant of DraftTenantState is {
        //    handler DraftTenantHandler is {
        //        on command TenantContext.EditInfo {
        //            then "Copy fields which are present from TenantContext.EditInfo.newInfo into Draft info fields"
        //            and "adjust meta fields to reflect the change set"
        //            and "yield event TenantContext.InfoUpdated"
        //        }
        //        on command TenantContext.UpdateStatus {
        //            example Success {
        //                then "Morph Tenant to Active state"
        //                and "Set Tenant meta data to reflect the change"
        //                and "yield TenantContext.StatusUpdated event"
        //            }
        //            // example NoBillingAccount {
        //            //     when "Desired status is Active and BillingAccount is null"
        //            //     then error "Tenant must have a BillingAccount to be Activated"
        //            // }
        //            // example NoDistributionAccount {
        //            //     when "Desired status is Active and DistributionAccount is null"
        //            //     then error "Tenant must have a DistributionAccount to be Activated"
        //            // }
        //            example NotAuthorized {
        //                when "Desired status is Active and updating user is not authorized to activate the tenant"
        //                then error "User is not authorized to Activate Tenant"
        //            }
        //            example NotSufficient {
        //                when "Desired status is Active and info fields are not entirely filled out"
        //                then error "State is not sufficiently filled out to Activate Tenant"
        //            }
        //        }
        //        on command UpdatePrimaryContact {
        //            example Success {
        //                then "update info's primary contact details with arguments from UpdatePrimaryContact"
        //                and "set Tenant meta data to reflect the change"
        //                and "yield UpdatedPrimaryContactEvent"
        //            }
        //            example IncompleteContactInfo {
        //                when "incoming primary contact info does not have all fields"
        //                then error "primary contact info is not complete"
        //            }
        //            example NotAuthorized {
        //                when "updating user is not authorized to make changes to the tenant"
        //                then error "User is not authorized to modify Tenant"
        //            }
        //        }
        //        on command ChangeTenantName {
        //            example Success {
        //                then "update info's tenant name"
        //                and "Set Tenant meta data to reflect change"
        //                and "yield TenantNameChanged event"
        //            }
        //            example TenantNameAlreadyExists {
        //                when "Another Tenant is already using the provided name"
        //                then error "Tenant name is already in use"
        //            }
        //        }
        //        on command AddOrganizations {
        //            example Success {
        //                then "add orgs to info's list of tenant orgs"
        //                and "Set Tenant meta data to reflect change"
        //                and "yield OrganizationsAdded event"
        //            }
        //            example OrganizationsNameAlreadyInList {
        //                when "This organizations already belongs to this tenant"
        //                then error "Organizations already belongs to tenant"
        //            }
        //        }
        //        on command RemoveOrganizations {
        //           example Success {
        //               then "remove organizations from info's list of tenant orgs"
        //               and "Set Tenant meta data to reflect change"
        //               and "yield OrganizationsRemoved event"
        //           }
        //           example OrganizationsNameNotInListAlready {
        //               when "This tenant already doesn't belong to this organizations"
        //               then error "Tenant doesn't belongs to organizations already"
        //           }
        //        }
        //        // on command SwapBillingAccount {
        //        //     example Success {
        //        //         then "Update the BillingAccountId"
        //        //         and "set tenant meta data to reflect change"
        //        //         and "yield BillingAccountSwapped event"
        //        //     }
        //        //     example InvalidBillingAccount {
        //        //         when "BillingAccount ID does not exist"
        //        //         then error "BillingAccount ID does not exist"
        //        //     }
        //        //     example NotAuthorized {
        //        //         when "updating user is not authorized to make changes to the tenant"
        //        //         then error "User is not authorized to modify Tenant"
        //        //     }
        //        // }
        //        // on command SwapDistributionAccount {
        //        //     example Success {
        //        //         then "Update the DistributionAccountId"
        //        //         and "set tenant meta data to reflect change"
        //        //         and "yield DistributionAccountSwapped event"
        //        //     }
        //        //     example InvalidBillingAccount {
        //        //         when "DistributionAccount ID does not exist"
        //        //         then error "DistributionAccount ID does not exist"
        //        //     }
        //        //     example NotAuthorized {
        //        //         when "updating user is not authorized to make changes to the tenant"
        //        //         then error "User is not authorized to modify Tenant"
        //        //     }
        //        // }
        //        on other { then error "Command not allowed in Draft state" }
        //    }
        //}

        record EstablishedTenantState is {
            id: TenantId,
            info: TenantContext.TenantInfo,
            meta: TenantContext.TenantMetaInfo
        } briefly "Tenant is active and suitable for use"
        state EstablishedTenant of EstablishedTenantState is {
            handler ActiveTenantHandler is {
              on command TenantContext.EditInfo {
                "Copy fields which are present from TenantContext.EditInfo.newInfo into info fields"
                set field EstablishedTenantState.meta to "record TenantContext.TenantMetaInfo"
                send event TenantContext.InfoEdited to outlet TenantEvents.Events
              }
              on command SuspendTenant {
                if "updating user is not authorized to suspend tenant" then {
                  error "User is not authorized to suspend Tenant"
                } else {
                  set field EstablishedTenantState.meta to "record TenantContext.TenantMetaInfo"
                  send event TenantContext.TenantSuspended to outlet TenantEvents.Events
                  become entity Tenant to handler SuspendedTenantHandler
                }
              }
	            on command TerminateTenant {
	              if "terminating user is not authorized to make changes to the tenant" then {
	                error "User is not authorized to modify Tenant"
	              } else {
                  set field EstablishedTenantState.meta to "TenantContext.TenantMetaInfo"
                  send event TenantContext.TenantTerminated to outlet TenantEvents.Events
	                morph entity Tenant to state TerminatedTenant with record TerminatedTenantState
	              }
	            }
	            // TODO: These need to be updated once we get around to payments
                // on command SwapBillingAccount {
                //     example Success {
                //         then "Update the BillingAccountId"
                //         and "set tenant meta data to reflect change"
                //         and "yield BillingAccountSwapped event"
                //     }
                //     example InvalidBillingAccount {
                //         when "BillingAccount ID does not exist"
                //         then error "BillingAccount ID does not exist"
                //     }
                //     example NotAuthorized {
                //         when "updating user is not authorized to make changes to the tenant"
                //         then error "User is not authorized to modify Tenant"
                //     }
                // }
                // on command SwapDistributionAccount {
                //     example Success {
                //         then "Update the DistributionAccountId"
                //         and "set tenant meta data to reflect change"
                //         and "yield DistributionAccountSwapped event"
                //     }
                //     example InvalidBillingAccount {
                //         when "DistributionAccount ID does not exist"
                //         then error "DistributionAccount ID does not exist"
                //     }
                //     example NotAuthorized {
                //         when "updating user is not authorized to make changes to the tenant"
                //         then error "User is not authorized to modify Tenant"
                //     }
                // }
                on other {
                  error "Command not allowed in Active state"
                }
            }
            handler SuspendedTenantHandler is {
              on command TenantContext.EditInfo {
                "Copy fields which are present from TenantContext.EditInfo.newInfo into info fields"
                set field EstablishedTenantState.meta to "TenantContext.TenantMetaInfo"
                send event TenantContext.InfoEdited to outlet TenantEvents.Events
              }
              on command ActivateTenant {
                if "updating user is not authorized to activate the tenant" then{
                  error "User is not authorized to Activate Tenant"
                } else {
                  set field EstablishedTenantState.meta to "TenantContext.TenantMetaInfo"
                  send event TenantContext.TenantSuspended to outlet TenantEvents.Events
                  become entity Tenant to handler ActiveTenantHandler
                }
              }
              on command TerminateTenant {
                if "terminating user is not authorized to make changes to the tenant" then {
                  error "User is not authorized to modify Tenant"
                } else {
                  set field EstablishedTenantState.meta to "TenantContext.TenantMetaInfo"
                  send event TenantContext.TenantTerminated to outlet TenantEvents.Events
                  morph entity Tenant to state TerminatedTenant with record TerminatedTenantState
                }
              }
              on other {
                error "Command not allowed in Suspended state"
              }
            }
        }

        record TerminatedTenantState is {
          lastMeta: TenantContext.TenantMetaInfo
        } briefly "Tenant is is terminated, all data has been deleted"
        state TerminatedTenant of TerminatedTenantState is {
          handler TerminatedTenantHandler is {
            on other {
              error "Command not allowed in Terminated state"
            }
          }
        }
    }
} described in file "tenant.md"
