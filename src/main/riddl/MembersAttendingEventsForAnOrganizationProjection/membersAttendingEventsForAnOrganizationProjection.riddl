query FindMembersAtEventsOnDayForOrg is {org: OrganizationId, eventDate: Date}
result NoEventsOnDayForOrg is {org: OrganizationId}
result MembersAtEventsOnDay is {memberEvents: MemberEvents+}

context MembersAttendingEventsForAnOrganizationProjection is  {
  projection MembersAttendingEventsForAnOrganizationView is {
    record MembersAttendingEventsForAnOrganizationFields {
        event: EventId,     //ticket-event & org-event correlation tables, event table
        eventName: String,  //event table
        eventDate: Date,     //event table
        eventOrg: OrganizationId, //org-event correlation table
        ticketSku: SKU, // ticket-event & ticket-member correlation tables
        attendingMember: MemberId, //ticket-member correlation table & member table
        attendingMemberName: String //member table
    }
    handler MembersAttendingEventsForAnOrganizationEventsViewHandler is {
        on event MemberRegistered {
            then "create rows in member table with attendingMember set to MemberRegistered.id"
            and "set previous row's attendingMemberName to concatenated MemberRegistered.info.firstName and MemberRegistered.info.lastName"
            and "set previous row's status to MemberRegistered.metaInfo.memberStatus"
        }
        on event MemberStatusUpdated {
            then "update row in member table with id = MemberStatusUpdated.memberId and update the status to MemberStatusUpdated.metaInfo.memberStatus"
        }
        on event EventScheduled {
            then "create row in event table with event set to EventScheduled.eventId, eventName set to EventScheduled.info.eventName, eventOrg to EventScheduled.info.sponsoringOrg, eventDate to day of EventScheduled.info.expectedStart, status to EventScheduled.metaInfo.status"
            and "create row in org-event table with event set to EventScheduled.eventId, eventOrg set to set to EventScheduled.info.sponsoringOrg"
        }
        on event EventRescheduled {
            then "update row in event table with eventDate with day of EventRescheduled.startTime in row in event table with event corresponding to EventRescheduled.eventId"
            and "update row in event table with status with EventRescheduled.metaInfo.status"
        }
        on event EventStarted {
            then "update row in event table with eventDate with day of the current day"
            and "update row in event table with status with EventStarted.metaInfo.status"
        }
        on event EventCancelled {
            then "remove row in row in event table with event corresponding to EventCancelled.eventId"
            and "remove row in org-event table with event set to EventScheduled.eventId, eventOrg set to set to EventScheduled.info.sponsoringOrg"
        }
        on EventDelayed {
            then "update row in event table with eventDate with the new date"
            and "update row in event table with status with EventDelayed.metaInfo.status"
        }
        on EventEnded {
            then "update row in event table with status with EventDelayed.metaInfo.status"
            //TODO: should we delete on ending?
        }
        on event ProductCreated {
            then "if product is ticket, create row in ticket-event table with sku as ticketSku & productDetails.eventId as event & status as ACTIVE"
        }
        on event ProductActivated {
            then "update row in ticket-event table with status to active"
        }
        on event ProductInactivated" {
            then "update row in ticket-event table with status to inactive"
        }
        on event ProductDeleted" {
            then "delete row in ticket-event"
        }
        on event OrderCreated {
            then "for each OrderCreated.orderInfo.lineItem that has a SKU in ticket table, create row in ticket-event table with OrderCreated.meta.memberId as attendingMember & sku as ticketSku"
        }
        on query FindMembersAtEventsOnDayForOrg {
            then "filter org table by FindMembersAtEventsOnDayForOrg.org"
            and "left results of previous operation with org-event, ticket-event, ticket-member, member, event tables"
            and "filter result of previous operation by eventDate equals FindMembersAtEventsOnDayForOrg.eventDate"
            and "return MembersAtEventsOnDay with event info keyed by members - or NoEventsOnDayForOrg if table is empty"
        }
    }
  }
}
