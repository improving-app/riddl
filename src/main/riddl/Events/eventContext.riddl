type EventId is Id (ImprovingApp.Events.EventContext.Event)
  briefly "Unique identifier for Tenant Entity"

context EventContext is {
    // plant EventPlant is {
    //     pipe EventPipe is {???}
    // }

    source LiveUpdates is {
        outlet Updates is type LiveUpdate from entity Event
    } explained as "This is a source for things that happen as an event progresses"

    type LiveUpdate is mapping from String to String//i.e. "Score" -> "12 to 10", "attendance" -> "523", ...
    type EventResults is mapping from String to String //i.e. "Score" -> "12 to 10", "attendance" -> "523", ...

    /*
    type EventSpecificDetails is one of {FootballGame, BasketballGame, Play, Concert, FundRaiser}

    type FootballGame is {???
        //homeTeam: OrgID,
        //visitingTeam: String, || OrgID,
    }
    type BasketballGame is {???}
    type Play is {???}
    type Concert is {???}
    type FundRaiser is {???}
    type EventType is {
        details: EventSpecificDetails,
        finalResults: EventResults
    }
    */

    type EventStatus is any of {Scheduled, InProgress, Past, Cancelled, Delayed}

    type EventInfo is {
        eventName: String,
        description: String,
        eventURL: URL,
        sponsoringOrg: OrganizationId,
        geoLocation: Location,
        //venue: VenueId,
        // location: LocationId,
        reservation: ReservationId,
        expectedStart: DateTime,
        expectedEnd: DateTime,
        isPrivate: Boolean
        //eventType: EventType
    }
    type EventMetaInfo is {
        scheduledBy: MemberId,
        scheduledOn: DateTime,
        lastModifiedBy: MemberId,
        lastModifiedOn: DateTime,
        actualStart: DateTime,
        actualEnd: DateTime,
        status: EventStatus
    }

    command ChangeEventInfo is {eventId: EventId, info: EventInfo, changingMember: MemberId}
    event EventInfoChanged is {eventId: EventId, info: EventInfo, meta: EventMetaInfo}
    command ScheduleEvent is {eventId: EventId, info: EventInfo, schedulingMember: MemberId}
    event EventScheduled is {info: EventInfo, meta: EventMetaInfo}
    command CancelEvent is {eventId: EventId, cancellingMember: MemberId}
    event EventCancelled is {eventId: EventId}
    command RescheduleEvent is {eventId: EventId, start: DateTime, end: DateTime, reschedulingMember: MemberId}
    event EventRescheduled is {eventId: EventId, info: EventInfo, meta: EventMetaInfo}
    command DelayEvent is {eventId: EventId, reason: String, expectedDuration: Duration, delayingMember: MemberId}
    event EventDelayed is {eventId: EventId, reason: String, meta: EventMetaInfo, expectedDuration: Duration}
    command StartEvent is {eventId: EventId, startingMember: MemberId}
    event EventStarted is {eventId: EventId, meta: EventMetaInfo}
    command EndEvent is {eventId: EventId, endingMember: MemberId}
    event EventEnded is {eventId: EventId, meta: EventMetaInfo}
    command AddLiveUpdate is {eventId: EventId, update: LiveUpdate}

    entity Event is {
        option is aggregate

        handler EventHandler is {
            on command ScheduleEvent {
                then morph entity Event to state Scheduled //(
                    // eventId = @ScheduleEvent.eventId,
                    // eventInfo = @ScheduleEvent.info,
                    // eventMetaInfo = new EventMetaInfo(
                    //     scheduledBy = @ScheduleEvent.schedulingMember,
                    //     scheduledOn = today(),
                    //     lastModifiedBy = @ScheduleEvent.schedulingMember,
                    //     lastModifiedOn = today(),
                    //     status = Delayed
                    // )
                //)
            }
            on other {then error "You must first create an event using ScheduleEvent command."}
        }

        state Scheduled is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
            }
            handler ScheduledEventHandler {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{
                    then "set entity eventInfo to message info"
                    and "set entity lastModifiedBy to message field cancellingMember"
                    and "set entity lastModifiedOn to today()"
                }
                on command CancelEvent{
                    then "morph entity Event to state Event.Cancelled"
                    and "set entity status to Cancelled"
                    and "set entity lastModifiedBy to message field cancellingMember"
                    and "set entity lastModifiedOn to today()""
                }
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        state InProgress is {
            fields{
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
            }
            handler InProgressEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
            //score, period, etc...
        }
        state Delayed is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                reason: String,
                eventMetaInfo: EventMetaInfo
                //finalScore
            }
            handler DelayedEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        state Past is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
                //finalScore
            }
            handler PastEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        state Cancelled is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
                //reason
            }
            handler CancelledEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        //also consider postponed, delayed
    }

    // entity Game is {
    //     state PendingGame is {???} handler PendingGameHandler is {???}
    //     state InProgressEvent is {???} handler InProgressGameHandler is {???}
    //     state PastEvent is {???} handler PastGameHandler is {???}
    //     state CancelledEvent is {???} handler CancelledGameHandler is {???}
    //     state PostponedGame is {???} handler PostponedGameHandler is {???}
    //     state DelayedGame is {???} handler DelayedGameHandler is {???}
    // }
}
