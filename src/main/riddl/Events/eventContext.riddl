type EventId is Id (ImprovingApp.Events.EventContext.Event)
  briefly "Unique identifier for Tenant Entity"

context EventContext is {
		include "eventMessages"
		include "eventTypeDefinitions"
		include "eventSources"

    entity Event is {
        option is aggregate

        handler EventHandler is {
            on command ScheduleEvent {
                then morph entity Event to state Scheduled //(
                    // eventId = @ScheduleEvent.eventId,
                    // eventInfo = @ScheduleEvent.info,
                    // eventMetaInfo = new EventMetaInfo(
                    //     scheduledBy = @ScheduleEvent.schedulingMember,
                    //     scheduledOn = today(),
                    //     lastModifiedBy = @ScheduleEvent.schedulingMember,
                    //     lastModifiedOn = today(),
                    //     status = Delayed
                    // )
                //)
            }
            on other {then error "You must first create an event using ScheduleEvent command."}
        }

        state Scheduled is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
            }
            handler ScheduledEventHandler {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{
                    then "set entity eventInfo to message info"
                    and "set entity lastModifiedBy to message field cancellingMember"
                    and "set entity lastModifiedOn to today()"
                }
                on command CancelEvent{
                    then "morph entity Event to state Event.Cancelled"
                    and "set entity status to Cancelled"
                    and "set entity lastModifiedBy to message field cancellingMember"
                    and "set entity lastModifiedOn to today()"
                }
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        state InProgress is {
            fields{
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
            }
            handler InProgressEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
            //score, period, etc...
        }
        state Delayed is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                reason: String,
                eventMetaInfo: EventMetaInfo
                //finalScore
            }
            handler DelayedEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        state Past is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
                //finalScore
            }
            handler PastEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        state Cancelled is {
            fields {
                eventId: EventId,
                eventInfo: EventInfo,
                eventMetaInfo: EventMetaInfo
                //reason
            }
            handler CancelledEventHandler is {
                on command ScheduleEvent{then error "Event is already scheduled. Please RescheduleEvent to change event information."}
                on command ChangeEventInfo{???}
                on command CancelEvent{???}
                on command RescheduleEvent{???}
                on command DelayEvent{???}
                on command StartEvent{???}
                on command EndEvent{???}
                on command AddLiveUpdate{???}
            }
        }
        //also consider postponed, delayed
    }

    // entity Game is {
    //     state PendingGame is {???} handler PendingGameHandler is {???}
    //     state InProgressEvent is {???} handler InProgressGameHandler is {???}
    //     state PastEvent is {???} handler PastGameHandler is {???}
    //     state CancelledEvent is {???} handler CancelledGameHandler is {???}
    //     state PostponedGame is {???} handler PostponedGameHandler is {???}
    //     state DelayedGame is {???} handler DelayedGameHandler is {???}
    // }
}
