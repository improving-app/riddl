type EventId is Id (ImprovingApp.Events.EventContext.Event)
  briefly "Unique identifier for Tenant Entity"

context EventContext is {
  include "eventMessages"
  include "eventTypeDefinitions"
  include "eventSources"

  function IncrementDelayedEventTime is {
    requires {originalTime: DateTime, duration: Duration}
    returns { newTime: DateTime }
    body ???
  } briefly "used for incrementing start time and end time when DelayEvent is received"

  function startTimeIfPast is {
    requires {startTime: DateTime}
    returns { timeOpt: DateTime? }
    body ???
  } briefly "returns startTime if it is past, empty option if it isn't. This is used when CancelEvent is received"

  function nowIfStartIsPast is {
    requires {startTime: DateTime}
    returns { nowOpt: DateTime? }
    body ???
  } briefly "returns now if startTime is past, empty option if it isn't. This is used when CancelEvent is received"

  function newEditableInfoFromFieldsPresentInEditable is {
    requires { editable: EditableEventInfo, oldInfo: EditableEventInfo }
    returns { newInfo: EditableEventInfo }
    body ???
  } briefly "returns newInfo with all fields present in editable and all those not present there taken from oldInfo"

  function newInfoFromFieldsPresentInEditable is {
    requires { editable: EditableEventInfo, oldInfo: EventInfo }
    returns { newInfo: EventInfo }
    body ???
  } briefly "returns newInfo with all fields present in editable and all those not present there taken from oldInfo"

  entity Event is {
    option is aggregate

    handler EventHandler is {
      on command CreateEvent {
        send event EventCreated to outlet EventEventsSource.Events
        morph entity Event to state DraftEvent with record DraftEventState
      }
      on other {
        error "You must first create an event using ScheduleEvent command."
      }
    }

    record DraftEventState is {
      id: EventId,
      info: EditableEventInfo,
      meta: EventMetaInfo
      //reservation: ReservationId?
    }
    state DraftEvent of Event.DraftEventState is {
      handler DraftEventHandler {
        on command ScheduleEvent{
          if "all required info fields are present" then {
            "set a scheduled Akka call for emitting StartEvent at DraftEventState.info.expectedStart"
            send event EventScheduled to outlet EventEventsSource.Events
            morph entity Event to state ScheduledEvent with record ScheduledEventState
          }
        }
        on command EditEventInfo{
          set field DraftEventState.info to "EventContext.newEditableInfoFromFieldsPresentInEditable"
          set field DraftEventState.meta to "EventMetaInfo"
          send event EventRescheduled
            to outlet EventEventsSource.Events
        }
        on command CancelEvent{
          if "all required info fields are present" then {
            "cancel associated scheduled call to emit StartEvent"
            send event EventCancelled to outlet EventEventsSource.Events
            morph entity Event to state ScheduledEvent with record ScheduledEventState
          }
        }
        on command RescheduleEvent {
          if "start is validated to be before end in command" then {
            "adjust associated scheduled call to emit StartEvent"
            set field DraftEventState.info to "EditableEventInfo"
            set field DraftEventState.meta to "EventMetaInfo"
            send event EventRescheduled to outlet EventEventsSource.Events
          }
        }
        on command DelayEvent{
          if "all required info fields are present" then {
            "adjust associated scheduled call to emit StartEvent"
            send event EventDelayed to outlet EventEventsSource.Events
            morph entity Event to state ScheduledEvent with record ScheduledEventState
          }
        }
        on command StartEvent{
          error "Cannot start an event unless is state Scheduled or Delayed"
        }
        on command EndEvent{
          error "Cannot end an event that has not started."
        }
        // TODO: write AddLiveUpdate on clause
        on command AddLiveUpdate{
          ???
        }
      }
    }

    record ScheduledEventState is {
      id: EventId,
      info: EventInfo,
      meta:  EventMetaInfo
      //reservation: ReservationId?
    }
    state ScheduledEvent of Event.ScheduledEventState is {
        handler DefaultScheduledEventHandler {
          on other {
            "pick the correct handler based on meta.currentSate and become it"
          }
        }
        handler ScheduledEventHandler {
            on command ScheduleEvent{
              error "Event is already scheduled. Please RescheduleEvent to change event information."
            }
            //on command AddReservationToEvent {
            //    then "set reservation to AddReservationToEvent.reservation"
            //}
            on command EditEventInfo {
              set field ScheduledEventState.info to "EventContext.newInfoFromFieldsPresentInEditable"
              set field ScheduledEventState.meta to "EventMetaInfo"
              send event EventInfoEdited to outlet EventEventsSource.Events
            }
            on command CancelEvent {
              "cancel associated scheduled call to emit StartEvent"
              send event EventCancelled to outlet EventEventsSource.Events
              become entity Event to handler CancelledEventHandler
            }
            on command DelayEvent {
              "adjust associated scheduled Akka call to emit StartEvent"
              send event EventDelayed to outlet EventEventsSource.Events
              become entity Event to handler DelayedEventHandler
            }
            on command StartEvent{
              "create scheduled Akka call using ScheduledEventState.info.expectedEnd to emit EndEvent"
              send event EventStarted to outlet EventEventsSource.Events
              become entity Event to handler InProgressEventHandler
          } briefly "to be invoked by Akka scheduler upon ScheduleEvent reception"
          on command RescheduleEvent {
            if "start is validated to be before end in command" then {
              "adjust associated scheduled call to emit StartEvent"
              set field ScheduledEventState.info to "EventInfo"
              set field ScheduledEventState.meta to "EventMetaInfo"
              send event EventRescheduled to outlet EventEventsSource.Events
            }
          }
          on command EndEvent{
            error "End has not started. Cannot end an event that has not started."
          }
          // TODO: implement AddLiveUpdate
          on command AddLiveUpdate {
            ???
          }
        }
        handler InProgressEventHandler is {
            on command ScheduleEvent{
               error "Event is already in progress, cannot be scheduled"
            }
            //on command AddReservationToEvent{
            //    then error "Event is already in progress, cannot accept new reservation"
            //}
            on command EditEventInfo{
              error "Event is already in progress, info cannot be modified"
            }
            on command CancelEvent{
              error "Event is already in progress, cannot be cancelled"
            }
            on command RescheduleEvent{
              error "Event is already in progress, must be delayed to be rescheduled"
            }
            on command DelayEvent{
              "adjust associated scheduled Akka call to emit StartEvent"
              send event EventDelayed to outlet EventEventsSource.Events
              become entity Event to handler DelayedEventHandler
            }
            on command StartEvent {
              error "Event is already started. Cannot start an event that is already in progress"
            }
            on command EndEvent {
              send event EventEnded to outlet EventEventsSource.Events
              become entity Event to handler PastEventHandler
            }
            // TODO: specify AddLiveUpdate on clause
            on command AddLiveUpdate {
              ???
            }
        }
        handler DelayedEventHandler is {
            on command ScheduleEvent{
              error "Cannot schedule a delayed event, please reschedule"
            }
            //on command AddReservationToEvent{
            //    then error "Event cannot accept new reservation in delayed state - please try exte4nding the reservation"
            //}
            on command EditEventInfo{
               set field ScheduledEventState.info to "EventContext.newInfoFromFieldsPresentInEditable"
               set field ScheduledEventState.meta to "EventMetaInfo"
               send event EventInfoEdited to outlet EventEventsSource.Events
            }
            on command CancelEvent{
              "cancel associated scheduled call to emit StartEvent"
              send event EventCancelled to outlet EventEventsSource.Events
              become entity Event to handler CancelledEventHandler
            }
            on command RescheduleEvent{
              if "start is validated to be before end in command" then {
                "adjust associated scheduled call to emit StartEvent"
                set field ScheduledEventState.info to "EventInfo"
                set field ScheduledEventState.meta to "EventMetaInfo"
                send event EventRescheduled to outlet EventEventsSource.Events
              }
            }
            on command DelayEvent{
              error "Cannot delay a delayed event again, must be rescheduled"
            }
            on command StartEvent{
              "create scheduled Akka call using ScheduledEventState.info.expectedEnd to emit EndEvent"
              send event EventStarted to outlet EventEventsSource.Events
              become entity Event to handler InProgressEventHandler
            } briefly "to be invoked by Akka scheduler upon ScheduleEvent reception"
            on command EndEvent{
              error "Only events that are InProgress may be ended. If you wish to end this event it must be started first. If you wish to cancel the event, please use the CancelEvent Command."
            }
            // TODO: IMplement AddLiveUpdate in on clause
            on command AddLiveUpdate{
              ???
            }
        }
        handler CancelledEventHandler is {
            on command RescheduleEvent{
              if "start is validated to be before end in command" then {
                "adjust associated scheduled call to emit StartEvent"
                set field ScheduledEventState.info to "EventInfo"
                set field ScheduledEventState.meta to "EventMetaInfo"
                send event EventRescheduled to outlet EventEventsSource.Events
              }
            }
            on other {
              error "Event is delayed, the only available commands is RescheduleEvent"
            }
        }
        handler PastEventHandler is {
            on other {
              error "Event is past, no commands available"
            }
        }
    }
    //also consider postponed, delayed
  }

  // entity Game is {
  //     state PendingGame is {???} handler PendingGameHandler is {???}
  //     state InProgressEvent is {???} handler InProgressGameHandler is {???}
  //     state PastEvent is {???} handler PastGameHandler is {???}
  //     state CancelledEvent is {???} handler CancelledGameHandler is {???}
  //     state PostponedGame is {???} handler PostponedGameHandler is {???}
  //     state DelayedGame is {???} handler DelayedGameHandler is {???}
  // }
}
