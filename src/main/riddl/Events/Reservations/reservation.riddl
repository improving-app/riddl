type ReservationId is Id (ImprovingApp.Events.ReservationContext.Reservation)
  briefly "Unique identifier for Reservation Entity"

context ReservationContext is {
    include "reservationTypeDefinitions"
    include "reservationMessages"

    type PublicReservationEvent is one of {
      // TODO: List the names of the public reservation events here
    }

    outlet Events is type PublicReservationEvent

    entity Reservation is {
        options (event-sourced, available)

		    handler ReservationHandler is {
		        on command EstablishReservation {
              morph entity Reservation to state Draft with record DraftState
              "Copy fields from the command into Draft fields"
              "adjust meta fields to reflect the change set"
              send event ReservationEstablished to outlet ReservationContext.Events
		        }
		        on other {
		          error "Only EstablishReservation command is allowed in the default state"
		        }
		    }

        record DraftState {
            reservationInfo: ReservationContext.Info,
            attendees: MemberId*,
            reservationMeta: ReservationContext.MetaInfo
        }
		    state Draft of Reservation.DraftState is {
		        handler DraftReservation is {
		            on command EstablishReservation {
		              error "Reservation already established"
		            }
		            on command EditReservationInfo {
		              set field Draft.info to "EditReservationInfo.info"
		              send event ReservationInfoUpdated to outlet ReservationContext.Events
		            }
		            on command UpdateReservationStatus {
                  "morph entity Reservation to state provided in UpdateReservationStatus"
                  "set MetaInfo to capture change data"
                  "yield event ReservationStatusUpdated"
                }
		        }
		    }

        record OnHoldState {
            reservationInfo: ReservationContext.Info,
            reservationMeta: ReservationContext.MetaInfo
        }
		    state OnHold of Reservation.OnHoldState is {
		        handler OnHoldReservation is {
		            on command EstablishReservation {
		              error "Reservation already established"
		            }
		            on command EditReservationInfo {
		              "set OnHold info fields to EditReservationInfo.info"
		              "yield event ReservationInfoUpdated"
		            }
		            on command UpdateReservationStatus {
                  "morph Reservation to the state provided in UpdateReservationStatus"
                  "set MetaInfo to capture change data"
                  "yield event ReservationStatusUpdated"
                }
		        }
		    }

        record ReservedState {
            reservationInfo: ReservationContext.Info,
            reservationMeta: ReservationContext.MetaInfo
        }
		    state Reserved of Reservation.ReservedState is {
		        handler ReservedReservation is {
		            on command EstablishReservation {
		              error "Reservation already established"
		            }
		            on command EditReservationInfo {
		              error "Reservation is in Reserved state, editing info not allows"
		            }
		            on command UpdateReservationStatus {
                  "morph Reservation to the state provided in UpdateReservationStatus"
                  "set MetaInfo to capture change data"
                  "yield event ReservationStatusUpdated"			            }
		        }
		    }

        record PastState {
            reservationInfo: ReservationContext.Info,
            reservationMeta: ReservationContext.MetaInfo
        }
		    state Past of Reservation.PastState is {
		        handler PastReservation is {
		            on other {
		              error "No modification commands allowed in Past state"
		            }
		        }
		    }

        record CancelledState is {
            reservationInfo: ReservationContext.Info,
            reservationMeta: ReservationContext.MetaInfo
        }
		    state Cancelled of Reservation.CancelledState is {
		        handler PastReservation is {
		            on other {
		              error "No modification commands allowed in Cancelled state"
		            }
		        }
		    }
		}
}
