context OrderContext is {
  type OrderId is Id(OrderContext.Order)
  type LineItem is {
    product: SKU,
    quantity: Number,
    unitPrice: Number
      described as {
      |This field is calculated and therefore should never be set
      |and instead works more like a function.
    },
    lineTotal: Number
  }

  type OrderInfo is {
    order_id: OrderId,
    lineItems: LineItem+,
    specialInstructions: String?,
    orderTotal: Number
      described as {
      |This field is calculated and therefore should never be set
      |and instead works more like a function.
    }
  }
  type OrderMetaInfo is {
    order_id: OrderId,
    memberId: MemberId,
    storeId: StoreId,
    createdOn: Date,
    lastModifiedBy: MemberId,
    lastModifiedOn: Date
  }
  type OrderInfoUpdate is {
    lineItems: LineItem*,
    specialInstructions: String?
  }
  command CreateOrder {orderId: OrderId, storeId: StoreId, info: OrderInfo, creatingMember: MemberId}
  event OrderCreated {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command SetToPendingOrder {orderId: OrderId, updatingMember: MemberId}
  event PendingOrderSet {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command SetToInProcessOrder {orderId: OrderId, updatingMember: MemberId}
  event InProcessOrderSet {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command SetToReadyOrder {orderId: OrderId, updatingMember: MemberId}
  event ReadyOrderSet {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command DeliverOrder {orderId: OrderId, updatingMember: MemberId}
  event OrderDelivered {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command UpdateOrderInfo {orderId: OrderId, update: OrderInfoUpdate, updatingMember: MemberId}
  event OrderInfoUpdated {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command CancelOrder {orderId: OrderId, cancellingMember: MemberId}
  event OrderCancelled {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  query GetOrderInfo {orderId: OrderId, requestingMember: MemberId}
  result OrderInfoResult {orderId: OrderId, info: OrderMetaInfo, meta: OrderMetaInfo}
  event LineItemOrdered {orderId: OrderId, productId: SKU, forMemberId: MemberId}
  event LineItemCancelled {orderId: OrderId, productId: SKU, forMemberId: MemberId}

  entity Order is {
    options (event-sourced)

    handler DefaultOrderHandler is {
      on command CreateOrder {
        then "morph Order into Draft state"
        and "copy fields from CreateOrder command into the Draft Order"
        and "adjust meta fields to reflect the change set"
        and "yield OrderCreated event"
      }
      on other {then error "Only CreateOrder is allowed in the default state."}
    }

    state Draft is {
      fields {
        info: OrderInfo,
        meta: OrderMetaInfo
      }
      handler DraftOrderHandler is {
        on command CreateOrder {then error "Order has already been created."}
        on command UpdateOrderInfo {
          then "copy fields from the UpdateOrderInfo command into the Draft Order"
          and "adjust meta fields to reflect the change set"
          and "yield OrderInfoUpdated event"
        }
        on command SetToPendingOrder {
          then "morph order to Pending state"
          and "adjust meta fields to reflect change set"
          and "yield PendingOrderSet event"
        }
        on command SetToInProcessOrder {
          then error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          then error "Draft orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          then error "Draft orders may not transition to the Delivered state"
        }
        on command CancelOrder {
          then "morph order to Cancelled state"
          and "adjust meta fields to reflect change set"
          and "yield OrderCancelled event"
        }
        on query GetOrderInfo {then "yield OrderInfoResult message"}
      }
    }
    state Pending is {
      fields {
        info: OrderInfo,
        meta: OrderMetaInfo
      }
      handler PendingOrderHandler is {
        on command CreateOrder {then error "Order has already been created."}
        on command UpdateOrderInfo {
          then "copy fields from the UpdateOrderInfo command into the Draft Order"
          and "adjust meta fields to reflect the change set"
          and "yield OrderInfoUpdated event"
        }
        on command SetToPendingOrder {
          then error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          then "morph order to InProcess state"
          and "adjust meta fields to reflect change set"
          and "yield InProcessOrderSet event"
        }
        on command SetToReadyOrder {
          then error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          then error "Pending orders may not transition to the Delivered state"
        }
        on command CancelOrder {
          then "morph order to Cancelled state"
          and "adjust meta fields to reflect change set"
          and "yield OrderCancelled event"
        }
        on query GetOrderInfo {then "yield OrderInfoResult message"}
      }
    }
    state InProcess is {
      fields {
        info: OrderInfo,
        meta: OrderMetaInfo
      }
      handler InProcessOrderHandler is {
        on command CreateOrder {then error "Order has already been created."}
        on command UpdateOrderInfo {then error "InProcess Orders may not be modified."}
        on command SetToPendingOrder {
          then error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          then error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          then "morph order to Ready state"
          and "adjust meta fields to reflect change set"
          and "yield ReadyOrderSet event"
        }
        on command DeliverOrder {
          then error "Pending orders may not transition to the Delivered state"
        }
        on command CancelOrder {then error "InProcess Orders may not be cancelled."}
        on query GetOrderInfo {then "yield OrderInfoResult message"}
      }
    }
    state Ready is {
      fields {
        info: OrderInfo,
        meta: OrderMetaInfo
      }
      handler ReadyOrderHandler is {
        on command CreateOrder {then error "Order has already been created."}
        on command UpdateOrderInfo {then error "Ready Orders may not be modified."}
        on command SetToPendingOrder {
          then error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          then error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          then error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          then "morph order to Delivered state"
          and "adjust meta fields to reflect change set"
          and "yield OrderDelivered event"
        }
        on command CancelOrder {then error "Ready Orders may not be cancelled."}
        on query GetOrderInfo {then "yield OrderInfoResult message"}
      }
    }
    state Delivered is {
      fields {
        info: OrderInfo,
        meta: OrderMetaInfo
      }
      handler DeliveredOrderHandler is {
        on command CreateOrder {then error "Order has already been created."}
        on command UpdateOrderInfo {then error "Delivered Orders may not be modified."}
        on command SetToPendingOrder {
          then error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          then error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          then error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          then "morph order to Delivered state"
          and "adjust meta fields to reflect change set"
          and "yield OrderDelivered event"
        }
        on command CancelOrder {then error "Delivered Orders may not be cancelled."}
        on query GetOrderInfo {then "yield OrderInfoResult message"}
      }
    }
    state Cancelled is {
      fields {
        info: OrderInfo,
        meta: OrderMetaInfo
      }
      handler CancelledOrderHandler is {
        on command CreateOrder {then error "Order has already been created."}
        on command UpdateOrderInfo {then error "Cancelled Orders may not be modified."}
        on command SetToPendingOrder {
          then error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          then error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          then error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          then error "Pending orders may not transition to the Delivered state"
        }
        on command CancelOrder {then error "Delivered Orders may not be cancelled."}
        on query GetOrderInfo {then "yield result OrderInfoResult"}
      }
    }
  }
}
