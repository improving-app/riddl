context OrderContext is {
  type OrderId is Id(OrderContext.Order)
  type LineItem is {
    product: SKU,
    quantity: Number,
    unitPrice: Number
      described as {
      |This field is calculated and therefore should never be set
      |and instead works more like a function.
    },
    lineTotal: Number
  }

  type OrderInfo is {
    order_id: OrderId,
    lineItems: LineItem+,
    specialInstructions: String?,
    orderTotal: Number
      described as {
      |This field is calculated and therefore should never be set
      |and instead works more like a function.
    }
  }
  type OrderMetaInfo is {
    order_id: OrderId,
    memberId: MemberId,
    storeId: ImprovingApp.StoreContext.StoreId,
    createdOn: Date,
    lastModifiedBy: MemberId,
    lastModifiedOn: Date
  }
  type OrderInfoUpdate is {
    lineItems: LineItem*,
    specialInstructions: String?
  }
  command CreateOrder {orderId: OrderId, storeId: ImprovingApp.StoreContext.StoreId, info: OrderInfo, creatingMember: MemberId}
  event OrderCreated {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command SetToPendingOrder {orderId: OrderId, updatingMember: MemberId}
  event PendingOrderSet {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command SetToInProcessOrder {orderId: OrderId, updatingMember: MemberId}
  event InProcessOrderSet {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command SetToReadyOrder {orderId: OrderId, updatingMember: MemberId}
  event ReadyOrderSet {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command DeliverOrder {orderId: OrderId, updatingMember: MemberId}
  event OrderDelivered {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command UpdateOrderInfo {orderId: OrderId, update: OrderInfoUpdate, updatingMember: MemberId}
  event OrderInfoUpdated {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  command CancelOrder {orderId: OrderId, cancellingMember: MemberId}
  event OrderCancelled {orderId: OrderId, info: OrderInfo, meta: OrderMetaInfo}
  query GetOrderInfo {orderId: OrderId, requestingMember: MemberId}
  result OrderInfoResult {orderId: OrderId, info: OrderMetaInfo, meta: OrderMetaInfo}
  event LineItemOrdered {orderId: OrderId, productId: SKU, forMemberId: MemberId}
  event LineItemCancelled {orderId: OrderId, productId: SKU, forMemberId: MemberId}

  entity Order is {
    option event-sourced

    handler DefaultOrderHandler is {
      on command CreateOrder {
        "morph Order into Draft state"
        "copy fields from CreateOrder command into the Draft Order"
        "adjust meta fields to reflect the change set"
        "yield OrderCreated event"
      }
      on other {
        error "Only CreateOrder is allowed in the default state."
      }
    }

    record DraftState is {
      info: OrderInfo,
      meta: OrderMetaInfo
    }
    state Draft of Order.DraftState is {
      handler DraftOrderHandler is {
        on command CreateOrder {
          error "Order has already been created."
        }
        on command UpdateOrderInfo {
          "copy fields from the UpdateOrderInfo command into the Draft Order"
          "adjust meta fields to reflect the change set"
          "yield OrderInfoUpdated event"
        }
        on command SetToPendingOrder {
          "morph order to Pending state"
          "adjust meta fields to reflect change set"
          "yield PendingOrderSet event"
        }
        on command SetToInProcessOrder {
          error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          error "Draft orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          error "Draft orders may not transition to the Delivered state"
        }
        on command CancelOrder {
          "morph order to Cancelled state"
          "adjust meta fields to reflect change set"
          "yield OrderCancelled event"
        }
        on query GetOrderInfo {
          "yield OrderInfoResult message"
        }
      }
    }

    record PendingState is {
      info: OrderInfo,
      meta: OrderMetaInfo
    }
    state Pending of Order.PendingState is {
      handler PendingOrderHandler is {
        on command CreateOrder {
          error "Order has already been created."
        }
        on command UpdateOrderInfo {
          "copy fields from the UpdateOrderInfo command into the Draft Order"
          "adjust meta fields to reflect the change set"
          "yield OrderInfoUpdated event"
        }
        on command SetToPendingOrder {
          error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          "morph order to InProcess state"
          "adjust meta fields to reflect change set"
          "yield InProcessOrderSet event"
        }
        on command SetToReadyOrder {
          error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          error "Pending orders may not transition to the Delivered state"
        }
        on command CancelOrder {
          "morph order to Cancelled state"
          "adjust meta fields to reflect change set"
          "yield OrderCancelled event"
        }
        on query GetOrderInfo {
          "yield OrderInfoResult message"
        }
      }
    }

    record InProcessState is {
      info: OrderInfo,
      meta: OrderMetaInfo
    }

    state InProcess of Order.InProcessState is {
      handler InProcessOrderHandler is {
        on command CreateOrder {
          error "Order has already been created."
        }
        on command UpdateOrderInfo {
          error "InProcess Orders may not be modified."
        }
        on command SetToPendingOrder {
          error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          "morph order to Ready state"
          "adjust meta fields to reflect change set"
          "yield ReadyOrderSet event"
        }
        on command DeliverOrder {
          error "Pending orders may not transition to the Delivered state"
        }
        on command CancelOrder {
          error "InProcess Orders may not be cancelled."
        }
        on query GetOrderInfo {
          "yield OrderInfoResult message"
        }
      }
    }

    record ReadyState is {
      info: OrderInfo,
      meta: OrderMetaInfo
    }
    state Ready of Order.ReadyState is {
      handler ReadyOrderHandler is {
        on command CreateOrder {
          error "Order has already been created."
        }
        on command UpdateOrderInfo {
          error "Ready Orders may not be modified."
        }
        on command SetToPendingOrder {
          error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          "morph order to Delivered state"
          "adjust meta fields to reflect change set"
          "yield OrderDelivered event"
        }
        on command CancelOrder {
          error "Ready Orders may not be cancelled."
        }
        on query GetOrderInfo {
          "yield OrderInfoResult message"
        }
      }
    }

    record DeliveredState is {
      info: OrderInfo,
      meta: OrderMetaInfo
    }
    state Delivered of Order.DeliveredState is {
      handler DeliveredOrderHandler is {
        on command CreateOrder {
          error "Order has already been created."
        }
        on command UpdateOrderInfo {
          error "Delivered Orders may not be modified."
        }
        on command SetToPendingOrder {
          error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          morph entity Order to state Order.Delivered with
            record Order.DeliveredState
          "adjust meta fields to reflect change set"
          "yield OrderDelivered event"
        }
        on command CancelOrder {
          error "Delivered Orders may not be cancelled."
        }
        on query GetOrderInfo {
          "yield OrderInfoResult message"
        }
      }
    }

    record CancelledState is {
      info: OrderInfo,
      meta: OrderMetaInfo
    }
    state Cancelled of Order.CancelledState is {
      handler CancelledOrderHandler is {
        on command CreateOrder {
          error "Order has already been created."
        }
        on command UpdateOrderInfo {
          error "Cancelled Orders may not be modified."
        }
        on command SetToPendingOrder {
          error "Pending orders may not transition to the Pending state"
        }
        on command SetToInProcessOrder {
          error "Draft orders may not transition to the InProcess state"
        }
        on command SetToReadyOrder {
          error "Pending orders may not transition to the Ready state"
        }
        on command DeliverOrder {
          error "Pending orders may not transition to the Delivered state"
        }
        on command CancelOrder {
          error "Delivered Orders may not be cancelled."
        }
        on query GetOrderInfo {
          "yield result OrderInfoResult"
        }
      }
    }
  }
}
