query FindMembersAtEventsOnDayForOrg is {org: OrganizationId, startDay: DateTime, endDay: DateTime, queryingMember: MemberId}
result  is {}
result NoEventsOnDayForOrg is {org: OrganizationId}
result MembersAtEventsOnDay is {members: MemberId*}

context OrganizationsMembersEventsProjections is  {
  projection OrganizationsMembersEventsView is {
     fields {
        orgId: OrganizationId,
        event: EventId,
        member: MemberId,
        expectedStart: TimeStamp,
        expectedEnd: TimeStamp,
        isOrgPrivate: Boolean,
        isEventPrivate: Boolean
    }
    handler OrganizationsMembersEventsViewHandler is {
        on event OrganizationEstablished {
            then "find or create rows with orgId set to OrganizationEstablished.info.orgId"
            and "set rows' isOrgPrivate to true if OrganizationEstablished.info.isPrivate is true"
        }
        on event OrganizationInfoUpdated {
            then "find rows with organizationId set to OrganizationInfoUpdated.orgId"
            and "set rows' isOrgPrivate to true if OrganizationInfoUpdated.info.isPrivate is true"
        }
        on event MembersAddedToOrganization {
            then "find or create rows with orgId set to MembersAddedToOrganization.orgId and memberIds set to MembersAddedToOrganization.newMembers"
        }
        on event MembersRemovedFromOrganization {
            then "remove rows with orgId set to MembersRemovedFromOrganization.orgId and memberIds set to MembersRemovedFromOrganization.newMembers"
        }
        on event EventScheduled {
            then "find or create rows with orgId set to EventScheduled.info.sponsoringOrg and memberId set to EventScheduled.meta.schedulingMember"
            and "set rows' event to EventScheduled.eventId"
            and "set rows' expectedStart to EventScheduled.info.range.expectedStart"
            and "set rows' expectedEnd to EventScheduled.info.range.expectedEnd"
            and "set rows' isEventPrivate to true if EventScheduled.info.isPrivate is true"
        }
        on event EventRescheduled {
            then "find rows with eventId set to EventRescheduled.eventId, orgId set to EventRescheduled.info.sponsoringOrg and memberId set to EventRescheduled.meta.schedulingMember"
            and "set rows' expectedStart to EventScheduled.info.range.expectedStart"
            and "set rows' expectedEnd to EventScheduled.info.range.expectedEnd"
            and "set rows' isEventPrivate to true if EventScheduled.info.isPrivate is true"
        }
        on query FindMembersAtEventsOnDayForOrg {
            then "filter by FindMembersAtEventsOnDayForOrg.orgId equals orgId & isOrgPrivate equals true - return QueryNotAllowed if no row exists containing FindMembersAtEventsOnDayForOrg.queryingMember as member"
            and "in separate operation, filter by FindMembersAtEventsOnDayForOrg.org equals orgId & filter by whether expectedStart occurs on FindMembersAtEventsOnDayForOrg.startDay & expectedEnd occurs on FindMembersAtEventsOnDayForOrg.endDay - return NoEventsOnDayForOrg if no row exists containing an event"
            and "return MembersAtEventsOnDay containing all members remaining in previous operation"
        }
    }
  }
}