context MemberGateway is {
  option gateway

  type MemberType is any of {Student, FacultyStaff, Vendor, Sponsor, General, Alumni, StudentsParent, Fan}
  type MemberMap is mapping from MemberContext.MemberId to MemberInfo
  type NotificationPreference is any of {email, sms}
  type MemberState is any of {active, inactive, suspended, terminated}
  type MemberInfo is {
      handle: String,
      avatar: URL with {
        briefly "thumbnail image of the user."
        described by {
          "Need to screen to ensure community guidelines compliance. i.e. no porn or offensive content."
        }
      },
      firstName: String,
      lastName: String,
      mobileNumber: MobileNumber?,
      emailAddress: EmailAddress?,
      notificationPreference: ImprovingApp.MemberContext.NotificationPreference,
      notificationOptIn: Boolean with { briefly "true indicates they allow notifications" },
      organizations: OrganizationId* with { briefly "Members must belong to at least one Organization?" },
      relatedMembers: String with {
        briefly "Primary use case is parent/student."
        described by "I am sure there are others. Might be a betterway to document such a relationship."
      }
      memberType: MemberType+
  }
  type MemberMetaInfo is {
      createdOn: Date,
      createdBy: MemberContext.MemberId,
      lastModifiedOn: Date,
      lastModifiedBy: MemberContext.MemberId,
      memberState: MemberState
  }

  type GetMemberInfo is query {memberId: MemberContext.MemberId}
  type MemberData is result {memberId: MemberContext.MemberId, memberInfo: MemberInfo, memberMeta: MemberMetaInfo}
  type GetMemberForHandle is query {handle: String}
  type MemberForHandle is result {memberId: MemberContext.MemberId?}
  type RegisterMemberList is command {
    memberList: ImprovingApp.MemberContext.MemberMap+,
    registeringMember: MemberContext.MemberId
  } with {
    briefly "RegisterMemberList creates multiple members with a single call."
    described as {
      |The limitation is you can only define a single MemberType in each call,
      |and all new Members must be assigned to an Organization (typically a BaseOrg).
    }
  }
  event MemberListRegistered is {memberData: ImprovingApp.MemberContext.MemberData*}
  command  RegisterMember is {
    memberToAdd: ImprovingApp.MemberContext.MemberMap,
    registeringMember: MemberContext.MemberId?
  } with {
   briefly "RegisterMember creates a single new member."
    described as {
      |As this could be a self-service request the OrganizationType is optional.
      |Also registeringMember is optional - if you are registering yourself then
      |you are the registering member for yourself - you just don't exist yet
    }
  }
  event MemberRegistered is {
    memberId: MemberContext.MemberId,
    memberInfo: MemberInfo,
    memberMeta: MemberMetaInfo
  } with {
   briefly "Event issued after either RegisterMember or RegisterMemberList is called."
   described as "In the case of RegisterMemberList one event per member in the list is published."
  }
  command UpdateMemberInfo is {
    memberMap: ImprovingApp.MemberContext.MemberMap,
    actingMember: MemberContext.MemberId
  } with {
    briefly "All member info will be overwritten as provided in this command."
    described as {
      |Best practice would be to retrieve current values first and modify attributes
      |that you desire to change and submit the full MemberInfo object back.
    }
  }
  type MemberInfoUpdated is event {memberId: MemberContext.MemberId, memberInfo: MemberInfo, memberMeta: MemberMetaInfo}
  type ActivateMember is command {memberId: MemberContext.MemberId, actingMember: MemberContext.MemberId}
  type MemberActivated is event {memberId: MemberContext.MemberId, memberMeta: MemberMetaInfo}
  type InactivateMember is command {memberId: MemberContext.MemberId, actingMember: MemberContext.MemberId}
  type MemberInactivated is event {memberId: MemberContext.MemberId, memberMeta: MemberMetaInfo}
  type SuspendMember is command {memberId: MemberContext.MemberId, actingMember: MemberContext.MemberId}
  type MemberSuspended is event {memberId: MemberContext.MemberId, memberMeta: MemberMetaInfo}
  type TerminateMember is command {memberId: MemberContext.MemberId, actingMember: MemberContext.MemberId}
  type MemberTerminated is event {memberId: MemberContext.MemberId, memberMeta: MemberMetaInfo}
}
