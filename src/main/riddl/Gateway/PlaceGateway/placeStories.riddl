epic CreateVenue is {
  user Member wants to "create a Venue" so that "I can manage my Venue in ImprovingApp"
  //"Create a new Venue"
  // case HappyPath is {
    //interaction is {
    //  arbitrary step from user Member "provide venue information" to user App
    //    briefly "initial invocation",
    //  arbitrary step from user App send command Venue.CreateVenue to user GatewayAPI
    //    briefly "send creation message",
    //  arbitrary step from user GatewayAPI "Create Venue" to entity ImprovingApp.VenueContext.Venues
    //    briefly "add new venue",
    //  arbitrary step from entity ImprovingApp.VenueContext.Venue "VenueCreated" to pipe ImprovingApp.VenueContext.VenueEvents
    //    briefly "venue added"
    //  arbitrary step from pipe ImprovingApp.VenueContext.VenueEvents "VenueEnrolled" to user App
    //}
    //example Success is {
    //  when Member provides Venue object to App
    //  then App sends CreateVenue message to GatewayAPI
    //  and GatewayAPI forwards message to VenueContext
    //  and Venue is created
    //  and VenueCreated message is returned from VenueContext to GatewayAPI
    //  and GatewayAPI forwards message to App
    //  and App displays success notification to Member
    //}
  }
} with {
  by author Alex
  briefly "A story about creating a venue in Improving.app"
  described as "This is the story of how a venue comes into existence"
}

//benefit is "So Members can create Locations for Venues in ImprovingApp"
epic CreateLocation is {
  user Member wants to "create a Venue" so that "I can manage my Locations in ImprovingApp"
  //"Create a new Location"
  // case HappyPath is {
    //interaction is {
    //  arbitrary step from user Member "Location information" to user App
    //    briefly "initial invocation",
    //  arbitrary step from user App send command Location.CreateLocation to user GatewayAPI
    //    briefly "send creation message",
    //  arbitrary step from user GatewayAPI "Create Location" to entity ImprovingApp.LocationContext.Locations
    //    briefly "add new location",
    //  arbitrary step from entity ImprovingApp.LocationContext.Location "LocationCreated" to pipe ImprovingApp.LocationContext.LocationEvents
    //    briefly "location added"
    //  arbitrary step from pipe ImprovingApp.LocationContext.LocationEvents "LocationCreated" to user App
    //}
    //example Success is {
    //  when Member provides Location object to App
    //  then App sends CreateLocation message to GatewayAPI
    //  and GatewayAPI forwards message to LocationContext
    //  and Location is created
    //  and LocationCreated message is returned from LocationContext to GatewayAPI
    //  and GatewayAPI forwards message to App
    //  and App displays success notification to Member
    //}
  }
} with {
  by author Alex
  briefly "A story about creating a location in Improving.app"
  described as "This is the story of how a location comes into existence"
}

// benefit is "So Members can allow other Members to make Reservations in their Locations in ImprovingApp"
// capability is "Make a Location Available for Reservation"
epic UpdateLocationStatus is {
  user Member wants to "update a Location's status" so that "I can manage my Location statuses in ImprovingApp"
  //"Update Location Status to Available"
  // case ToAvailableHappyPath is {
    //interaction is {
    //  arbitrary step from user Member "presses button to update Location status to Available" to user App
    //    briefly "initial invocation",
    //  arbitrary step from user App send command Location.UpdateLocationStatus to user GatewayAPI
    //    briefly "send update status message",
    //  arbitrary step from user GatewayAPI "Update Location Status" to entity ImprovingApp.LocationContext.Locations
    //    briefly "update location status",
    //  arbitrary step from entity ImprovingApp.LocationContext.Location "LocationStatusUpdated" to pipe ImprovingApp.LocationContext.LocationEvents
    //    briefly "location status updated"
    //  arbitrary step from pipe ImprovingApp.LocationContext.LocationEvents "LocationStatusUpdated" to user App
    //}
    //example Success is {
    //  when Member requests for UpdateLocationStatus to App with Available as its parameter
    //  then App sends UpdateLocationStatus message to GatewayAPI
    //  and GatewayAPI forwards message to LocationContext
    //  and Location is updated to Available status
    //  and LocationStatusUpdated message is returned from LocationContext to GatewayAPI
    //  and GatewayAPI forwards message to App
    //  and App displays success notification to Member
    //}
  }
} with {
  by author Alex
  briefly "A story about updating a location's status to Available in Improving.app"
  described as "This is the story of how a location becomes available"
}

// capability is "Search (parameterized) for a Location that is available for Reservation"
// benefit is "So Members can find Locations for making Reservations in ImprovingApp according to desired specifications"
epic SearchAvailableLocations is {
  user Member wants to "search for available Locations given specific parameters" so that "I can make a Reservation in an available Location in ImprovingApp"
  //"Search for available Locations according to time range parameters"
  //case TimeSearchHappyPath is {
    //interaction is {
    //  arbitrary step from user Member "searches for location availability with time based parameters" to user App
    //    briefly "initial invocation",
    //  arbitrary step from user App send command Location.SearchAvailableLocations to user GatewayAPI
    //    briefly "send search message",
    //  arbitrary step from user GatewayAPI "Search Available Locations" to entity ImprovingApp.LocationContext.Locations
    //    briefly "search for available locations according to provided parameters",
    //  arbitrary step from entity ImprovingApp.LocationContext.Location "LocationSearchResults" to pipe ImprovingApp.LocationContext.LocationEvents
    //    briefly "location search results"
    //  arbitrary step from pipe ImprovingApp.LocationContext.LocationEvents "LocationSearchResults" to user App
    //}
    //example Success is {
    //  when Member requests for SearchAvailableLocations to App with a time range or series of them as its parameter
    //  then App sends SearchAvailableLocations message to GatewayAPI
    //  and GatewayAPI forwards message to LocationContext
    //  and Locations are found that are available
    //  and LocationSearchResults message is returned from LocationContext to GatewayAPI
    //  and GatewayAPI forwards message to App
    //  and App displays success notification to Member
    //}
  }
  //"Search for available Locations according to capacity parameters"
  case CapacitySearchHappyPath is {
    //interaction is {
    //  arbitrary step from user Member "SearchAvailableLocations" to user App
    //    briefly "initial invocation",
    //  arbitrary step from user App send command Location.SearchAvailableLocations to user GatewayAPI
    //    briefly "send search message",
    //  arbitrary step from user GatewayAPI "searches for location availability with capacity based parameters" to entity ImprovingApp.LocationContext.Locations
    //    briefly "search for available locations according to provided parameters",
    //  arbitrary step from entity ImprovingApp.LocationContext.Location "LocationSearchResults" to pipe ImprovingApp.LocationContext.LocationEvents
    //    briefly "location search results"
    //  arbitrary step from pipe ImprovingApp.LocationContext.LocationEvents "LocationSearchResults" to user App
    //}
    //example Success is {
    //  when Member requests SearchAvailableLocations to App with a maxCapacity as its parameter
    //  then App sends SearchAvailableLocations message to GatewayAPI
    //  and GatewayAPI forwards message to LocationContext
    //  and Locations are found that are available
    //  and LocationSearchResults message is returned from LocationContext to GatewayAPI
    //  and GatewayAPI forwards message to App
    //  and App displays success notification to Member
    //}
  }
} with {
  by author Alex
  briefly "A story about searching for available locations in Improving.app"
  described as "This is the story of how available locations are found according to user parameters"
}
