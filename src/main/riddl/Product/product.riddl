context ProductContext is {
  type PublicProductEvent is one of {
      ProductCreated,
      ProductInfoUpdated,
      ProductDeleted,
      ProductActivated,
      ProductInactivated
  }

  source ProductEvents is {
      outlet Events is type PublicProductEvent
  } explained as "This is a source for Product Events"

  type ProductDetails is any of {TicketDetails}
  type ProductStatus is any of {Draft, Active, InActive, Deleted} briefly "Note: Delete is not the same as in Org, Tenant, etc because there is no PII. Here it is more like Terminate"
  type SKU is Id(Product)
  type TicketDetails is any of {ReservedTicket, RestrictedTicket, OpenTicket}

  type ReservedTicket is {
    section: String,
    row: String,
    seat: String,
    event: EventId
  }
  type RestrictedTicket is {
    section: String,
    event: EventId
  }
  type OpenTicket is {
    event: EventId
  }
  type ProductInfo is {
    name: String briefly "Required for non-Draft state",
    description: String briefly "Required for non-Draft state",
    productDetails: ProductDetails briefly "Required for non-Draft state",
    image: String*,
    price: Number briefly "Required for non-Draft state",
    cost: Number briefly "Required for non-Draft state",
    store: StoreId briefly "Required for non-Draft state"
  }
  type ProductInfoUpdate is {
    name: String?,
    description: String?,
    productDetails: ProductDetails?,
    image: String*,
    price: Number?,
    cost: Number?,
    store: StoreId?
  }
  type ProductMetaInfo is {
    createdBy: MemberId,
    createdOn: Date,
    lastModifiedBy: MemberId,
    lastModifiedOn: Date
  }
  command CreateProduct is {sku: SKU, info: ProductInfo, onBehalfOf: MemberId}
  event ProductCreated is {sku: SKU, info: ProductInfo, meta: ProductMetaInfo}
  command UpdateProductInfo is {sku: SKU, info: ProductInfoUpdate, onBehalfOf: MemberId}
  event ProductInfoUpdated is {sku: SKU, info: ProductInfo, meta: ProductMetaInfo}
  command DeleteProduct is {sku: SKU, onBehalfOf: MemberId}
  event ProductDeleted is {sku: SKU}
  command ActivateProduct is {sku: SKU, onBehalfOf: MemberId}
  event ProductActivated is {sku: SKU}
  command InactivateProduct is {sku: SKU, onBehalfOf: MemberId}
  event ProductInactivated is {sku: SKU}
  query GetProductInfo is {sku: SKU}
  result ProductInfoResult is {info: ProductInfo, meta: ProductMetaInfo}
  query GetTicketsForEvent is {event: EventId} //TODO: Move this query/result to a projector?
  result TicketsForEvent is {event: EventId, tickets: SKU*}

  entity Product is {
    options (event-sourced)
    handler ProductHandler is {
      on command CreateProduct {
        then "morph Product to Active state"
        and "copy fields from the command into Active fields"
        and "adjust meta fields to reflect the change set"
        and "yield ProductCreated event"
      }
      on other {then error "Only the CreateProduct command is allowed in the default state."}
    }

    record DraftState is {
      sku: SKU,
      info: ProductInfo,
      meta: ProductMetaInfo
    }
    state DraftProductState of Product.DraftState is {
      handler CreatedProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then "Copy fields that are provided from UpdateProductInfo.info into DefinedProductState.info fields"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInfoUpdated event with new info"
        }
        on command DeleteProduct{
          example Success {
            then set DraftProductState.meta to !ProductContext.ProductMetaInfo(
              createdOn = @DraftProductState.meta.createdOn,
              createdBy = @DraftProductState.meta.createdBy,
              lastUpdated = now(),
              lastUpdatedBy = @DeleteProduct.onBehalfOf,
              currentState = @ProductStates.Deleted
            )
            and send event ProductDeleted(
              sku = @DraftProductState.sku,
              info = @DraftProductState.info,
              meta = @DraftProductState.meta
            ) to outlet ProductEvents.Events
            and morph entity Product to state DeletedProduct with !DeletedProductState(
              sku = @DraftProductState.sku,
              name = @DraftProductState.info.name,
              lastMeta = @DraftProductState.meta
            )
          }
        }
        on command ActivateProduct{
          example Success {
            when "all required fields are present"
            then set DraftProductState.meta to !ProductContext.ProductMetaInfo(
              createdOn = @DraftProductState.meta.createdOn,
              createdBy = @DraftProductState.meta.createdBy,
              lastUpdated = now(),
              lastUpdatedBy = @ActivateProduct.onBehalfOf,
              currentState = @ProductStates.Active
            )
            and send event ProductActivated(
              sku = @DraftProductState.sku,
              info = @DraftProductState.info,
              meta = @DraftProductState.meta
            ) to outlet ProductEvents.Events
            and morph entity Product to state DefinedProduct with !DefinedProductState(
              info = !ProductInfo(
                  name = @DraftProductState.info.name,
                  description = @DraftProductState.info.description,
                  products = @DraftProductState.info.products,
                  event = @DraftProductState.info.event,
                  venue = @DraftProductState.info.venue,
                  location = @DraftProductState.info.location,
                  sponsoringOrg = @DraftProductState.info.sponsoringOrg
              ),
              meta = !ProductContext.MetaInfo(
                  createdOn = @DraftProductState.meta.createdOn,
                  createdBy = @DraftProductState.meta.createdBy,
                  lastUpdatedOn = now(),
                  lastUpdatedBy = @ActivateProduct.updatingMember,
                  currentState = @ProductStates.Active
              )
            )
          }
          example InsufficientRequiredFieldsFailure {
            when "not all required fields are filled in"
            then "return a list of non-filled in fields"
          }
        }
        on command InactivateProduct{
          then error "cannot inactivate a draft product"
        }
        on query GetProductInfo{
          then "yield ProductInfoResult message"
        }
      }
    }

    record DefinedProductState is {
      sku: SKU,
      info: ProductInfo,
      meta: ProductMetaInfo
    }
    state DefinedProduct of Product.DefinedProductState is {
      handler ActiveProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then "Copy fields that are provided from UpdateProductInfo.info into DefinedProductState.info fields"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInfoUpdated event with new info"
        }
        on command DeleteProduct{
          example Success {
            then set DefinedProductState.meta to !ProductContext.ProductMetaInfo(
              createdOn = @DefinedProductState.meta.createdOn,
              createdBy = @DefinedProductState.meta.createdBy,
              lastUpdated = now(),
              lastUpdatedBy = @DeleteProduct.onBehalfOf,
              currentState = @ProductStates.Deleted
            )
            and send event ProductDeleted(
              sku = @DefinedProductState.sku,
              info = @DefinedProductState.info,
              meta = @DefinedProductState.meta
            ) to outlet ProductEvents.Events
            and morph entity Product to state DeletedProduct with !DeletedProductState(
              sku = @DefinedProductState.sku,
              name = @DefinedProductState.info.name,
              lastMeta = @DefinedProductState.meta
            )
          }
        }
        on command ActivateProduct{
          then error "Product is already active"
        }
        on command InactivateProduct{
          example Success {
            then set DefinedProductState.meta to !ProductContext.ProductMetaInfo(
              createdOn = @DefinedProductState.meta.createdOn,
              createdBy = @DefinedProductState.meta.createdBy,
              lastUpdated = now(),
              lastUpdatedBy = @InactivateProduct.onBehalfOf,
              currentState = @ProductStates.Inactive
            )
            and send event ProductInactivated(
              sku = @DefinedProductState.sku,
              info = @DefinedProductState.info,
              meta = @DefinedProductState.meta
            ) to outlet ProductEvents.Events
            and become entity Product to handler InactiveProductHandler
          }
        }
        on query GetProductInfo{
          then "yield ProductInfoResult message"
        }
      }
      handler InactiveProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then "Copy fields that are provided from UpdateProductInfo.info into DefinedProductState.info fields"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInfoUpdated event with new info"
        }
        on command DeleteProduct{
          example Success {
            then set DefinedProductState.meta to !ProductContext.ProductMetaInfo(
              createdOn = @DefinedProductState.meta.createdOn,
              createdBy = @DefinedProductState.meta.createdBy,
              lastUpdated = now(),
              lastUpdatedBy = @DeleteProduct.onBehalfOf,
              currentState = @ProductStates.Deleted
            )
            and send event ProductDeleted(
              sku = @DefinedProductState.sku,
              info = @DefinedProductState.info,
              meta = @DefinedProductState.meta
            ) to outlet ProductEvents.Events
            and morph entity Product to state DeletedProduct with !DeletedProductState(
              sku = @DefinedProductState.sku,
              name = @DefinedProductState.info.name,
              lastMeta = @DefinedProductState.meta
            )
          }
        }
        on command ActivateProduct{
          example Success {
            then set DefinedProductState.meta to !ProductContext.ProductMetaInfo(
              createdOn = @DefinedProductState.meta.createdOn,
              createdBy = @DefinedProductState.meta.createdBy,
              lastUpdated = now(),
              lastUpdatedBy = @ActivateProduct.onBehalfOf,
              currentState = @ProductStates.Active
            )
            and send event ProductActivated(
              sku = @DefinedProductState.sku,
              info = @DefinedProductState.info,
              meta = @DefinedProductState.meta
            ) to outlet ProductEvents.Events
            and become entity Product to handler ActiveProductHandler
          }
        }
        on command InactivateProduct{
          then error "Product is already Inactive"
        }
        on query GetProductInfo{
          then "yield ProductInfoResult message"
        }
      }
    }

    record DeletedProductState is {
      sku: SKU,
      name: String
    }
    state DeletedProduct of Product.DeletedProductState is {
      handler DeletedProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then error "Cannot update a Deleted product"
        }
        on command DeleteProduct{
          then error "Product already deleted"
        }
        on command ActivateProduct{
          then error "Cannot activate a deleted product. Consider creating a new product instead."
        }
        on command InactivateProduct{
          then error "Cannot inactivate a Deleted product."
        }
        on query GetProductInfo{
          then "yield ProductInfoUpdate with only sku and name populated"
        }
      }
    }
  }
}

  //ProductDetails is select ReservedTicket | RestrictedTicket | OpenTicket | FoodItem | Beverage
  //Units is any of {Grams, Kilograms, Pounds, Ounces, Milliliters, Liters}
  //Condiments is any of {Catsup, Mustard, Mayonnaise, Fry Sauce, Relish, Onion, Pickle, Jalapeno}
  /*type FoodItem is {
    PrimaryUnitOfMeasure: Units,
    PrimarySize: Number,
    SecondaryUnitOfMeasure: Units,
    SecondarySize: Number,
    Ingredients: String,
    ServingSize: Number,
    ServingsPerPackage: Number,
    NutritionInfo: String,
    AllergyInfo: String,
    Condiments: Condiments*
    PreparationNotes: String
  }
  type Beverage is {
    sugarFree: Boolean,
    alcoholic: Boolean,
    unitOfMeasure: Units,
    size: Number,
    addIce: Boolean
  }*/
