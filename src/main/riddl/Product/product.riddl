context ProductContext is {
  type ProductDetails is any of {ReservedTicket, RestrictedTicket, OpenTicket}
  type ProductStatus is any of {Draft, Active, InActive, Deleted}
  type SKU is Id(Product)

  type ReservedTicket is {
    section: String,
    row: String,
    seat: String,
    event: EventId
  }
  type RestrictedTicket is {
    section: String,
    event: EventId
  }
  type OpenTicket is {
    event: EventId
  }
  type ProductInfo is {
    name: String,
    description: String,
    productDetails: ProductDetails,
    image: String*,
    price: Number,
    cost: Number,
    store: StoreId
  }
  type ProductInfoUpdate is {
    name: String?,
    description: String?,
    productDetails: ProductDetails?,
    image: String*,
    price: Number?,
    cost: Number?,
    store: StoreId?
  }
  type ProductMetaInfo is {
    createdBy: MemberId,
    createdOn: Date,
    lastModifiedBy: MemberId,
    lastModifiedOn: Date
  }
  command CreateProduct is {sku: SKU, info: ProductInfo, creatingMember: MemberId}
  event ProductCreated is {sku: SKU, info: ProductInfo, meta: ProductMetaInfo}
  command UpdateProductInfo is {sku: SKU, info: ProductInfoUpdate, updatingMember: MemberId}
  event ProductInfoUpdated is {sku: SKU, info: ProductInfo, meta: ProductMetaInfo}
  command DeleteProduct is {sku: SKU, deletingMember: MemberId}
  event ProductDeleted is {sku: SKU}
  command ActivateProduct is {sku: SKU, activatingMember: MemberId}
  event ProductActivated is {sku: SKU}
  command InactivateProduct is {sku: SKU, inactivatingMember: MemberId}
  event ProductInactivated is {sku: SKU}
  query GetProductInfo is {sku: SKU}
  result ProductInfoResult is {info: ProductInfo, meta: ProductMetaInfo}
  query GetTicketsForEvent is {event: EventId} //TODO: Move this query/result to a projection?
  result TicketsForEvent is {event: EventId, tickets: SKU*}

  entity Product is {
    options (event-sourced)
    handler ProductHandler is {
      on command CreateProduct {
        then "morph Product to Active state"
        and "copy fields from the command into Active fields"
        and "adjust meta fields to reflect the change set"
        and "yield ProductCreated event"
      }
      on other {then error "Only the CreateProduct command is allowed in the default state."}
    }

    record DraftState is {
      info: ProductInfo,
      meta: ProductMetaInfo
    }
    state Draft of ^DraftState is {
      handler ActiveProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then "Copy fields from UpdateProductInfo into Active product fields"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInfoUpdated event"
        }
        on command DeleteProduct{
          then "morph Product state to Deleted"
          and "copy Active Product name and sku to Deleted Product name and sku"
          and "adjust meta fields to reflect the change set"
          and "yield ProductDeleted event"
        }
        on command ActivateProduct{
          then error "Product is already active"
        }
        on command InactivateProduct{
          then "morph product state to Inactive"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInactivated event"
        }
        on query GetProductInfo{
          then "yield ProductInfoResult message"
        }
      }
    }

    record ActiveState is {
      info: ProductInfo,
      meta: ProductMetaInfo
    }
    state Active of ^ActiveState is {
      handler ActiveProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then "Copy fields from UpdateProductInfo into Active product fields"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInfoUpdated event"
        }
        on command DeleteProduct{
          then "morph Product state to Deleted"
          and "copy Active Product name and sku to Deleted Product name and sku"
          and "adjust meta fields to reflect the change set"
          and "yield ProductDeleted event"
        }
        on command ActivateProduct{
          then error "Product is already active"
        }
        on command InactivateProduct{
          then "morph product state to Inactive"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInactivated event"
        }
        on query GetProductInfo{
          then "yield ProductInfoResult message"
        }
      }
    }

    record InactiveState is {
      info: ProductInfo,
      meta: ProductMetaInfo
    }
    state Inactive of ^InactiveState is {
      handler InactiveProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then "Copy fields from UpdateProductInfo into Active product fields"
          and "adjust meta fields to reflect the change set"
          and "yield ProductInfoUpdated event"
        }
        on command DeleteProduct{
          then "morph Product state to Deleted"
          and "copy Active Product name and sku to Deleted Product name and sku"
          and "adjust meta fields to reflect the change set"
          and "yield ProductDeleted event"
        }
        on command ActivateProduct{
          then "morph product state to Active"
          and "adjust meta fields to reflect the change set"
          and "yield ProductActivated event"
        }
        on command InactivateProduct{
          then error "Product is already Inactive"
        }
        on query GetProductInfo{
          then "yield ProductInfoResult message"
        }
      }
    }

    record DeletedState is {
      sku: SKU,
      name: String
    }
    state Deleted of ^DeletedState is {
      handler DeletedProductHandler is {
        on command CreateProduct {
          then error "Product already created."
        }
        on command UpdateProductInfo{
          then error "Cannot update a deleted product"
        }
        on command DeleteProduct{
          then error "Product already deleted"
        }
        on command ActivateProduct{
          then error "Cannot activate a deleted product. Consider creating a new product instead."
        }
        on command InactivateProduct{
          then error "Cannot inactivate a deleted product."
        }
        on query GetProductInfo{
          then "yield ProductInfoUpdate with only sku and name populated"
        }
      }
    }
  }
}

  //ProductDetails is select ReservedTicket | RestrictedTicket | OpenTicket | FoodItem | Beverage
  //Units is any of {Grams, Kilograms, Pounds, Ounces, Milliliters, Liters}
  //Condiments is any of {Catsup, Mustard, Mayonnaise, Fry Sauce, Relish, Onion, Pickle, Jalapeno}
  /*type FoodItem is {
    PrimaryUnitOfMeasure: Units,
    PrimarySize: Number,
    SecondaryUnitOfMeasure: Units,
    SecondarySize: Number,
    Ingredients: String,
    ServingSize: Number,
    ServingsPerPackage: Number,
    NutritionInfo: String,
    AllergyInfo: String,
    Condiments: Condiments*
    PreparationNotes: String
  }
  type Beverage is {
    sugarFree: Boolean,
    alcoholic: Boolean,
    unitOfMeasure: Units,
    size: Number,
    addIce: Boolean
  }*/
