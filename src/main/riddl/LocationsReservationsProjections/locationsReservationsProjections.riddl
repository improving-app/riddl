query ScheduleEasyEvent is {maxAttendance: Integer, timeRange: TimeRange, info: EventContext.EventInfo, schedulingMember: MemberId}
result EasyEventNoAvailability is {eventInfo: EventInfo}
result EasyScheduledEvent is {eventInfo: EventInfo, locations: LocationId+}

query FindVacanciesForEvent is {maxAttendance: Integer, timeRange: TimeRange, info: EventContext.EventInfo}
type LocationWithReservationAndEventInfo is mapping from LocationId to {eventInfo: EventInfo, reservationInfo: ReservationContext.Info}
result VacanciesForEventResult is {info: LocationWithReservationAndEventInfo}

context LocationsReservationsProjections is  {
  projection LocationsReservationsView is {
     fields {
        venueId: VenueId,
        orgId: OrganizationId,
        locationId: LocationId,
        capacity: Integer,
        reservationId: ReservationId,
        reservationStart: TimeStamp,
        reservationEnd: TimeStamp,
        isPrivate: Boolean
    }
    handler LocationsEventsViewHandler is {
        on event VenueEstablished {
            then "find or create rows with venueId set to VenueEstablished.venueId and orgId set to VenueEstablished.info.orgId"
        }
        on event VenueInfoUpdated {
            then "find rows with venueId set to VenueInfoUpdated.venueId and orgId set to VenueInfoUpdated.info.orgId"
        }
        on event VenueLocationsAdded {
            then "find or create rows with venueId set to VenueLocationsAdded.venueId and locationIds set to VenueLocationsAdded.locationIds"
        }
        on event ReservationEstablished {
            then "find or create rows with reservationId set to ReservationEstablished.reservationId"
            and "set rows' reservationStart to ReservationEstablished.info.range.start"
            and "set rows' reservationEnd to ReservationEstablished.info.range.end"
        }
        on event ReservationInfoUpdated {
            then "find rows with reservationId set to ReservationInfoUpdated.reservationId"
            and "set rows' reservationStart to ReservationInfoUpdated.info.range.start"
            and "set rows' reservationEnd to ReservationInfoUpdated.info.range.end"
        }
        on event LocationEstablished {
            then "find or create rows with reservationId set to LocationEstablished.reservationIds"
            and "set rows' capacity to LocationEstablished.locationInfo.capacity"
            and "set rows' locationIds to LocationEstablished.locationIds"
        }
        on event LocationReservationsAdded {
            then "find or create rows with reservationId set to LocationReservationsAdded.reservationId"
            and "set rows' locationId to LocationReservationsAdded.locationId"
        }
        on event LocationInfoUpdated {
            then "find rows where locationId is LocationInfoUpdated.locationId"
            and "set rows' capacity to LocationInfoUpdated.info.capacity"
        }
        on query ScheduleEasyEvent {
            then "filter by ScheduleEasyEvent.info.forOrg equals orgId - return EasyEventNoAvailability if empty"
            and "find rows where ScheduleEasyEvent.maxAttendance < capacity - return EasyEventNoAvailability if empty"
            and "filter by ScheduleEasyEvent.timeRange.start & ScheduleEasyEvent.timeRange.end do not overlap reservationStart & reservationEnd"
            and "if empty, try 30mins earlier - if still empty, try 30 mins later - then return EasyEventNoAvailability if empty"
            and "return EasyScheduledEvent with a all row's locationId, ScheduleEasyEvent.eventInfo where expectedStart & expectedEnd are possibly adjusted from previous steps"
        }
    }
  }
}