application UserInterface is {
  command EstablishOrganization is {
    info: MemberContext.EditableInfo briefly "Details about an organization required for it to exist. See OrganizationContext.Organization.Info for details.",
    tenant: TenantId,
    parent: OrganizationContext.Parent?,
    members: MemberList,
    owners: OwnerList,
    contacts: ContactList,
    onBehalfOf: MemberContext.MemberId briefly "The Id of the Member who is issuing the command."
  } briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."

  result OrganizationEstablished is {
    organizationId: OrganizationId briefly "Unique identifier returned by EstablishOrganization command",
    info: OrganizationContext.Info,
    parent: OrganizationContext.Parent?,
    members: MemberList,
    owners: OwnerList,
    contacts: ContactList,
    meta: OrganizationContext.MetaInfo
  }
  command CreateOrganization { ??? } // FIXME: needs to be completed

  group Organization is {
    input EstablishOrganization acquires command UserInterface.EstablishOrganization

    output DisplayOrganization presents result UserInterface.OrganizationEstablished
  }

  handler OrgHandler is {
    on command OrganizationContext.EstablishOrganization  from user OrgOwner {
      tell command OrganizationContext.OrganizationEstablished to context OrganizationContext
    }
    on event OrganizationContext.OrganizationEstablished from context OrganizationContext {
      //tell resultOrganizationContext.OrganizationEstablished to
      //  projector Relationships.OrganizationViews
    }
  }

  command RegisterMember is {
    info: MemberContext.EditableInfo briefly "Details about a member required for it to exist. See MemberContext.Member.MemberInfo for details.",
    onBehalfOf: MemberContext.MemberId
  }

  result MemberRegistered is {
    memberId: MemberContext.MemberId briefly "Unique identifier returned by RegisterMember command",
    info: MemberContext.EditableInfo,
    meta: MemberMetaInfo
  }

  group Member is {
    input RegisterMember acquires command UserInterface.RegisterMember
    output DisplayMemberDetails presents result ImprovingApp.UserInterface.MemberRegistered
  }

  handler MemberHandler is {
    on command  ImprovingApp.GatewayAPI.MemberGateway.RegisterMember from user DemoMember {
      tell command UserInterface.RegisterMember to context ImprovingApp.MemberContext
    }
    on event  ImprovingApp.GatewayAPI.MemberGateway.MemberRegistered from context ImprovingApp.MemberContext {
      //tell result ImprovingApp.MemberContext.MemberRegistered to
      //  projector ImprovingApp.MemberContext.MemberViews
    }
  }

  command PurchaseProduct is {
    productSku: ProductContext.SKU
  }
  event ProductPurchased is {
    productSku: ProductContext.SKU,
    productInfo: ProductContext.ProductInfo,
    productMeta: ProductContext.ProductMetaInfo
  }
  result ProductsPurchased is {
    products: ProductContext.SKU*
  }

  group Product is {
    input PurchaseProduct acquires command UserInterface.PurchaseProduct
    output DisplayPurchases presents result ProductsPurchased
  }

  handler ProductHandler is {
    on command ImprovingApp.GatewayAPI.DemoScenarioGateway.PurchaseProduct from user ImprovingApp.GatewayAPI.Member {
      tell command  ImprovingApp.UserInterface.PurchaseProduct to context ProductContext
    }
    on event ImprovingApp.UserInterface.ProductPurchased from context ProductContext {
      //tell result ProductContext.ProductCreated to projector ProductContext.ProductViews
    }
  }
}

application CommandLine is {
  command StartScenario is {
    json: String
  }
  result ScenarioStarted is {
    json: String
  }

  group Scenario is {
    input StartScenario acquires command CommandLine.StartScenario
    output DisplayScenario presents result CommandLine.ScenarioStarted
  }

  handler CurlHandler is {
    on command ImprovingApp.CommandLine.StartScenario from user ImprovingApp.GatewayAPI.Member {
      tell command CommandLine.StartScenario to context GatewayAction
    }
    on result ImprovingApp.CommandLine.ScenarioStarted from context GatewayAction {
      "display in terminal"
    }
  }
}
