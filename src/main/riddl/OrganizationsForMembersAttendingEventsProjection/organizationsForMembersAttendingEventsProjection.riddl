query FindOrgsByMembersForEvents is {events: EventId+}
type MemberEventInfo is {eventId: EventId, eventName: String}
type MemberEvents is mapping from MemberId to {memberName: String, memberEventInfo: MemberEventInfo+}
type OrgMembersEvents is mapping from OrganizationId to {orgName: String, memberEvents: MemberEvents+}
result OrgsByMembersForEvents is {orgEventMembers: OrgMembersEvents+}

context OrganizationsForMembersAttendingEventsProjections is  {
  projector OrganizationsForMembersAttendingEventsView is {
     record OrganizationsForMembersAttendingEventsFields {
        event: EventId,     //event table, ticket-event correlation table
        eventName: String,  //event table
        ticketSku: SKU, // ticket-event & ticket-member correlation tables
        attendingMemberOrg: OrganizationId, //org table & org-member correlation table
        attendingMemberOrgName: String, //org table
        attendingMember: MemberId, //ticket-member, org-member correlation table & member table
        attendingMemberName: String //member table
    }
    handler OrganizationsForMembersAttendingEventsViewHandler is {
        on event OrganizationEstablished {
          "create row in org table with orgId set to OrganizationEstablished.info.orgId"
          "set row's attendingMemberOrgName to OrganizationEstablished.info.name"
        }
        on event OrganizationTerminated {
          "remove row from table"
        }
        on event MemberContext.MemberRegistered {
          "create rows in member table with attendingMember set to MemberRegistered.id"
          "set previous row's attendingMemberName to concatenated MemberRegistered.info.firstName and MemberRegistered.info.lastName"
          "create row in org-member table with attendingMemberOrgId set to MemberRegistered.info.organizationMembership.head"
          "set attendingMemberId to MemberRegistered.memberId"
        }
        //on event MembersAddedToOrganization {
        //    then "create rows in org-member table with attendingMemberOrg set to MembersAddedToOrganization.orgId and attendingMembers set to MembersAddedToOrganization.newMembers"
        //}
        //on event MembersRemovedFromOrganization {
        //    then "remove rows in org-member table with attendingMemberOrg set to MembersRemovedFromOrganization.orgId and attendingMembers set to MembersRemovedFromOrganization.newMembers"
        //}
        on event EventScheduled {
          "create row in event table with event id set to to EventScheduled.eventId"
          "set event_name to EventScheduled.info.eventName"
        }
        //on event EventCancelled {
        //    then "remove row in event table with event corresponding to EventCancelled.eventId"
        //}
        on event ProductCreated {
          "if product is ticket, create row in ticket-event table with sku as ticketSku & productDetails.eventId as event"
        }
        on event ProductActivated {
          "update row in ticket-event table with the Active status"
        }
        on event ProductInactivated {
          "update row in ticket-event table with the Inactive status"
        }
        on event ProductDeleted {
          "remove row in ticket-event table"
        }
        on event OrderCreated {
          "for each OrderCreated.orderInfo.lineItem that has a SKU in event-ticket table, create row in ticket-member table with OrderCreated.meta.memberId as attendingMember & sku as ticketSku"
        }
        on event LineItemOrdered {
          "create row in ticket-member table with ticketSku set to LineItemOrdered.productId"
          "set attendingMemberId to LineItemOrdered.forMemberId"
          "set orderId to LineItemOrdered.orderId"
        }
        on event LineItemCancelled {
          "remove row in ticket-member table"
        }
        on query FindOrgsByMembersForEvents {
          "left join event table filtered by FindOrgsByMembersForEvents.events to ticket-event table"
          "left join table found in previous operation to ticket-member, org-member, org, member tables"
          "return OrgsByMembersForEvents containing results in the form of events keyed by members keyed by orgs"
        }
    }
  }
}
