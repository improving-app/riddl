projector OrganizationsView is {
   record Fields {
      orgId: ImprovingApp.OrganizationId, //org-owner & org-member correlation tables
      orgOwner: MemberId,    //org-owner correlation table
      orgMember: MemberId     //org-member correlation table
  }
  handler OrganizationsView is {
      on event ImprovingApp.OrganizationContext.OrganizationEstablished {
          "create row in org table with orgId set to OrganizationEstablished.info.orgId"
          "and set previous row's orgName to OrganizationEstablished.info.name"
          "and set previous row's orgInfo to OrganizationEstablished.info"
      }
      on event MembersAddedToOrganization {
          "create rows in org-member table with orgId set to MembersAddedToOrganization.orgId and orgMember not belonging in MembersAddedToOrganization.newMembers"
      }
      on event MembersRemovedFromOrganization {
          "remove rows in org-member table with orgId set to MembersRemovedFromOrganization.orgId and orgMember not belonging in MembersRemovedFromOrganization.newMembers"
      }
      on event OwnersAddedToOrganization {
          "create rows in org-owner table with orgId set to OwnersAddedToOrganization.orgId and orgOwner not belonging in OwnersAddedToOrganization.newOwners"
      }
      on event OwnersRemovedFromOrganization {
          "remove rows in org-owner table with orgId set to OwnersRemovedFromOrganization.orgId and orgOwner not belonging in OwnersRemovedFromOrganization.newOwners"
      }
      on query FindOrganizationsByMemberOrOwner {
          "if FindOrganizationsByMemberOrOwner.isMember, find FindOrganizationsByMemberOrOwner.memberId in org-member - otherwise do same in org-owner - if not found, return error"
          "and return OrganizationListByMemberOrOwner containing results"
      }
  }
}
