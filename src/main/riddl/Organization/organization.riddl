type OrganizationId is Id (ImprovingApp.OrganizationContext.Organization)
  briefly "Unique identifier for Organization entity"

context OrganizationContext is {
    include "organizationTypeDefinitions"
    include "organizationMessages"
    include "organizationsProjection"
    include "organizationSources"

    entity Organization is {
        by author Reid
        option event-sourced
        option available

        handler OrganizationHandler is {
          on command EstablishOrganization {
            send event OrganizationEstablished to outlet OrganizationEvents.Events
            morph entity Organization to state DraftOrganization with record DraftOrganizationState
          }
          on other {
            error "Only EstablishOrganization command is allowed in the default state"
          }
        }

        record DraftOrganizationState is {
            id: OrganizationId,
            info: OrganizationContext.EditableInfo,
            parent: OrganizationId?,
            members: MemberId* briefly "Required",
            owners: MemberId* briefly "Required",
            contacts: Contact*,
            // accounts: OrganizationContext.AccountList,
            orgMeta: OrganizationContext.MetaInfo
        }
        state DraftOrganization of DraftOrganizationState is {
            handler DraftOrganizationHandler is {
                on command EstablishOrganization {
                  error "Organization already established"
                }
                on command EditOrganizationInfo {
                  set field DraftOrganizationState.info to "OrganizationContext.Info"
                  set field DraftOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                  send event OrganizationInfoEdited to outlet OrganizationEvents.Events
                }
                on command UpdateParent {
                  if "successful" then {
                    "Update the parent field with the value provided in UpdateParent"
                    // TODO: should adjust this to reflect design pattern to provide children in a projector.
                    // TODO: The next two AND statements would be handled in the projection handler for ParentUpdated event
                    "remove organizationId from the list of children in the 'old' parent"
                    "add organizationId to the list of children in the 'new' parent"
                    "set MetaInfo to capture change data"
                    "yield event ParentUpdated"
                  } else {
                    if "newParent exists outside the bounds of the root organization that contains organizationId" then {
                      error "Organization cannot leave the bounds of the root organization that it belongs to"
                    }
                    if "newParent exists below organizationId (child, grandchild, etc.) in the organizational hierarchy"
                    then  {
                      error "New Parent cannot be a generational child of the organization being modified"
                    }
                    if "editingMember is not Authorized" then {
                      error "EditingMember is not authorized to make this change."
                    }
                  }
                }
                on command AddMembersToOrganization {
                  if "successful" then {
                    "Merge new members into the member list. Duplicates not allowed."
                    "set MetaInfo to capture change data"
                    "emit MembersAddedToOrganization event"
                  }
                  // Restrictions not implemented yet
                  // example NewMemberDoesNotMeetRestrictions is {
                  //     given "Member does not meet qualifictions to join organization"
                  //     then "Place rejected member in dead letter queue and process remaining members"
                  //     and "Consider how to notify of partial success" // TODO: discuss how this might work
                  // }
                  if "organizationId is a private organization and updatingMember is not an admin for organizationId" then {
                    error "Only Admins for organizationId can admit new members"
                  }
                  if "Member in newMembers list is in state suspended" then {
                    "place suspended member in dead letter queue and process remaining members"
                    "Consider how to notify of partial success" // TODO: discuss how this might work
                  }
                  if "editingMember is not Authorized to add members to this organization" then {
                    error "EditingMember is not authorized to make this change."
                  }
                }
                on command RemoveMembersFromOrganization {
                  if "editingMember is authorized to remove members from this organization" then {
                    "membersToRemove are purged from memberList"
                    "set MetaInfo to capture change data"
                    "yield MembersRemovedFromOrganization()"
                  } else {
                    error "EditingMember is not authorized to make this change."
                  }
                }
                on command AddOwnersToOrganization {
                  if "successful" then {
                    "Merge new owners into the owner list. Duplicates not allowed."
                    "set MetaInfo to capture change data"
                    "emit OwnersAddedToOrganization event"
                  } else {
                    if "Member in ownersToAdd is not in memberList of organizationId" then {
                      "Place non-member owner in dead letter queue and finish processing remaining member owners"
                      "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    if "Member in ownersToAdd is in state Suspended" then {
                      "Place suspended owner in dead letter queue and finish processing remaining member owners"
                      "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    if "Member in ownersToAdd is a type that is not allowed to be an owner" then {
                      "Place non-compliant owner in dead letter queue and finish processing remaining member owners"
                      "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    if "editingMember is not Authorized" then {
                      error "EditingMember is not authorized to make this change."
                    }
                  }
                }
                on command RemoveOwnersFromOrganization {
                  if "successful" then {
                    "ownersToRemove are purged from memberList"
                    "set MetaInfo to capture change data"
                    "yield OwnersRemovedFromOrganization()"// TODO
                  } else {
                    if "editingMember is not Authorized" then {
                      error "EditingMember is not authorized to make this change."
                    }
                  }
                }
                on command UpdateOrganizationContacts {
                  if "successful" then {
                    "Merge new contacts into the contacts list. Duplicates not allowed."
                    "set MetaInfo to capture change data"
                    "emit ContactsAddedToOrganization event"
                  } else {
                    if "Member in contactsToAdd is not in memberList of organizationId" then {
                      "Place non-member contact in dead letter queue and finish processing remaining member contacts"
                      "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    if "Member in contactsToAdd is in state Suspended" then {
                      "Place suspended contact in dead letter queue and finish processing remaining member owners"
                      "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    if "Member in contactsToAdd is a type that is not allowed to be a contact" then {
                        //Only members of type ________ can be contacts for an organization???
                        "Place non-compliant contact in dead letter queue and finish processing remaining member contacts"
                        "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    if "editingMember is not Authorized" then {
                      error "EditingMember is not authorized to make this change."
                    }
                  }
                }
                // on command UpdateOrganizationAccounts {
                //     example NotAuthorized is {
                //         when "editingMember is not Authorized"
                //         then error "EditingMember is not authorized to make this change."
                //     }
                // }
                on command ActivateOrganization {
                  if "all required fields in info are not None or Empty and required non-info fields are present" then {
                    send event OrganizationEstablished to outlet OrganizationEvents.Events
                    morph entity Organization to state EstablishedOrganization with record EstablishedOrganizationState
                  } else {
                    if "all required fields in state are not present" then {
                      "state is not sufficiently filled out to activate organization"
                    }
                  }
                }
                on query GetOrganizationInfo {
                  reply record OrganizationInfo
                }
                on query GetOrganizationParent {
                  if "Parent field is present (non-empty)" then {
                    reply result OrganizationParent
                  } else {
                    if "in Draft state and Parent is not empty in editableInfo" then {
                      error "Parent field is not present in current state of Draft"
                    }
                  }
                }
                on query GetOrganizationMembers {
                  if "Members field is present (non-empty)" then {
                    reply result OrganizationMembers
                  } else {
                    if "in Draft state and Members is not empty in editableInfo" then {
                      error "Members field is not present in current state of Draft"
                    }
                  }
                }
                on query GetOrganizationOwners {
                  if "in Draft state and Owners is not empty in editableInfo" then {
                    error "Owners field is not present in current state of Draft"
                  } else {
                    if "Owners field is present (non-empty)" then {
                       reply record OrganizationOwners
                    }
                  }
                }
                on query GetOrganizationContacts {
                  if "in Draft state and contacts is not empty in editableInfo" then {
                    error "Contacts field is not present in current state of Draft"
                  } else {
                    if "Contacts field is present (non-empty)" then {
                       reply result OrganizationContacts
                    }
                  }
                }
                on query GetOrganizationMeta {
                  reply with result OrganizationMeta
                }
                 on query GetOrganizationState {
                   if "State field is present (non-empty)" then {
                     reply with record OrganizationState
                    }
                }
                on other {
                  error "No other commands allowed in Draft state"
                }
            }
        }

        record EstablishedOrganizationState is {
            id: OrganizationId,
            info: OrganizationContext.Info,
            parent: OrganizationId,
            members: MemberId+ briefly "Required",
            owners: MemberId+ briefly "Required",
            contacts: Contact*,
            // accounts: OrganizationContext.AccountList,
            orgMeta: OrganizationContext.MetaInfo
        }
        state EstablishedOrganization of EstablishedOrganizationState is {
            handler ActiveOrganizationHandler is {
                on command EstablishOrganization {
                  error "Organization already established"
                }
                on command EditOrganizationInfo {
                  set field EstablishedOrganizationState.info to "OrganizationContext.Info"
                  set field EstablishedOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                  send event OrganizationInfoEdited to outlet OrganizationEvents.Events
                }
                on command UpdateParent {
                  if "editingMember is not Authorized" then {
                    error "EditingMember is not authorized to make this change."
                  } else {
                    if "newParent exists below organizationId (child, grandchild, etc.) in the organizational hierarchy" then {
                      error "New Parent cannot be a generational child of the organization being modified"
                    } else {
                      if "newParent exists outside the bounds of the root organization that contains organizationId" then {
                        error "Organization cannot leave the bounds of the root organization that it belongs to"
                      } else {
                        "set Active Organization's parent to the organizationId provided in UpdateParent"
                        "set MetaInfo to capture change data"
                        "yield event ParentUpdated"
                      }
                    }
                  }
                }
                on command AddMembersToOrganization {
                  if "Member does not meet qualifictions to join organization" then {
                    "Place rejected member in dead letter queue and process remaining members"
                    "Consider how to notify of partial success" // TODO: discuss how this might work
                    stop
                  }
                  if "organizationId is a private organization and updatingMember is not an admin for organizationId" then {
                    error "Only Admins for organizationId can admit new members"
                    stop
                  }
                  if "Member in newMembers list is in state suspended" then {
                     "place suspended member in dead letter queue and process remaining members"
                     "Consider how to notify of partial success" // TODO: discuss how this might work
                     stop
                  }
                  if "editingMember is not Authorized" then {
                    error "EditingMember is not authorized to make this change."
                  } else {
                    "Merge new members into the member list. Duplicates not allowed."
                    "set MetaInfo to capture change data"
                    "emit MembersAddedToOrganization event"
                  }
                }
                on command RemoveMembersFromOrganization {
                  if "editingMember is not Authorized" then {
                     error "EditingMember is not authorized to make this change."
                     stop
                  } else {
                    "membersToRemove are purged from memberList"
                    "set MetaInfo to capture change data"
                    "yield MembersRemovedFromOrganization()"// TODO
                  }
                }
                on command AddOwnersToOrganization {
                  if "Member in ownersToAdd is not in memberList of organizationId" then {
                     "Place non-member owner in dead letter queue and finish processing remaining member owners"
                     "Consider how to notify of partial success" // TODO: discuss how this might work
                     stop
                  }
                  if "Member in ownersToAdd is in state Suspended" then {
                     "Place suspended owner in dead letter queue and finish processing remaining member owners"
                     "Consider how to notify of partial success" // TODO: discuss how this might work
                     stop
                  }
                  // Only members of type ________ can be owners of an organization???
                  if "Member in ownersToAdd is a type that is not allowed to be an owner" then {
                    "Place non-compliant owner in dead letter queue and finish processing remaining member owners"
                    "Consider how to notify of partial success" // TODO: discuss how this might work
                    stop
                  }
                  if "editingMember is not Authorized" then {
                     error "EditingMember is not authorized to make this change."
                  } else {
                     "Merge new owners into the owner list. Duplicates not allowed."
                     "set MetaInfo to capture change data"
                     "emit OwnersAddedToOrganization event"
                  }
                }
                on command RemoveOwnersFromOrganization {
                  if "editingMember is not Authorized" then {
                     error "EditingMember is not authorized to make this change."
                  } else {
                    "ownersToRemove are purged from memberList"
                    "set MetaInfo to capture change data"
                    "yield OwnersRemovedFromOrganization()"// TODO
                  }
                }
                on command UpdateOrganizationContacts {
                  if "Member in contactsToAdd is not in memberList of organizationId" then {
                    "Place non-member contact in dead letter queue and finish processing remaining member contacts"
                     "Consider how to notify of partial success" // TODO: discuss how this might work
                     stop
                  }
                  if "Member in contactsToAdd is in state Suspended" then {
                    "Place suspended contact in dead letter queue and finish processing remaining member owners"
                    "Consider how to notify of partial success" // TODO: discuss how this might work
                    stop
                  }
                  //Only members of type ________ can be contacts for an organization???
                  if "Member in contactsToAdd is a type that is not allowed to be a contact" then {
                    "Place non-compliant contact in dead letter queue and finish processing remaining member contacts"
                    "Consider how to notify of partial success" // TODO: discuss how this might work
                    stop
                  }
                  if "editingMember is not Authorized" then {
                    error "EditingMember is not authorized to make this change."
                  } else {
                    "Merge new contacts into the contacts list. Duplicates not allowed."
                    "set MetaInfo to capture change data"
                    "emit ContactsAddedToOrganization event"
                  }
                }
                // on command UpdateOrganizationAccounts {
                //     example NotAuthorized is {
                //         when "editingMember is not Authorized"
                //         then error "EditingMember is not authorized to make this change."
                //     }
                // }
                on command SuspendOrganization {
                   set field EstablishedOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                   send event OrganizationSuspended to outlet OrganizationEvents.Events
                   become entity Organization to handler SuspendedOrganizationHandler
                }
                on command TerminateOrganization {
                  set field EstablishedOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                  morph entity Organization to state TerminatedOrganization
                    with record TerminatedOrganizationState
                      //(lastMeta = @EstablishedOrganizationState.orgMeta)
                }
                on query GetOrganizationInfo {
                  reply result OrganizationInfo
                }
                on query GetOrganizationParent {
                  reply result OrganizationParent
                }
                on query GetOrganizationMembers {
                  reply result OrganizationMembers
                }
                on query GetOrganizationOwners {
                  reply result OrganizationOwners
                }
                on query GetOrganizationContacts {
                  reply result OrganizationContacts
                }
                on query GetOrganizationMeta {
                  reply result OrganizationMeta
                }
                on query GetOrganizationState {
                  reply result OrganizationState
                }
                on other {
                  error "No other commands allowed in Active state"
                }
            }
            handler SuspendedOrganizationHandler is {
                on command EstablishOrganization {
                    error "Organization already established"
                }
                on command ActivateOrganization {
                  set field EstablishedOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                  send event OrganizationActivated
                    to outlet OrganizationEvents.Events
                  become entity Organization to handler ActiveOrganizationHandler
                }
                on command SuspendOrganization {
                  set field EstablishedOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                  send event OrganizationSuspended to outlet OrganizationEvents.Events
                  become entity Organization to handler SuspendedOrganizationHandler
                } briefly "A suspension reason can be updated by re-issuing the command"
                on command TerminateOrganization {
                    set field EstablishedOrganizationState.orgMeta to "OrganizationContext.MetaInfo"
                    morph entity Organization to state TerminatedOrganization with record TerminatedOrganizationState
                }
                on query GetOrganizationInfo {
                  reply result OrganizationInfo
                }
                on query GetOrganizationParent {
                  reply result OrganizationParent
                }
                on query GetOrganizationMembers {
                  reply result OrganizationMembers
                }
                on query GetOrganizationOwners {
                  reply result OrganizationOwners
                }
                on query GetOrganizationContacts {
                  reply result OrganizationContacts
                }
                on query GetOrganizationMeta {
                  reply result OrganizationMeta
                }
                 on query GetOrganizationState {
                  reply result OrganizationState
                }
                on other {
                  error "Move organization to the Active state in order to edit details about organization."
                }
            }
        }

        record TerminatedOrganizationState is {
            lastMeta: OrganizationContext.MetaInfo
        }
        state TerminatedOrganization of TerminatedOrganizationState is {
            handler TerminatedOrganization is {
                on other {
                  error "No commands allowed in Terminated state"
                }
            }
        }
    }
} described in file "organization.md"

