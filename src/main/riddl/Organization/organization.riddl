context OrganizationContext is {
    include "organizationTypeDefinitions"
    include "organizationMessages"
    include "organizationProjections"
    include "organizationSources"
    include "organizationStories"

    entity Organization is {
        options (event-sourced, available)

        handler OrganizationHandler is {
            on command EstablishOrganization {
                then morph entity Organization to state Organization.Draft
                and set Draft.orgId to @EstablishOrganization.orgId
                and set Draft.info to @EstablishOrganization.info
                // TODO: need a way to set values 
                // and set Draft.meta to OrganizationContext.MetaInfo(createdOn=now(), createdBy = @EstablishOrganization.establishingMember, lastUpdated=now(), lastUpdatedBy=@EstablishOrganization.establishingMember)
                and yield event OrganizationEstablished(orgId=@Draft.orgId, info=@Draft.nfo, meta=@Draft.meta)
            }
            on other { then error "Only EstablishOrganization command is allowed in the empty state"}
        }

        state Draft is {
            fields {
                orgId: OrganizationId,
                info: OrganizationContext.Info,
                parent: OrganizationContext.Parent,
                members: OrganizationContext.MemberList,
                owners: OrganizationContext.OwnerList,
                contacts: OrganizationContext.ContactList,
                // accounts: OrganizationContext.AccountList,
                meta: OrganizationContext.MetaInfo
            }
            handler DraftOrganizationHandler is {
                on command EstablishOrganization {
                    then error "Organization already established"
                }
                on command EditOrganizationInfo {
                    then set Draft.info to @EstablishOrganization.info
                    and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, info=@Draft.orgInfo, meta=@Draft.orgMetaInfo)
                }
                on command UpdateOrganizationStatus {
                    then set Draft.meta.currentStatus to @UpdateOrganizationStatus.status
                    and set Draft.meta.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                    and set Draft.meta.lastUpdated to now()
                    and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, info=@Draft.info, meta=@Draft.meta)
                }
                on other { then error "No other commands allowed in Draft state" }
            }
        }


        state Active is {
            fields {
                oid: OrganizationId,
                orgInfo: OrganizationContext.Info,
                parent: OrganizationContext.Parent,
                members: OrganizationContext.MemberList,
                owners: OrganizationContext.OwnerList,
                contacts: OrganizationContext.ContactList,
                // accounts: OrganizationContext.AccountList,
                orgMeta: OrganizationContext.MetaInfo
            }
            handler ActiveOrganization is {
                on command EstablishOrganization {
                    then error "Organization already established"
                }
                on command EditOrganizationInfo { 
                    example Success is {
                        then set Active.orgInfo to @EditOrganizationInfo.newInfo
                        and set Active.orgMeta.lastUpdatedBy to @EditOrganizationInfo.editingMember
                        and set Active.orgMeta.lastUpdated to now()
                        and yield event OrganizationInfoUpdated(orgId=@Active.oid, info=@Active.orgInfo, meta=@Active.orgMeta)
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command UpdateOrganizationStatus { 
                    then set Active.orgMeta.currentStatus to @UpdateOrganizationStatus.status
                    and set Active.orgMeta.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                    and set Active.orgMeta.lastUpdated to now()
                    and yield event OrganizationInfoUpdated(orgId=@Active.oid, info=@Active.orgInfo, meta=@Active.orgMeta)
                }
                on other { then error "No other commands allowed in Active state" }//TODO: We need to consider queries
            }
        }

        state Suspended is {
            fields {
                oid: OrganizationId,
                orgInfo: OrganizationContext.Info,
                parent: OrganizationContext.Parent,
                members: OrganizationContext.MemberList,
                owners: OrganizationContext.OwnerList,
                contacts: OrganizationContext.ContactList,
                // accounts: OrganizationContext.AccountList,
                orgMeta: OrganizationContext.MetaInfo
            }
            handler SuspendedOrganization is {
                on command EstablishOrganization {
                    then error "Organization already established"
                }
                on command EditOrganizationInfo {
                    then error "Move organization to the Active status in order to edit OrganizationInfo."
                }
                on command UpdateOrganizationStatus { 
                    then set Suspended.orgMeta.currentStatus to @UpdateOrganizationStatus.status
                    and set Suspended.orgMeta.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                    and set Suspended.orgMeta.lastUpdated to now()
                    and yield event OrganizationInfoUpdated(orgId=@Suspended.oid, info=@Suspended.orgInfo, meta=@Suspended.orgMeta)
                    //TODO: turn this into a function and call function here
                }
                on other { then error "No other commands allowed in Suspended state"}
            }
        }

        state Terminated is {
            fields {
                oid: OrganizationId,
                name: String
            }
            handler TerminatedOrganization is {
                on other {then error "No commands allowed in Terminated state"}
            }
        }
        //function SetMeta is 
    }
} described in file "src/main/riddl/Organization/organization.md"
