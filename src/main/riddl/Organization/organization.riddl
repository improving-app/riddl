context OrganizationContext is {
    //Organization Details        
    type OrganizationInfo is {
        name: String, //i.e. Provo High School
        shortName: String, //i.e. PHS
        address: Address,
        childOrganizations: SubOrganizationId*,
        isPrivate: Boolean
        //calendar: Calendar
    }
        
    type EstablishOrganization is command {baseInfo: OrganizationInfo, parentOrg: OrganizationType?} briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
    type OrganizationEstablished is event {orgId: OrganizationType}
    type EditOrganizationInfo is command {orgId: OrganizationType, newInfo: OrganizationInfo}
    type OrganizationInfoUpdated is event {orgId: OrganizationType}
    type UpdateBaseOrganzationURL is command {orgId: BaseOrganizationId, url: URL}
    type BaseOrganizationURLUpdated is event {orgId: BaseOrganizationId}
    type AddBaseOrgBillingAccount is command {orgId: BaseOrganizationId, billingAccount: BillingAccountId?, paymentAccount: PaymentAccountId?}
    type BaseOrgBillingAccountAdded is event {orgId: BaseOrganizationId}
    type ReplaceBaseOrgBillingAccount is command {orgId: BaseOrganizationId, billingAccount: BillingAccountId}
    type BaseOrgBillingAccountReplaced is event {orgId: BaseOrganizationId}
    type AddBaseOrgPaymentAccount is command {orgId: BaseOrganizationId, paymentAccount: PaymentAccountId}
    type BaseOrgPaymentAccountAdded is event {orgId: BaseOrganizationId}
    type ReplaceBaseOrgPaymentAccount is command {orgId: BaseOrganizationId, paymentAccount: PaymentAccountId}
    type BaseOrgPaymentAccountReplaced is event {orgId: BaseOrganizationId}
    type AssignNewParentOrg is command {orgId: SubOrganizationId, parentOrg: OrganizationType}
    type NewParentOrgAssigned is event {orgId: SubOrganizationId}
    type ActivateOrganization is command {orgId: OrganizationType}
    type OrganizationActivated is event {orgId: OrganizationType} 
    type InactivateOrganization is command {orgId: OrganizationType}
    type OrganizationInactivated is event {orgId: OrganizationType}
    type SuspendOrganization is command {orgId: OrganizationType}
    type OrganizationSuspended is event {orgId: OrganizationType}
    type TerminateOrganization is command {orgId: OrganizationType}
    type OrganizationTerminated is event {orgId: OrganizationType}
    
    entity BaseOrganization is {
        state Draft is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccountId,
            paymentAccount: PaymentAccountId
        } handler DraftBaseOrganizationHandler is {???}
        
        state Active is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccountId,
            paymentAccount: PaymentAccountId
        } handler ActiveBaseOrganization is {???}

        state Inactive is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccountId,
            paymentAccount: PaymentAccountId
        } handler InactiveBaseOrganization is {???}

        state Suspended is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccountId,
            paymentAccount: PaymentAccountId
        } handler SuspendedBaseOrganization is {???}

        state Terminated is {
            oid: BaseOrganizationId
        } handler TerminatedBaseOrganization is {???}
    }described in file "src/main/riddl/Organization/baseOrganization.md"

    entity SubOrganization is {
        state DraftSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler DraftOrganizationHanlder is {???}
        
        state ActiveSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler ActiveOrganizationHanlder is {???}

        type subOrgInfo is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        }
        state InactiveSubOrganization is {
            soi: subOrgInfo
        }
        handler InactiveOrganizationHanlder is {???}

        state SuspendedSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler SuspendedOrganizationHanlder is {???}

        state TerminatedSubOrganization is {
            oid: SubOrganizationId
        } handler TerminatedOrganizationHanlder is {???}
    } described in file "src/main/riddl/Organization/subOrganization.md"
    
    

    type Guest is {???} //move to order domain
} 

//TODO: collapse Organization to a single entity
//TODO: Member moves to its own bounded context
//TODO: rethink definition of commands/events based on the above