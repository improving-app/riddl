context OrganizationContext is {
    //Organization Details        
    type OrganizationInfo is {
        name: String, //i.e. Provo High School
        shortName: String, //i.e. PHS
        address: Address,
        childOrganizations: SubOrganizationId*,
        isPrivate: Boolean
        //calendar: Calendar
    }
    type BillingAccount: String
    type PaymentAccount: String
    
    //Member Details
    type MemberId is Id( Member )
    type Student: String
    type FacultyStaff: String
    type Vendor: String
    type Sponsor: String
    type General: String
    type Alumni: String
    type Parent: String
    type MemberType is one of { Student, FacultyStaff, Vendor, Sponsor, General, Alumni, Parent }
    type MemberInfo is {
        handle: String,
        avitar: URL, //thumbnail image of the user. Need to screen to ensure community guidelines compliance. i.e. no porn or offensive content.
        firstName: String,
        lastName: String,
        mobileNumber: MobileNumber,
        organizations: OrganizationType+, 
        relatedMembers: String, //Primary use case is parent/student. I am sure there are others. Might be a better way to document such a relationship.
        memberType: MemberType
    }

    type EstablishOrganization is command {baseInfo: OrganizationInfo, parentOrg: OrganizationType?} briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
    type OrganizationEstablished is event {orgId: OrganizationType}
    type EditOrganizationInfo is command {orgId: OrganizationType, newInfo: OrganizationInfo}
    type OrganizationInfoUpdated is event {orgId: OrganizationType}
    type UpdateBaseOrganzationURL is command {orgId: BaseOrganizationId, url: URL}
    type BaseOrganizationURLUpdated is event {orgId: BaseOrganizationId}
    type AddBaseOrgBillingAccount is command {orgId: BaseOrganizationId, billingAccount: BillingAccount}
    type BaseOrgBillingAccountAdded is event {orgId: BaseOrganizationId}
    type ReplaceBaseOrgBillingAccount is command {orgId: BaseOrganizationId, billingAccount: BillingAccount}
    type BaseOrgBillingAccountReplaced is event {orgId: BaseOrganizationId}
    type AddBaseOrgPaymentAccount is command {orgId: BaseOrganizationId, paymentAccount: PaymentAccount}
    type BaseOrgPaymentAccountAdded is event {orgId: BaseOrganizationId}
    type ReplaceBaseOrgPaymentAccount is command {orgId: BaseOrganizationId, paymentAccount: PaymentAccount}
    type BaseOrgPaymentAccountReplaced is event {orgId: BaseOrganizationId}
    type AssignNewParentOrg is command {orgId: SubOrganizationId, parentOrg: OrganizationType}
    type NewParentOrgAssigned is event {orgId: SubOrganizationId}
    type ActivateOrganization is command {orgId: OrganizationType}
    type OrganizationActivated is event {orgId: OrganizationType} 
    type InactivateOrganization is command {orgId: OrganizationType}
    type OrganizationInactivated is event {orgId: OrganizationType}
    type SuspendOrganization is command {orgId: OrganizationType}
    type OrganizationSuspended is event {orgId: OrganizationType}
    type TerminateOrganization is command {orgId: OrganizationType}
    type OrganizationTerminated is event {orgId: OrganizationType}
    type RegisterMember is command {memberInfo: MemberInfo, type: MemberType, associatedOrg: OrganizationType?}
    type RegisterMemberList is command {memberList: MemberInfo*, type: MemberType, associatedOrg: OrganizationType?}
    type MemberRegistered is event {memberId: MemberId}
    type UpdateMemberInfo is command {memberId: MemberId, memberInfo: MemberInfo}
    type MemberInfoUpdated is event {memberId: MemberId}
    type AddOrganizaitonToMember is command {memberId: MemberId, orgId: OrganizationType}
    type OrganizatinoAddedToMember is event {memberId: MemberId, orgId: OrganizationType}
    type RemoveOrganizationFromMember is command {memberId: MemberId, orgId: OrganizationType}
    type OrganizationRemovedFromMember is event {memberId: MemberId, orgId: OrganizationType}
    type EstablishMemberRelationship is command {member1Id: MemberId, member2Id: MemberId}
    type MemberRelationshipEstablished is event {member1Id: MemberId, member2Id: MemberId}
    type UpdateMemberType is command {memberId: MemberId, newType: MemberType}
    type MemberTypeUpdated is event {memberId: MemberId, newType: MemberType}
    type ActivateMember is command {memberId: MemberId}
    type MemberActivated is event {memberId: MemberId}
    type InactivateMember is command {memberId: MemberId}
    type MemberInactivated is event {memberId: MemberId}
    type SuspendMember is command {memberId: MemberId}
    type MemberSuspended is event {memberId: MemberId}
    type TerminateMember is command {memberId: MemberId}
    type MemberTerminated is event {memberId: MemberId}

    entity BaseOrganization is {
        state Draft is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccount,
            paymentAccount: PaymentAccount
        } handler DraftBaseOrganizationHandler is {???}
        
        state Active is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccount,
            paymentAccount: PaymentAccount
        } handler ActiveBaseOrganization is {???}

        state Inactive is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccount,
            paymentAccount: PaymentAccount
        } handler InactiveBaseOrganization is {???}

        state Suspended is {
            oid: BaseOrganizationId,
            orgDetails: OrganizationInfo,
            url: URL,
            billingAccount: BillingAccount,
            paymentAccount: PaymentAccount
        } handler SuspendedBaseOrganization is {???}

        state Terminated is {
            oid: BaseOrganizationId
        } handler TerminatedBaseOrganization is {???}
    }described in file "/Users/jameslovell/projects/improving-app-riddl/src/main/riddl/Organization/baseOrganization.md"

    entity SubOrganization is {
        state DraftSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler DraftOrganizationHanlder is {???}
        
        state ActiveSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler ActiveOrganizationHanlder is {???}

        state InactiveSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler InactiveOrganizationHanlder is {???}

        state SuspendedSubOrganization is {
            oid: SubOrganizationId,
            orgDetails: OrganizationInfo,
            parentOrganization: OrganizationType
        } handler SuspendedOrganizationHanlder is {???}

        state TerminatedSubOrganization is {
            oid: SubOrganizationId
        } handler TerminatedOrganizationHanlder is {???}
    }described in file "/Users/jameslovell/projects/improving-app-riddl/src/main/riddl/Organization/subOrganization.md"
    
    entity Member is {
        option is aggregate
        state Active is {
            memberId: MemberId,
            memberInfo: MemberInfo
        } 
        handler ActiveMemberHandler is {???}
        state Guest is {
            memberId: MemberId
            //Guest Info
        } //Anonymous User
        handlerGuestMemberHandler is {???}
        state Inactive is {
            memberId: MemberId,
            memberInfo: MemberInfo 
        } //An inactive user is one who has not used the application in a period of time (1 year?).
        handler InactiveMemberHandler is {???}
        
        state Suspended is {
            memberId: MemberId,
            memberInfo: MemberInfo
        } //A suspended member is one who is not able to use the application due to misuse, non-payment, or a host of other reasons, but may be reinstated at some point and we want to retain their data.
        handler SuspendedMemberHandler is {???}

        state Terminated is { 
            memberId: MemberId
        } //A terminated member is one who exercises their right to be forgotten.
        handler TerminagedMemberHandler is {???}
    }

    entity Guest is {???}
} 