context OrganizationContext is {
    //Organization Details  
    type OrganizationStatus is any of {Draft, Active, Suspended, Terminated}      
    type OrganizationInfo is {
        name: String, //i.e. Provo High School. Must be unique within the organizational structure.
        shortName: String?, //i.e. PHS. Must be unique within the organizational structure.
        address: Address?, //required for BaseOrg. Optional for all other organizations.
        isPrivate: Boolean, //defaults to true
        url: URL?,
        logo: URL,
        //color scheme
        //move billing and distribution to accounting domain - which referenced back to organization
        parent: OrganizationId?, //BaseOrganizations do not have a parent. All other organizations must have a parent. The BaseOrganization (only one per organizational structure) is the financially responsible party. As such it MUST have a BillingAccount defined. BaseOrg remains in Draft state until defined.
        children: OrganizationId*,
        members: MemberId*,
        owners: MemberId+,
        primaryContacts: MemberId+,
        billingContacts: MemberId*,
        distributionContacts: MemberId*,
        billingAccount: BillingAccountId?, //Required for BaseOrg. Optional for all other organizations.
        distributionAccount: DistributionAccountId?
        //primaryContact: MemberId,
        //calendar: Calendar
    }
    type OrganizationMetaInfo is {
        createdOn: DateTime,
        createdBy: MemberId,
        lastUpdated: DateTime,
        lastUpdatedBy: MemberId, //this may also be a system user. i.e. they are two months late on payment so the system determines to suspend the organization.
        currentState: OrganizationStatus
        //currentOwner: MemberId
    }
        
    command EstablishOrganization is {orgId: OrganizationId, orgInfo: OrganizationInfo, establishingMember: MemberId} 
        briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
    event OrganizationEstablished is {orgId: OrganizationId, orgInfo: OrganizationInfo, orgMetaInfo: OrganizationMetaInfo}
    command EditOrganizationInfo is {orgId: OrganizationId, newInfo: OrganizationInfo, editingMember: MemberId} 
        briefly "Only provide the values of the elements of the OrganizationInfo type you wish to change. For example, if you wish to define a new parentOrg, only provide the parentOrg attribute with the ID of the new parent. Whatever values you provide overwrite what was previously there. The absence of an attribute means leave this value as is. If an empty value to an attribute is provided, the value will be overwritten with an empty value."
    event OrganizationInfoUpdated is {orgId: OrganizationId, orgInfo: OrganizationInfo}
    command AddMembersToOrganization is {orgId: OrganizationId, members: MemberId+}
    event MembersAddedToOrganization is {orgId: OrganizationId, members: MemberId+}
    command UpdateOrganizationStatus is {orgId: OrganizationId, status: OrganizationStatus, updatingMember: MemberId}
    event OrganizationStatusUpdated is {orgId: OrganizationId, newStatus: OrganizationStatus}
    query FindOrganizationsByMember is {???}
    query FindOrganizationsByOwner is {???}
    //TODO: What query/responses do we need to capture?

    type OrganizationEvent is one of {OrganizationEstablished, OrganizationInfoUpdated, OrganizationStatusUpdated}
    
    entity Organization is {
        options (event sourced, available)
        
        handler OrganizationHandler is { 
            on command EstablishOrganization {
                then morph entity Organization to state Organization.Draft
                and set Draft.orgId to @EstablishOrganization.orgId
                and set Draft.orgInfo to @EstablishOrganization.orgInfo
                //and set Draft.orgMetaInfo to new OrganizationMetaInfo(createdOn="today()", createdBy = @EstablishOrganization.establishingMember, lastUpdated="today()", lastUpdatedBy=@EstablishOrganization.establishingMember)
                and yield event OrganizationEstablished(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
            }
            on other { then error "Only EstablishOrganization command is allowed in the empty state"}
        }

        state Draft is {
            orgId: OrganizationId,
            orgInfo: OrganizationInfo,
            orgMetaInfo: OrganizationMetaInfo
        }

        handler DraftOrganizationHandler for state Draft is {
            on command EstablishOrganization {
                then error "Organization already established"
            }
            on command EditOrganizationInfo { ???
                // then set Draft.orgInfo to @EstablishOrganization.orgInfo
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on command UpdateOrganizationStatus { ???
                // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
                // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // and set Draft.orgMetaInfo.lastUpdated to "today()"
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Draft state"}
        } 
        
        state Active is {
            oid: OrganizationId,
            orgDetails: OrganizationInfo
        }

        handler ActiveOrganization for state Active is {
            on command EstablishOrganization {
               then error "Organization already established"
            }
            on command EditOrganizationInfo { ???
                // then set Draft.orgInfo to @EstablishOrganization.orgInfo
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on command UpdateOrganizationStatus { ???
                // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
                // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // and set Draft.orgMetaInfo.lastUpdated to "today()"
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Active state" }//TODO: We need to consider queries
        }

        state Suspended is {
            oid: OrganizationId,
            orgDetails: OrganizationInfo
        }

        handler SuspendedOrganization for state Suspended is {
            on command EstablishOrganization {
                then error "Organization already established"
            }
            on command EditOrganizationInfo { 
                then error "Move organization to the Active status in order to edit OrganizationInfo."
            }
            on command UpdateOrganizationStatus { ???
                // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
                // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // and set Draft.orgMetaInfo.lastUpdated to "today()"
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Suspended state"}
        }

        state Terminated is {
            oid: OrganizationId,
            name: String
        }
        handler TerminatedOrganization for state Terminated is {
            on other {then error "No commands allowed in Terminated state"}
        }
    }

    projection OrganizationViews is {
        orgId: OrganizationId, 
        owners: MemberId+, 
        members: MemberId*,
        parent: OrganizationId?,
        children: OrganizationId*
    } 
    handler OrganizationViewsHandler for projection OrganizationViews is {

        on event OrganizationEstablished {
            then set orgId to @orgId
            and set owners to @orgInfo.owners
            and set members to @orgInfo.members
            and set parent to @orgInfo.parent
            and set children to @orgInfo.children

        }
        on event OrganizationInfoUpdated {
            then set owners to @orgInfo.owners
            and set members to @orgInfo.members
            and set parent to @orgInfo.parent
            and set children to @orgInfo.children
        }
        on event MembersAddedToOrganization {
            then append @members to ^^OrganizationViews.members
        }
        on event OwnerAddedToOrganization {???}
        on event OrganizationAddedToOrganization {???}
        on query FindOrganizationsByMember {???}
        on query FindOrganizationsByOwner {???}
    }
} described in file "src/main/riddl/Organization/organization.md"
