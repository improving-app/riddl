context OrganizationContext is {
    //Organization Details        
    type OrganizationInfo is {
        name: String, //i.e. Provo High School. Must be unique within the organizational structure.
        shortName: String?, //i.e. PHS
        address: Address?, //required for BaseOrg. Optional for all other organizations.
        isPrivate: Boolean, //defaults to true
        url: URL?,
        billingAccount: BillingAccountId?, //Required for BaseOrg. Optional for all other organizations.
        paymentAccount: PaymentAccountId?,
        parentOrg: OrganizationId? //BaseOrganizations do not have a parent. All other organizations must have a parent. The BaseOrganization (only one per organizaitonal structure) is the financially responsible party. As such it MUST have a BillingAccount defined.
        //calendar: Calendar
    }
        
    type EstablishOrganization is command {baseInfo: OrganizationInfo, parentOrg: OrganizationId?} briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
    type OrganizationEstablished is event {orgId: OrganizationId}
    type EditOrganizationInfo is command {orgId: OrganizationId, newInfo: OrganizationInfo} briefly "Only provide the values of the elements of the OrganizationInfo type you wish to change. For example, if you wish to define a new parentOrg, only provide the parentOrg attribute with the ID of the new parent. Whatever values you provide overwrite what was previously there. The absence of an attribute means leave this value as is. If an empty value to an attribute is provided, the value will be overwritten with an empty value."
    type OrganizationInfoUpdated is event {orgId: OrganizationId}
    type ActivateOrganization is command {orgId: OrganizationId}
    type OrganizationActivated is event {orgId: OrganizationId} 
    type InactivateOrganization is command {orgId: OrganizationId}
    type OrganizationInactivated is event {orgId: OrganizationId}
    type SuspendOrganization is command {orgId: OrganizationId}
    type OrganizationSuspended is event {orgId: OrganizationId}
    type TerminateOrganization is command {orgId: OrganizationId}
    type OrganizationTerminated is event {orgId: OrganizationId}
    
    entity Organization is {
        state Draft is {
            oid: OrganizationId,
            orgDetails: OrganizationInfo
        } handler DraftOrganizationHandler is {???}
        
        state Active is {
            oid: OrganizationId,
            orgDetails: OrganizationInfo
        } handler ActiveOrganization is {???}

        state Inactive is {
            oid: OrganizationId,
            orgDetails: OrganizationInfo
        } handler InactiveOrganization is {???}

        state Suspended is {
            oid: OrganizationId,
            orgDetails: OrganizationInfo
        } handler SuspendedOrganization is {???}

        state Terminated is {
            oid: OrganizationId,
            name: String
        } handler TerminatedOrganization is {???}
    }described in file "src/main/riddl/Organization/organization.md"
    
    type Guest is {???} //TODO: move to order domain
} 

//TODO: rethink definition of commands/events based on the above