context OrganizationContext is {
    //Organization Details
    type Status is any of {Draft, Active, Suspended, Terminated} briefly "Internal status of an Organization."
    type Contacts is {
        primaryContacts: MemberId+,
        billingContacts: MemberId*,
        distributionContacts: MemberId*
    } briefly "The contacts for a given organization."
    described in file "src/main/riddl/Organization/organizationContacts.md"
    type Accounts is {
        billingAccount: BillingAccountId?, //Required for BaseOrg. Optional for all other organizations.
        distributionAccount: DistributionAccountId? //Required for BaseOrg. Optional for all other organizations.
    } briefly "Accounts are used to move money between Improving.App and an organization, or between suborganizations defined within an organization."
    described in file "src/main/riddl/Accounting/accounts.md"
    type Info is {
        name: String briefly "i.e. Provo High School. Must be unique within the organizational structure.",
        shortName: String? briefly "i.e. PHS. Must be unique within the organizational structure.",
        address: Address? briefly "Required for BaseOrg. Optional for all other organizations.",
        isPrivate: Boolean briefly "defaults to true",
        url: URL?,
        logo: URL,
        //color scheme
        parent: OrganizationId? briefly "BaseOrganizations do not have a parent. All other organizations must have a parent. The BaseOrganization (only one per organizational structure) is the financially responsible party. As such it MUST have a BillingAccount defined. BaseOrg remains in Draft state until fully defined.",
        children: OrganizationId* briefly "If an organization has a parent it is a child organization. A school may be the parent to the football team. The football team may have child organizations of Varsity, Junior Varsity, and Freshman football teams.",
        members: MemberId* briefly "An organization is composed of members. Membership in an organization generally gives visibility and access to events, especially for private organizaitons. Only members of an organizaton can be Owners or Admins of that organization.",
        owners: MemberId+ briefly "Every organization must have at least one Owner. Owners are the first and default Admin for the organzations they own.",
        contacts: Contacts briefly "There are three kinds of contacts: Primary Contacts, Billing Contacts, and Distribution Contacts." described in file "src/main/riddl/Organization/organizationContacts.md",
        accounts: Accounts briefly "There are two kinds of accounts: Billing Accounts, and Distribution Accounts." described in file "src/main/riddl/Accounting/accounts.md"
        //calendar: Calendar
    } briefly "Essential information about an organization that is expected to evolve over time."
    type MetaInfo is {
        createdOn: TimeStamp briefly "The Date/Time this organization was created.",
        createdBy: MemberId briefly "The member who created this organization",
        lastUpdated: TimeStamp briefly "The Date/Time this organization was last modified.",
        lastUpdatedBy: MemberId briefly "The member who last modified this organization. This may also be a system user. i.e. they are two months late on payment so the system determines to suspend the organization.",
        currentStatus: OrganizationContext.Status briefly "The current state of this organization. Valid states include Draft, Active, Suspended, and Terminated"
        //currentOwner: MemberId
    } briefly "Meta data kept about an organization that the user does not directly modify. Instead the system updates this info as a Member Owner updates details in the Info type."

    command EstablishOrganization is {
        orgId: OrganizationId briefly "A unique identifier for this organization. This must be provided by the calling client.",
        info: OrganizationContext.Info briefly "Details about an organization required for it to exist. See OrganizationContext.Organization.Info for details.",
        establishingMember: MemberId briefly "The Id of the Member who is issuing the create command."
    } briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
    described in file "src/main/riddl/Organization/establishOrganization.md"

    event OrganizationEstablished is {
        orgId: OrganizationId,
        info: OrganizationContext.Info,
        meta: OrganizationContext.MetaInfo
    }
    command EditOrganizationInfo is {
        orgId: OrganizationId briefly "The unique Id of the organization to create",
        newInfo: OrganizationContext.Info briefly "The information about the organization",
        editingMember: MemberId briefly "Id of the member who is creating the organization"
    } briefly "A command to edit the values of an Organization's Info "
    described in file "src/main/riddl/Organization/editOrganizationInfo.md"
    event OrganizationInfoUpdated is {orgId: OrganizationId, info: OrganizationContext.Info, meta: OrganizationContext.MetaInfo}

    command AddMembersToOrganization is {
      orgId: OrganizationId,
      members: MemberId+
      // TODO: orgId: OrganizationId briefly @orgId,
      // TODO: members: MemberId+ briefly @membersList
     }
    event MembersAddedToOrganization is {orgId: OrganizationId, members: MemberId+}
    command AddOwnersToOrganization is {orgId: OrganizationId, owners: MemberId+}
    event OwnersAddedToOrganization is {orgId: OrganizationId, owners: MemberId+}
    command UpdateOrganizationStatus is {orgId: OrganizationId, status: OrganizationContext.Status, updatingMember: MemberId}
    event OrganizationStatusUpdated is {orgId: OrganizationId, newStatus: OrganizationContext.Status}
    command UpdateOrganizationContacts is {orgId: OrganizationId, contacts: Contacts}
    event OrganizationContactsUpdated is {orgId: OrganizationId, info: OrganizationContext.Info, meta: OrganizationContext.MetaInfo}
    command UpdateOrganizationAccounts is {orgId: OrganizationId, accounts: Accounts}
    event OrganizationAccountsUpdated is {orgId: OrganizationId, info: OrganizationContext.Info, meta: OrganizationContext.MetaInfo}

    query FindOrganizationsByMember is {member: MemberId} briefly "Get a list of organizations that a member belongs to."
    result OrganizationListByMember is {member: MemberId, organizations: OrganizationId*}
    query FindOrganizationsByOwner is {owner: MemberId} briefly "Get a list of organizations that are owned by a member."
    result OrganizationListByOwner is {owner: MemberId, organizations: OrganizationId*}
    query GetOrganizationInfo is {orgId: OrganizationId}
    result OrganizationInfo is {orgId: OrganizationId, info: OrganizationContext.Info}

   type PublicOrganizationEvent is one of {OrganizationEstablished, OrganizationInfoUpdated, OrganizationStatusUpdated}
   // TODO: James to add all event types

    entity Organization is {
        options (event-sourced, available)

        handler OrganizationHandler is {
            on command EstablishOrganization {
                then morph entity Organization to state Organization.Draft
                and set Draft.orgId to @EstablishOrganization.orgId
                and set Draft.info to @EstablishOrganization.info
                // TODO: and set Draft.meta to ^^^^MetaInfo(createdOn=now(), createdBy = @EstablishOrganization.establishingMember, lastUpdated=now(), lastUpdatedBy=@EstablishOrganization.establishingMember, currentStatus=Status.Draft)
                and yield event OrganizationEstablished(orgId=@Draft.orgId, info=@Draft.nfo, meta=@Draft.meta)
            }
            on other { then error "Only EstablishOrganization command is allowed in the empty state"}
        }

        state Draft is {
            orgId: OrganizationId,
            info: ^^^.Info,
            meta: ^^^.MetaInfo
        }
        handler DraftOrganizationHandler for state ^Draft is {

            on command EstablishOrganization {
                then error "Organization already established"
            }
            on command EditOrganizationInfo {
                then set Draft.info to @EstablishOrganization.info
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on command UpdateOrganizationStatus {
                then set ^^.Draft.meta.currentStatus to @UpdateOrganizationStatus.status
                and set ^^.Draft.meta.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // TODO: and set ^^.Draft.meta.lastUpdated to now()
                and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, info=@Draft.info, meta=@Draft.meta)
                // TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Draft state" }
        }

        state Active is {
            oid: OrganizationId,
            orgDetails: OrganizationContext.Info
        }
        handler ActiveOrganization for state ^Active is {
            on command EstablishOrganization {
               then error "Organization already established"
            }
            on command EditOrganizationInfo { ???
                // then set Draft.orgInfo to @EstablishOrganization.orgInfo
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on command UpdateOrganizationStatus { ???
                // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
                // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // and set Draft.orgMetaInfo.lastUpdated to "today()"
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Active state" }//TODO: We need to consider queries
        }

        state Suspended is {
            oid: OrganizationId,
            orgDetails: OrganizationContext.Info
        }
        handler SuspendedOrganization for state ^Suspended {

            on command EstablishOrganization {
                then error "Organization already established"
            }
            on command EditOrganizationInfo {
                then error "Move organization to the Active status in order to edit OrganizationInfo."
            }
            on command UpdateOrganizationStatus { ???
                // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
                // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // and set Draft.orgMetaInfo.lastUpdated to "today()"
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Suspended state"}
        }

        state Terminated is {
            oid: OrganizationId,
            name: String

        }
        handler TerminatedOrganization for state ^Terminated is {
            on other {then error "No commands allowed in Terminated state"}
        }
    }

    projection OrganizationViews is {
        orgId: OrganizationId
        owners: MemberId+
        members: MemberId*
        parent: OrganizationId?
        children: OrganizationId*
    }

    handler OrganizationViewsHandler for projection OrganizationViews is {
        on event OrganizationEstablished {???
            //then set ^^.OrganizationViews.orgId to @OrganizationContext.OrganizationEstablished.orgId
            //and set ^^.OrganizationViews.owners to @OrganizationContext.OrganizationEstablished.info.owners
            //and set ^^.OrganizationViews.members to @OrganizationContext.OrganizationEstablished.info.members
            //and set ^^.OrganizationViews.parent to @OrganizationContext.OrganizationEstablished.info.parent
            //and set ^^.OrganizationViews.children to @OrganizationContext.OrganizationEstablished.info.children
        }
        on event OrganizationInfoUpdated {???
            //then set ^^.OrganizationViews.owners to @OrganizationInfoUpdated.info.owners
            //and set ^^.OrganizationViews.members to @OrganizationInfoUpdated.info.members
            //and set ^^.OrganizationViews.parent to @^^^OrganizationInfoUpdated.info.parent
            //and set ^^.OrganizationViews.children to @^^^OrganizationInfoUpdated.info.children
        }
        on event MembersAddedToOrganization {
            then append @MembersAddedToOrganization.members to OrganizationViews.members
        }
        on event OwnersAddedToOrganization {
            then append @^^^OwnersAddedToOrganization.owners to OrganizationViews.owners
        }
        on query FindOrganizationsByMember {???}
        on query FindOrganizationsByOwner {???}
    }

    source OrganizationEvents is {
        outlet Events is type PublicOrganizationEvent from Organization
    } explained as "This is a source for Organization Events"
} described in file "src/main/riddl/Organization/organization.md"
