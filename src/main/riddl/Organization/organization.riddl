type OrganizationId is Id (ImprovingApp.OrganizationContext.Organization)
  briefly "Unique identifier for Organization entity"

context OrganizationContext is {
    include "organizationTypeDefinitions"
    include "organizationMessages"
    include "organizationsProjection"
    include "organizationSources"

    entity Organization by author Reid is {
        options (event-sourced, available)

        handler OrganizationHandler is {
            on command EstablishOrganization {
                then send event OrganizationEstablished(
                    orgId = @EstablishOrganization.orgId,
                    info = @EstablishOrganization.info,
                    parent = @EstablishOrganization.parent,
                    members = @EstablishOrganization.members,
                    owners = @EstablishOrganization.owners,
                    contacts = @EstablishOrganization.contacts,
                    meta = !OrganizationContext.MetaInfo(
                        createdOn = now(),
                        createdBy = @EstablishOrganization.establishingMember,
                        lastUpdatedOn = now(),
                        lastUpdatedBy = @EstablishOrganization.establishingMember,
                        currentState = @OrganizationStates.Draft
                    )
                ) to outlet OrganizationEvents.Events
                and morph entity Organization to state DraftOrganization with !DraftOrganizationState(
                    info = !OrganizationContext.EditableInfo(
                        name = @EstablishOrganization.info.name,
                        shortName = @EstablishOrganization.info.shortName,
                        address = @EstablishOrganization.info.address,
                        isPrivate = @EstablishOrganization.info.isPrivate,
                        url = @EstablishOrganization.info.url,
                        logo = @EstablishOrganization.info.logo,
                        tenant = @EstablishOrganization.info.tenant
                    ),
                    meta = !OrganizationContext.MetaInfo(
                        createdOn = now(),
                        createdBy = @EstablishOrganization.establishingMember,
                        lastUpdatedOn = now(),
                        lastUpdatedBy = @EstablishOrganization.establishingMember,
                        currentState = @OrganizationStates.Draft
                    )
                )
            }
            on other { then error "Only EstablishOrganization command is allowed in the default state" }
        }

        record DraftOrganizationState is {
            id: OrganizationId,
            info: OrganizationContext.EditableInfo,
            parent: OrganizationId?,
            members: MemberId* briefly "Required",
            owners: MemberId* briefly "Required",
            contacts: Contact*,
            // accounts: OrganizationContext.AccountList,
            orgMeta: OrganizationContext.MetaInfo
        }
        state DraftOrganization of DraftOrganizationState is {
            handler DraftOrganizationHandler is {
                on command EstablishOrganization {
                    then error "Organization already established"
                }
                on command EditOrganizationInfo {
                    then set DraftOrganizationState.info to !OrganizationContext.Info(
                         name = @EditOrganizationInfo.newInfo.name,
                         shortName = @EditOrganizationInfo.newInfo.shortName,
                         address = @EditOrganizationInfo.newInfo.address,
                         isPrivate = @EditOrganizationInfo.newInfo.isPrivate,
                         url = @EditOrganizationInfo.newInfo.url,
                         logo = @EditOrganizationInfo.newInfo.logo,
                         tenant = @EditOrganizationInfo.newInfo.tenant
                     )
                     and set DraftOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                         createdOn = @DraftOrganizationState.orgMeta.createdOn,
                         createdBy = @DraftOrganizationState.orgMeta.createdBy,
                         lastUpdatedOn = now(),
                         lastUpdatedBy = @EditOrganizationInfo.editingMember,
                         currentState = @OrganizationStates.Draft
                     )
                    and send event OrganizationInfoEdited(
                        orgId = @DraftOrganizationState.id,
                        info = !OrganizationContext.Info(
                            name = @DraftOrganizationState.info.name,
                            shortName = @DraftOrganizationState.info.shortName,
                            address = @DraftOrganizationState.info.address,
                            isPrivate = @DraftOrganizationState.info.isPrivate,
                            url = @DraftOrganizationState.info.url,
                            logo = @DraftOrganizationState.info.logo,
                            tenant = @DraftOrganizationState.info.tenant
                        ),
                        meta = @DraftOrganizationState.orgMeta
                    ) to outlet OrganizationEvents.Events
                }
                on command UpdateParent {
                    example Success is {
                        then "Update the parent field with the value provided in UpdateParent"
                        // TODO: should adjust this to reflect design pattern to provide children in a projector. The next two AND statements would be handled in the projection handler for ParentUpdated event
                        and "remove orgId from the list of children in the 'old' parent"
                        and "add orgId to the list of children in the 'new' parent"
                        and "set MetaInfo to capture change data"
                        and "yield event ParentUpdated"
                    }
                    example NewParentMustBeWithinContainingRootOrg is {
                        given "newParent exists outside the bounds of the root organization that contains orgId"
                        then error "Organization cannot leave the bounds of the root organization that it belongs to"
                    }
                    example DoNotCreateCircularReference is {
                        given "newParent exists below orgId (child, grandchild, etc.) in the organizational hierarchy"
                        then error "New Parent cannot be a generational child of the organization being modified"
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command AddMembersToOrganization {
                    example Success is {
                        then "Merge new members into the member list. Duplicates not allowed."
                        and "set MetaInfo to capture change data"
                        and "emit MembersAddedToOrganization event"
                    }
                    // Restrictions not implemented yet
                    // example NewMemberDoesNotMeetRestrictions is {
                    //     given "Member does not meet qualifictions to join organization"
                    //     then "Place rejected member in dead letter queue and process remaining members"
                    //     and "Consider how to notify of partial success" // TODO: discuss how this might work
                    // }
                    example PrivateOrganizationMembershipByNonAdmin is {
                        given "orgId is a private organization"
                        when "updatingMember is not an admin for orgId"
                        then error "Only Admins for orgId can admit new members"
                    }
                    example AddSuspendedMember is {
                        given "Member in newMembers list is in state suspended"
                        then "place suspended member in dead letter queue and process remaining members"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized to add members to this organization"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command RemoveMembersFromOrganization {
                    example Success is {
                        then "membersToRemove are purged from memberList"
                        and "set MetaInfo to capture change data"
                        and "yield MembersRemovedFromOrganization()"// TODO
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized to remove members from this organization"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command AddOwnersToOrganization {
                    example Success is {
                        then "Merge new owners into the owner list. Duplicates not allowed."
                        and "set MetaInfo to capture change data"
                        and "emit OwnersAddedToOrganization event"
                    }
                    example OwnerIsNotMemberOfOrganization is {
                        given "Member in ownersToAdd is not in memberList of orgId"
                        then "Place non-member owner in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example OwnerIsSuspended is {
                        given "Member in ownersToAdd is in state Suspended"
                        then "Place suspended owner in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example OwnerTypeIsNotAcceptable is {
                        //Only members of type ________ can be owners of an organization???
                        given "Member in ownersToAdd is a type that is not allowed to be an owner"
                        then "Place non-compliant owner in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command RemoveOwnersFromOrganization {
                    example Success is {
                        then "ownersToRemove are purged from memberList"
                        and "set MetaInfo to capture change data"
                        and "yield OwnersRemovedFromOrganization()"// TODO
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command UpdateOrganizationContacts {
                    example Success is {
                        then "Merge new contacts into the contacts list. Duplicates not allowed."
                        and "set MetaInfo to capture change data"
                        and "emit ContactsAddedToOrganization event"
                    }
                    example ContactIsNotMemberOfOrganization is {
                        given "Member in contactsToAdd is not in memberList of orgId"
                        then "Place non-member contact in dead letter queue and finish processing remaining member contacts"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example ContactIsSuspended is {
                        given "Member in contactsToAdd is in state Suspended"
                        then "Place suspended contact in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example ContactTypeIsNotAcceptable is {
                        //Only members of type ________ can be contacts for an organization???
                        given "Member in contactsToAdd is a type that is not allowed to be a contact"
                        then "Place non-compliant contact in dead letter queue and finish processing remaining member contacts"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                // on command UpdateOrganizationAccounts {
                //     example NotAuthorized is {
                //         when "editingMember is not Authorized"
                //         then error "EditingMember is not authorized to make this change."
                //     }
                // }
                on command ActivateOrganization {
                    example Success {
                        when "all required fields in info are not None or Empty"
                        and "required non-info fields are present"
                        then send event OrganizationEstablished(
                            orgId = @DraftOrganizationState.id,
                            info = !OrganizationContext.Info(
                               name = @DraftOrganizationState.info.name,
                               shortName = @DraftOrganizationState.info.shortName,
                               address = @DraftOrganizationState.info.address,
                               isPrivate = @DraftOrganizationState.info.isPrivate,
                               url = @DraftOrganizationState.info.url,
                               logo = @DraftOrganizationState.info.logo,
                               tenant = @DraftOrganizationState.inf0.tenant
                            ),
                            parent = @DraftOrganizationState.parent,
                            members = @DraftOrganizationState.members,
                            owners = @DraftOrganizationState.owners,
                            contacts = @DraftOrganizationState.contacts,
                            meta = !OrganizationContext.MetaInfo(
                                createdOn = @DraftOrganizationState.orgMeta.createdOn,
                                createdBy = @DraftOrganizationState.orgMeta.createdBy,
                                lastUpdatedOn = now(),
                                lastUpdatedBy = @EditOrganizationInfo.editingMember,
                                currentState = @OrganizationStates.Active
                            )
                        ) to outlet OrganizationEvents.Events
                        and morph entity Organization to state EstablishedOrganization
                            with !EstablishedOrganizationState(
                                info = !OrganizationContext.Info(
                                    name = @DraftOrganizationState.info.name,
                                    shortName = @DraftOrganizationState.info.shortName,
                                    address = @DraftOrganizationState.info.address,
                                    isPrivate = @DraftOrganizationState.info.isPrivate,
                                    url = @DraftOrganizationState.info.url,
                                    logo = @DraftOrganizationState.info.logo,
                                    tenant = @DraftOrganizationState.info.tenant
                                ),
                                parent = @DraftOrganizationState.parent,
                                members = @DraftOrganizationState.members,
                                owners = @DraftOrganizationState.owners,
                                contact = @DraftOrganizationState.contact,
                                orgMeta = @DraftOrganizationState.orgMeta
                            )
                    }
                    example NotSufficient {
                        when "all required fields in state are not present"
                        then error "state is not sufficiently filled out to activate organization"
                    }
                }
                on command GetOrganizationInfo {
                    example Success {
                        when "Parent field is present (non-empty)"
                        then return OrganizationParent(
                            orgId = @DraftOrganizationState.orgId,
                            info = @DraftOrganizationState.info
                        )
                    }
                }
                on command GetOrganizationParent {
                    example Success {
                        when "Parent field is present (non-empty)"
                        then return OrganizationParent(
                            orgId = @DraftOrganizationState.orgId,
                            parent = @DraftOrganizationState.parent
                        )
                    }
                    example DraftError {
                        when "in Draft state and Parent is not empty in editableInfo"
                        then error "Parent field is not present in current state of Draft"
                    }
                }
                on command GetOrganizationMembers {
                    example Success {
                        when "Members field is present (non-empty)"
                        then return OrganizationMembers(
                            orgId = @DraftOrganizationState.orgId,
                            members = @DraftOrganizationState.members
                        )
                    }
                    example DraftError {
                        when "in Draft state and Members is not empty in editableInfo"
                        then error "Members field is not present in current state of Draft"
                    }
                }
                on command GetOrganizationOwners {
                    example Success {
                        when "Owners field is present (non-empty)"
                        then return OrganizationOwners(
                            orgId = @DraftOrganizationState.orgId,
                            owners = @DraftOrganizationState.owners
                        )
                    }
                    example DraftError {
                        when "in Draft state and Owners is not empty in editableInfo"
                        then error "Owners field is not present in current state of Draft"
                    }
                }
                on command GetOrganizationContacts {
                    example Success {
                        when "Contacts field is present (non-empty)"
                        then return OrganizationContacts(
                            orgId = @DraftOrganizationState.orgId,
                            contacts = @DraftOrganizationState.contacts
                        )
                    }
                    example DraftError {
                        when "in Draft state and contacts is not empty in editableInfo"
                        then error "Contacts field is not present in current state of Draft"
                    }
                }
                on command GetOrganizationMeta {
                    example Success {
                        when "Meta field is present (non-empty)"
                        then return OrganizationMeta(
                            orgId = @DraftOrganizationState.orgId,
                            metaInfo = @DraftOrganizationState.metaInfo
                        )
                    }
                    example DraftError {
                        when "in Draft state and metaInfo is not empty in editableInfo"
                        then error "Meta field is not present in current state of Draft"
                    }
                }
                 on commandGetOrganizationState {
                    example Success {
                        when "State field is present (non-empty)"
                        then return OrganizationState(
                            orgId = @DraftOrganizationState.orgId,
                            info = @DraftOrganizationState.info,
                            parent = @DraftOrganizationState.parent,
                            members = @DraftOrganizationState.members,
                            owners = @DraftOrganizationState.owners,
                            contacts = @DraftOrganizationState.contacts,
                            orgMeta = @DraftOrganizationState.metaInfo
                        )
                    }
                }
                on other { then error "No other commands allowed in Draft state" }
            }
        }

        record EstablishedOrganizationState is {
            id: OrganizationId,
            info: OrganizationContext.Info,
            parent: OrganizationId?,
            members: MemberId+ briefly "Required",
            owners: MemberId+ briefly "Required",
            contacts: Contact*,
            // accounts: OrganizationContext.AccountList,
            orgMeta: OrganizationContext.MetaInfo
        }
        state EstablishedOrganization of EstablishedOrganizationState is {
            handler ActiveOrganizationHandler is {
                on command EstablishOrganization {
                    then error "Organization already established"
                }
                on command EditOrganizationInfo {
                    example Success {
                        then set EstablishedOrganizationState.info to !OrganizationContext.Info(
                                name = @EditOrganizationInfo.newInfo.name,
                                shortName = @EditOrganizationInfo.newInfo.shortName,
                                address = @EditOrganizationInfo.newInfo.address,
                                isPrivate = @EditOrganizationInfo.newInfo.isPrivate,
                                url = @EditOrganizationInfo.newInfo.url,
                                logo = @EditOrganizationInfo.newInfo.logo,
                                tenant = @EditOrganizationInfo.newInfo.tenant
                             )
                         and set EstablishedOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                             meta = !OrganizationContext.MetaInfo(
                                createdOn = @EstablishedOrganizationState.orgMeta.createdOn,
                                createdBy = @EstablishedOrganizationState.orgMeta.createdBy,
                                lastUpdatedOn = now(),
                                lastUpdatedBy = @EditOrganizationInfo.editingMember,
                                currentState = @OrganizationStates.Draft
                             )
                        )
                        and send event OrganizationInfoEdited(
                            orgId = @EstablishedOrganizationState.id,
                            info = @EstablishedOrganizationState.info,
                            meta = @EstablishedOrganizationState.orgMeta
                        ) to outlet OrganizationEvents.Events
                    }
                }
                on command UpdateParent {
                    example Success is {
                        then "set Active Organization's parent to the orgId provided in UpdateParent"
                        and "set MetaInfo to capture change data"
                        and "yield event ParentUpdated"
                    }
                    example NewParentMustBeWithinContainingRootOrg is {
                        given "newParent exists outside the bounds of the root organization that contains orgId"
                        then error "Organization cannot leave the bounds of the root organization that it belongs to"
                    }
                    example DoNotCreateCircularReference is {
                        given "newParent exists below orgId (child, grandchild, etc.) in the organizational hierarchy"
                        then error "New Parent cannot be a generational child of the organization being modified"
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command AddMembersToOrganization {
                    example Success is {
                        then "Merge new members into the member list. Duplicates not allowed."
                        and "set MetaInfo to capture change data"
                        and "emit MembersAddedToOrganization event"
                    }
                    example NewMemberDoesNotMeetRestrictions is {
                        given "Member does not meet qualifictions to join organization"
                        then "Place rejected member in dead letter queue and process remaining members"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example PrivateOrganizationMembershipByNonAdmin is {
                        given "orgId is a private organization"
                        when "updatingMember is not an admin for orgId"
                        then error "Only Admins for orgId can admit new members"
                    }
                    example AddSuspendedMember is {
                        given "Member in newMembers list is in state suspended"
                        then "place suspended member in dead letter queue and process remaining members"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command RemoveMembersFromOrganization {
                    example Success is {
                        then "membersToRemove are purged from memberList"
                        and "set MetaInfo to capture change data"
                        and "yield MembersRemovedFromOrganization()"// TODO
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command AddOwnersToOrganization {
                    example Success is {
                        then "Merge new owners into the owner list. Duplicates not allowed."
                        and "set MetaInfo to capture change data"
                        and "emit OwnersAddedToOrganization event"
                    }
                    example OwnerIsNotMemberOfOrganization is {
                        given "Member in ownersToAdd is not in memberList of orgId"
                        then "Place non-member owner in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example OwnerIsSuspended is {
                        given "Member in ownersToAdd is in state Suspended"
                        then "Place suspended owner in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example OwnerTypeIsNotAcceptable is {
                        //Only members of type ________ can be owners of an organization???
                        given "Member in ownersToAdd is a type that is not allowed to be an owner"
                        then "Place non-compliant owner in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command RemoveOwnersFromOrganization {
                    example Success is {
                        then "ownersToRemove are purged from memberList"
                        and "set MetaInfo to capture change data"
                        and "yield OwnersRemovedFromOrganization()"// TODO
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                on command UpdateOrganizationContacts {
                    example Success is {
                        then "Merge new contacts into the contacts list. Duplicates not allowed."
                        and "set MetaInfo to capture change data"
                        and "emit ContactsAddedToOrganization event"
                    }
                    example ContactIsNotMemberOfOrganization is {
                        given "Member in contactsToAdd is not in memberList of orgId"
                        then "Place non-member contact in dead letter queue and finish processing remaining member contacts"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example ContactIsSuspended is {
                        given "Member in contactsToAdd is in state Suspended"
                        then "Place suspended contact in dead letter queue and finish processing remaining member owners"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example ContactTypeIsNotAcceptable is {
                        //Only members of type ________ can be contacts for an organization???
                        given "Member in contactsToAdd is a type that is not allowed to be a contact"
                        then "Place non-compliant contact in dead letter queue and finish processing remaining member contacts"
                        and "Consider how to notify of partial success" // TODO: discuss how this might work
                    }
                    example NotAuthorized is {
                        when "editingMember is not Authorized"
                        then error "EditingMember is not authorized to make this change."
                    }
                }
                // on command UpdateOrganizationAccounts {
                //     example NotAuthorized is {
                //         when "editingMember is not Authorized"
                //         then error "EditingMember is not authorized to make this change."
                //     }
                // }
                on command SuspendOrganization {
                    then set EstablishedOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                         createdOn = @DraftOrganizationState.orgMeta.createdOn,
                         createdBy = @DraftOrganizationState.orgMeta.createdBy,
                         lastUpdatedOn = now(),
                         lastUpdatedBy = @SuspendOrganization.suspendingMember,
                         currentState = @OrganizationStates.Suspended
                     )
                    and send event OrganizationSuspended(
                        orgId = @EstablishedOrganizationState.id,
                        meta = @EstablishedOrganizationState.orgMeta
                    ) to outlet OrganizationEvents.Events
                    and become entity Organization to handler SuspendedOrganizationHandler
                }
                on command TerminateOrganization {
                    then set EstablishedOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                         createdOn = @DraftOrganizationState.orgMeta.createdOn,
                         createdBy = @DraftOrganizationState.orgMeta.createdBy,
                         lastUpdatedOn = now(),
                         lastUpdatedBy = @TerminateOrganization.terminatingMember,
                         currentState = @DraftOrganizationState.orgMeta
                     )
                    and morph entity Organization to state TerminatedOrganization with !TerminatedOrganizationState(lastMeta = @EstablishedOrganizationState.orgMeta)
                }
                on command GetOrganizationInfo {
                    example Success {
                        when "Parent field is present (non-empty)"
                        then return OrganizationParent(
                            orgId = @DraftOrganizationState.orgId,
                            info = @DraftOrganizationState.info
                        )
                    }
                }
                on command GetOrganizationParent {
                    example Success {
                        when "Parent field is present (non-empty)"
                        then return OrganizationParent(
                            orgId = @DraftOrganizationState.orgId,
                            parent = @DraftOrganizationState.parent
                        )
                    }
                }
                on command GetOrganizationMembers {
                    example Success {
                        when "Members field is present (non-empty)"
                        then return OrganizationMembers(
                            orgId = @DraftOrganizationState.orgId,
                            members = @DraftOrganizationState.members
                        )
                    }
                }
                on command GetOrganizationOwners {
                    example Success {
                        when "Owners field is present (non-empty)"
                        then return OrganizationOwners(
                            orgId = @DraftOrganizationState.orgId,
                            owners = @DraftOrganizationState.owners
                        )
                    }
                }
                on command GetOrganizationContacts {
                    example Success {
                        when "Contacts field is present (non-empty)"
                        then return OrganizationContacts(
                            orgId = @DraftOrganizationState.orgId,
                            contacts = @DraftOrganizationState.contacts
                        )
                    }
                }
                on command GetOrganizationMeta {
                    example Success {
                        when "Meta field is present (non-empty)"
                        then return OrganizationMeta(
                            orgId = @DraftOrganizationState.orgId,
                            metaInfo = @DraftOrganizationState.metaInfo
                        )
                    }
                }
                 on commandGetOrganizationState {
                    example Success {
                        when "State field is present (non-empty)"
                        then return OrganizationState(
                            orgId = @DraftOrganizationState.orgId,
                            info = @DraftOrganizationState.info,
                            parent = @DraftOrganizationState.parent,
                            members = @DraftOrganizationState.members,
                            owners = @DraftOrganizationState.owners,
                            contacts = @DraftOrganizationState.contacts,
                            orgMeta = @DraftOrganizationState.metaInfo
                        )
                    }
                }
                on other { then error "No other commands allowed in Active state" }
            }
            handler SuspendedOrganizationHandler is {
                on command EstablishOrganization {
                    then error "Organization already established"
                }
                on command ActivateOrganization {
                    then set EstablishedOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                         createdOn = @DraftOrganizationState.orgMeta.createdOn,
                         createdBy = @DraftOrganizationState.orgMeta.createdBy,
                         lastUpdatedOn = now(),
                         lastUpdatedBy = @ActivateOrganization.activatingMember,
                         currentState = @OrganizationStates.Active
                     )
                    and send event OrganizationActivated(
                        orgId = @EstablishedOrganizationState.id,
                        meta = @EstablishedOrganizationState.orgMeta
                    ) to outlet OrganizationEvents.Events
                    and become entity Organization to handler ActiveOrganizationHandler
                }
                 on command SuspendOrganization {
                    then set EstablishedOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                         createdOn = @DraftOrganizationState.orgMeta.createdOn,
                         createdBy = @DraftOrganizationState.orgMeta.createdBy,
                         lastUpdatedOn = now(),
                         lastUpdatedBy = @SuspendOrganization.suspendingMember,
                         currentState = @OrganizationStates.Suspended
                     )
                    and send event OrganizationSuspended(
                        orgId = @EstablishedOrganizationState.id,
                        meta = @EstablishedOrganizationState.orgMeta
                    ) to outlet OrganizationEvents.Events
                    and become entity Organization to handler SuspendedOrganizationHandler
                } briefly "A suspension reason can be updated by re-issuing the command"
                on command TerminateOrganization {
                    then set EstablishedOrganizationState.orgMeta to !OrganizationContext.MetaInfo(
                         createdOn = @DraftOrganizationState.orgMeta.createdOn,
                         createdBy = @DraftOrganizationState.orgMeta.createdBy,
                         lastUpdatedOn = now(),
                         lastUpdatedBy = @TerminateOrganization.terminatingMember,
                         currentState = @OrganizationStates.Suspended
                     )
                    and morph entity Organization to state TerminatedOrganization with !TerminatedOrganizationState(lastMeta = @EstablishedOrganizationState.orgMeta)
                }
                on command GetOrganizationInfo {
                    example Success {
                        when "Parent field is present (non-empty)"
                        then return OrganizationParent(
                            orgId = @DraftOrganizationState.orgId,
                            info = @DraftOrganizationState.info
                        )
                    }
                }
                on command GetOrganizationParent {
                    example Success {
                        when "Parent field is present (non-empty)"
                        then return OrganizationParent(
                            orgId = @DraftOrganizationState.orgId,
                            parent = @DraftOrganizationState.parent
                        )
                    }
                }
                on command GetOrganizationMembers {
                    example Success {
                        when "Members field is present (non-empty)"
                        then return OrganizationMembers(
                            orgId = @DraftOrganizationState.orgId,
                            members = @DraftOrganizationState.members
                        )
                    }
                }
                on command GetOrganizationOwners {
                    example Success {
                        when "Owners field is present (non-empty)"
                        then return OrganizationOwners(
                            orgId = @DraftOrganizationState.orgId,
                            owners = @DraftOrganizationState.owners
                        )
                    }
                }
                on command GetOrganizationContacts {
                    example Success {
                        when "Contacts field is present (non-empty)"
                        then return OrganizationContacts(
                            orgId = @DraftOrganizationState.orgId,
                            contacts = @DraftOrganizationState.contacts
                        )
                    }
                }
                on command GetOrganizationMeta {
                    example Success {
                        when "Meta field is present (non-empty)"
                        then return OrganizationMeta(
                            orgId = @DraftOrganizationState.orgId,
                            metaInfo = @DraftOrganizationState.metaInfo
                        )
                    }
                }
                 on commandGetOrganizationState {
                    example Success {
                        when "State field is present (non-empty)"
                        then return OrganizationState(
                            orgId = @DraftOrganizationState.orgId,
                            info = @DraftOrganizationState.info,
                            parent = @DraftOrganizationState.parent,
                            members = @DraftOrganizationState.members,
                            owners = @DraftOrganizationState.owners,
                            contacts = @DraftOrganizationState.contacts,
                            orgMeta = @DraftOrganizationState.metaInfo
                        )
                    }
                }
                on other { then error "Move organization to the Active state in order to edit details about organization."}
            }
        }

        record TerminatedOrganizationState is {
            lastMeta: OrganizationContext.MetaInfo
        }
        state TerminatedOrganization of TerminatedOrganizationState is {
            handler TerminatedOrganization is {
                on other {then error "No commands allowed in Terminated state"}
            }
        }
    }
} described in file "organization.md"

