domain OrganizationDomain is {

story EstablishOrganization is {
  role Owner is "a person"
  capability is "establish an organization"
  benefit is "I can conduct business as that organization"
  author reid is { ??? }
  term Organization is "An organizational unit, incorporated or not. "
  case primary is {
    title: "Creating An Organization"
    scope domain OrganizationDomain briefly
      "This domain is the smallest encapsulating domain that contains everything referenced"
    uses context OrganizationContext briefly "This bounded context contains components used in the story"
    uses entity Organization briefly "This is what gets created"
    uses projection OrganizationViews briefly "This is how you find them"
    interactions are {
      step 1 from role Owner to context OrganizationContext briefly "initial invocation"
      step 2 from context OrganizationContext to entity Organization "send creation message"
      concurrently {
        step 3 from entity Organization to projection OrganizationViews briefly "add new organization"
        step 4 from entity Organization to role Owner briefly "organization added"
      }
    }
  }
}

context OrganizationContext is {
    include "organizationTypeDefinitions"
    include "organizationMessages"
    include "organizationProjections"
    include "organizationSources"

    entity Organization is {
        options (event-sourced, available)

        handler OrganizationHandler is {
        on command EstablishOrganization {
            then morph entity Organization to state Organization.Draft
            and set Draft.orgId to @EstablishOrganization.orgId
            and set Draft.info to @EstablishOrganization.info
            // TODO: and set Draft.meta to ^^^^MetaInfo(createdOn=now(), createdBy = @EstablishOrganization.establishingMember, lastUpdated=now(), lastUpdatedBy=@EstablishOrganization.establishingMember, currentStatus=Status.Draft)
            and yield event OrganizationEstablished(orgId=@Draft.orgId, info=@Draft.nfo, meta=@Draft.meta)
        }
        on other { then error "Only EstablishOrganization command is allowed in the empty state"}
        }

        state Draft is {
        orgId: OrganizationId,
        info: ^^^.Info,
        meta: ^^^.MetaInfo
        }
        handler DraftOrganizationHandler for state ^Draft is {
        on command EstablishOrganization {
            then error "Organization already established"
        }
        on command EditOrganizationInfo {
            then set Draft.info to @EstablishOrganization.info
            // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
            //TODO: turn this into a function and call function here
        }
        on command UpdateOrganizationStatus {
            then set ^^.Draft.meta.currentStatus to @UpdateOrganizationStatus.status
            and set ^^.Draft.meta.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
            // TODO: and set ^^.Draft.meta.lastUpdated to now()
            and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, info=@Draft.info, meta=@Draft.meta)
            // TODO: turn this into a function and call function here
        }
        on other { then error "No other commands allowed in Draft state" }
        }

        state Active is {
        oid: OrganizationId,
        orgDetails: OrganizationContext.Info
        }
        handler ActiveOrganization for state ^Active is {
            on command EstablishOrganization {
                then error "Organization already established"
            }
            on command EditOrganizationInfo { ???
                // then set Draft.orgInfo to @EstablishOrganization.orgInfo
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on command UpdateOrganizationStatus { ???
                // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
                // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
                // and set Draft.orgMetaInfo.lastUpdated to "today()"
                // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
                //TODO: turn this into a function and call function here
            }
            on other { then error "No other commands allowed in Active state" }//TODO: We need to consider queries
        }

        state Suspended is {
            oid: OrganizationId,
            orgDetails: OrganizationContext.Info
        }
        handler SuspendedOrganization for state ^Suspended {
        on command EstablishOrganization {
            then error "Organization already established"
        }
        on command EditOrganizationInfo {
            then error "Move organization to the Active status in order to edit OrganizationInfo."
        }
        on command UpdateOrganizationStatus { ???
            // then set Draft.orgMetaInfo.status to @UpdateOrganizationStatus.status
            // and set Draft.orgMetaInfo.lastUpdatedBy to @UpdateOrganizationStatus.updatingMember
            // and set Draft.orgMetaInfo.lastUpdated to "today()"
            // and yield event OrganizationInfoUpdated(orgId=@Draft.orgId, orgInfo=@Draft.orgInfo, orgMetaInfo=@Draft.orgMetaInfo)
            //TODO: turn this into a function and call function here
        }
        on other { then error "No other commands allowed in Suspended state"}
        }

        state Terminated is {
            oid: OrganizationId,
            name: String
        }
        handler TerminatedOrganization for state ^Terminated is {
            on other {then error "No commands allowed in Terminated state"}
        }
    }
} described in file "src/main/riddl/Organization/organization.md"

}
