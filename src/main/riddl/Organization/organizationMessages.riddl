command EstablishOrganization is {
  orgId: OrganizationId,
  info: OrganizationContext.Info briefly "Details about an organization required for it to exist. See OrganizationContext.Organization.Info for details.",
  tenant: TenantId,
  parent: Parent?,
  members: MemberList,
  owners: OwnerList,
  contacts: ContactList,
  onBehalfOf: MemberId briefly "The Id of the Member who is issuing the command."
} briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
described in file "establishOrganization.md"

event OrganizationEstablished is {
  organizationId: OrganizationId briefly "Unique identifier returned by EstablishOrganization command",
  info: OrganizationContext.Info,
  parent: Parent?,
  members: MemberList,
  owners: OwnerList,
  contacts: ContactList,
  meta: OrganizationContext.MetaInfo
}

command EditOrganizationInfo is {
  organizationId: OrganizationId briefly "The unique Id of the organization to create",
  newInfo: OrganizationContext.EditableInfo briefly "The information about the organization",
  onBehalfOf: MemberId briefly "Id of the member who is creating the organization"
} briefly "A command to edit the values of an Organization's Info "
described in file "editOrganizationInfo.md"

event OrganizationInfoEdited {
  organizationId: OrganizationId,
  info: OrganizationContext.Info,
  meta: OrganizationContext.MetaInfo
}

command UpdateParent is {
  organizationId: OrganizationId,
  newParent: OrganizationId
}
event ParentUpdated is {
  organizationId: OrganizationId,
  newParent: OrganizationId,
  meta: OrganizationContext.MetaInfo
}
command AddMembersToOrganization is {
  organizationId: OrganizationId,
  membersToAdd: MemberId+,
  onBehalfOf: MemberId
  // TODO: organizationId: OrganizationId briefly @orgId,
  // TODO: members: MemberId+ briefly @membersList
}
// TODO: Should members be a list of the all members (including new), or should it be only the new members (relevant for #2 and 4 above)
event MembersAddedToOrganization is {
  organizationId: OrganizationId,
  newMembers: MemberId+,
  meta: OrganizationContext.MetaInfo
}
command RemoveMembersFromOrganization is {
  organizationId: OrganizationId,
  membersToRemove: MemberId+,
  onBehalfOf: MemberId
}
event MembersRemovedFromOrganization is {
  organizationId: OrganizationId,
  removedMembers: MemberId+,
  onBehalfOf: MemberId
}
command AddOwnersToOrganization is {
  organizationId: OrganizationId,
  ownersToAdd: MemberId+,
  onBehalfOf: MemberId
}
event OwnersAddedToOrganization is {
  organizationId: OrganizationId,
  newOwners: MemberId+,
  meta: OrganizationContext.MetaInfo
}
command RemoveOwnersFromOrganization is {
  organizationId: OrganizationId,
  ownersToRemove: MemberId+,
  onBehalfOf: MemberId
}
event OwnersRemovedFromOrganization is {
  organizationId: OrganizationId,
  removedOwners: MemberId+,
  meta: OrganizationContext.MetaInfo
}
command UpdateOrganizationContacts is {
  organizationId: OrganizationId,
  contacts: Contacts,
  onBehalfOf: MemberId
}
event OrganizationContactsUpdated is {
  organizationId: OrganizationId,
  contacts: Contacts,
  meta: OrganizationContext.MetaInfo
}

command ActivateOrganization is {
  organizationId: OrganizationId,
  onBehalfOf: MemberId
}
event OrganizationActivated is {
  organizationId: OrganizationId,
  meta: OrganizationContext.MetaInfo
}

command SuspendOrganization is {
  organizationId: OrganizationId,
  onBehalfOf: MemberId
}
event OrganizationSuspended is {
  organizationId: OrganizationId,
  meta: OrganizationContext.MetaInfo
}

command TerminateOrganization is {
  organizationId: OrganizationId,
  onBehalfOf: MemberId
}
event OrganizationTerminated is {
  organizationId: OrganizationId,
  meta: OrganizationContext.MetaInfo
}

command UpdateOrganizationAccounts is {
  organizationId: OrganizationId
  /*,
  accounts: Accounts */
}
event OrganizationAccountsUpdated is {
  organizationId: OrganizationId,
  info: OrganizationContext.Info,
  meta: OrganizationContext.MetaInfo
}

query FindOrganizationsByMemberOrOwner is {memberOrOwner: MemberId, isMember: Boolean} briefly "Get a list of organizations that a member belongs to."
result OrganizationListByMemberOrOwner is {
  memberOrOwner: MemberId,
  isMember: Boolean,
  organizations: OrganizationId*
}
query GetOrganizationInfo is {organizationId: OrganizationId}
result OrganizationInfo is {
  organizationId: OrganizationId,
  info: OrganizationContext.Info
}

query GetOrganizationContacts is {organizationId: OrganizationId}
result OrganizationContacts is {
  contacts: Contact*
}