command EstablishOrganization is {
  orgId: OrganizationId briefly "A unique identifier for this organization. This must be provided by the calling client.",
  info: OrganizationContext.Info briefly "Details about an organization required for it to exist. See OrganizationContext.Organization.Info for details.",
  establishingMember: MemberId briefly "The Id of the Member who is issuing the create command."
} briefly "If parentOrg is not defined you are creating a BaseOrganization. If it is, you are creating a SubOrganization."
described in file "establishOrganization.md"

event OrganizationEstablished is {
  orgId: OrganizationId,
  info: OrganizationContext.Info,
  meta: OrganizationContext.MetaInfo
}

command EditOrganizationInfo is {
  orgId: OrganizationId briefly "The unique Id of the organization to create",
  newInfo: OrganizationContext.Info briefly "The information about the organization",
  editingMember: MemberId briefly "Id of the member who is creating the organization"
} briefly "A command to edit the values of an Organization's Info "
described in file "editOrganizationInfo.md"

event OrganizationInfoUpdated is {
  orgId: OrganizationId,
  info: OrganizationContext.Info,
  meta: OrganizationContext.MetaInfo
}

command AddMembersToOrganization is {
  orgId: OrganizationId,
  members: MemberId+
  // TODO: orgId: OrganizationId briefly @orgId,
  // TODO: members: MemberId+ briefly @membersList
}
event MembersAddedToOrganization is {
  orgId: OrganizationId, 
  members: MemberId+
}
command AddOwnersToOrganization is {
  orgId: OrganizationId, 
  owners: MemberId+
}
event OwnersAddedToOrganization is {
  orgId: OrganizationId, 
  owners: MemberId+
}
command UpdateOrganizationStatus is {
  orgId: OrganizationId, 
  status: OrganizationContext.Status, 
  updatingMember: MemberId
}
event OrganizationStatusUpdated is {
  orgId: OrganizationId, 
  newStatus: OrganizationContext.Status
}
command UpdateOrganizationContacts is {
  orgId: OrganizationId, 
  contacts: Contacts
}
event OrganizationContactsUpdated is {
  orgId: OrganizationId, 
  info: OrganizationContext.Info,  
  meta: OrganizationContext.MetaInfo
}
command UpdateOrganizationAccounts is {
  orgId: OrganizationId, 
  accounts: Accounts
}
event OrganizationAccountsUpdated is {
  orgId: OrganizationId, 
  info: OrganizationContext.Info, 
  meta: OrganizationContext.MetaInfo
}

query FindOrganizationsByMember is {member: MemberId} briefly "Get a list of organizations that a member belongs to."
result OrganizationListByMember is {
  member: MemberId, 
  organizations: OrganizationId*
}
query FindOrganizationsByOwner is {owner: MemberId} briefly "Get a list of organizations that are owned by a member."
result OrganizationListByOwner is {
  owner: MemberId, 
  organizations: OrganizationId*
}
query GetOrganizationInfo is {orgId: OrganizationId}
result OrganizationInfo is {
  orgId: OrganizationId, 
  info: OrganizationContext.Info
}
