context StoreContext is {
  type PublicStoreEvent is one of {
      StoreCreated,
      StoreInfoEdited,
      StoreIsReady,
      StoreDeleted,
      StoreOpened,
      StoreClosed,
      ProductsAddedToStore,
      ProductsRemovedFromStore
  }

  source StoreEvents is {
      outlet Events is type PublicStoreEvent
  } explained as "This is a source for Store Events"

  type StoreStates is any of {Draft, Ready, Open, Closed, Deleted}
  type StoreId is Id(StoreContext.Store)

  type Info is {
    name: String briefly "Required",
    description: String briefly "Required",
    products: SKU+ briefly "Required",
    event: EventId?,
    venue: VenueId briefly "Required",
    location: LocationId briefly "Required",
    sponsoringOrg: OrganizationId briefly "Required"
  }

  type MetaInfo is {
    createdBy: MemberId,
    createdOn: Date,
    lastModifiedBy: MemberId,
    lastModifiedOn: Date,
    state: StoreStates
  }

  type EditableInfo is {
    name: String?,
    description: String?,
    products: SKU*,
    event: EventId?,
    venue: VenueId?,
    location: LocationId?,
    sponsoringOrg: OrganizationId?
  }

  command CreateStore is {storeId: StoreId, info: StoreContext.EditableInfo, creatingMember: MemberId}
  event StoreCreated is {storeId: StoreId, info: StoreContext.EditableInfo, meta: StoreContext.MetaInfo}
  command EditStoreInfo is {storeId: StoreId, info: StoreContext.EditableInfo, updatingMember: MemberId}
  event StoreInfoEdited {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command MakeStoreReady is {storeId: StoreId, updatingMember: MemberId}
  event StoreIsReady is {storeId: StoreId, meta: StoreContext.MetaInfo}
  command DeleteStore is {storeId: StoreId, deletingMember: MemberId}
  event StoreDeleted is {storeId: StoreId, meta: StoreContext.MetaInfo}
  command OpenStore is {storeId: StoreId, openingMember: MemberId}
  event StoreOpened is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command CloseStore is {storeId: StoreId, closingMember: MemberId}
  event StoreClosed is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command TerminateStore is {storeId: StoreId, terminatingMember: MemberId}
  event StoreTerminated is {storeId: StoreId, lastMeta: StoreContext.MetaInfo}
  command AddProductsToStore is {storeId: StoreId, products: SKU+, addingMember: MemberId}
  event ProductsAddedToStore is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command RemoveProductsFromStore is {storeId: StoreId, product: SKU+, removingMember: MemberId}
  event ProductsRemovedFromStore is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  //command IncrementProductInventory is {???} //TODO: Should we pull in the Nike Inventory demo that Sean built?
  //command DecrementProductInventory is {???}
  query GetStoreInfo is {???}
  result StoreInfoResult is {???}
  query GetProductsInStore is {store: StoreId}
  result ProductsInStore is {products: SKU*}

  entity Store is {
    options (event-sourced, available)

    handler DefaultStoreHandler is {
      on command CreateStore {
        send event StoreCreated
          to outlet StoreEvents.Events
        morph entity Store to state DraftStore with record DraftStoreState
      }
      on other {
        error "Only the CreateStore command is allowed in the default state"
      }
    }

    record DraftStoreState is {
      id: StoreId,
      info: StoreContext.EditableInfo,
      meta: StoreContext.MetaInfo
    }
    state DraftStore of DraftStoreState is {
      handler DraftStoreHandler is {
        on command CreateStore {
          error "Store already created"
        }
        on command EditStoreInfo {
          "copy fields from info to Draft info fields"
          "adjust meta fields to reflect the change"
          "yield the StoreUpdated event"
        }
        on command DeleteStore {
          "remove all attributes not defined in the Deleted state"
          "adjust meta fields to reflect change"
          "yield the StoreDeleted event"
          morph entity Store to state DeletedStore with record DeletedStoreState
//          (
//            storeName = @DraftStoreState.info.storeName,
//            event = @DraftStoreState.optionalInfo,
//            venue = @DraftStoreState.requiredInfo,
//            location = @DraftStoreState.requiredInfo,
//            sponsoringOrg = @DraftStoreState.requiredInfo,
//            meta = !StoreContext.MetaInfo(
//              createdOn = @DraftStoreState.meta.createdOn,
//              createdBy = @DraftStoreState.meta.createdBy,
//              lastUpdatedOn = now(),
//              lastUpdatedBy = @DeleteStore.deletingMember,
//              currentState = @StoreStates.Deleted
//            )
//          )
        }
        on command MakeStoreReady {
          "yield the StoreIsReady event"
          morph entity Store to state CreatedStore with record CreatedStoreState
//          (
//            info = !StoreContext.Info(
//              name = @DraftStoreState.requiredInfo,
//              description = @DraftStoreState.optionalInfo,
//              products = @DraftStoreState.requiredInfo,
//              event = @DraftStoreState.requiredInfo,
//              venue = @DraftStoreState.requiredInfo,
//              location = @DraftStoreState.requiredInfo,
//              sponsoringOrg = @DraftStoreState.requiredInfo
//            ),
//            meta = !StoreContext.MetaInfo(
//              createdOn = @DraftStoreState.meta.createdOn,
//              createdBy = @DraftStoreState.meta.createdBy,
//              lastUpdatedOn = now(),
//              lastUpdatedBy = @MakeStoreReady.updatingMember,
//              currentState = @StoreStates.Ready
//            )
//          )
        }
        on command OpenStore {
          error "store must be moved to the Ready state. All required attributes must be provided."
        }
        on command CloseStore {
          error "A store in Draft state may not be closed"
        }
        on command AddProductsToStore {
          "add provided products to store definition"
          "and adjust meta fields to reflect the change"
          "yield the ProductsAddedToStore event"
          // TODO: Add cases where there is invalid product
        }
        on command RemoveProductsFromStore {
          "remove provided products from store"
          "adjust meta fields to reflect the change"
          "yield the ProductsRemovedFromStore event"
          // TODO: Add case where product to be removed doesn't exist in store
        }
      }
    }

    record CreatedStoreState is {
      id: StoreId,
      info: StoreContext.Info,
      meta: StoreContext.MetaInfo
    }
    state CreatedStore of CreatedStoreState is {
      handler ReadyStoreHandler is {
        on command CreateStore {
          error "Store already created"
        }
        on command EditStoreInfo {
          "copy fields from info to Draft info fields"
          "adjust meta fields to reflect the change"
          "yield the StoreUpdated event"
        }
        on command DeleteStore {
          error "Store must be closed before deleting it"
        }
        on command MakeStoreReady {
          error "Store must be in Draft state before being made Ready"
        }
        on command OpenStore {
          set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//          (
//            createdOn = @CreatedStoreState.meta.createdOn,
//            createdBy = @CreatedStoreState.meta.createdBy,
//            lastUpdated = now(),
//            lastUpdatedBy = @OpenStore.openingMember,
//            currentState = @StoreStates.Open
//          )
          send event StoreOpened
//          (
//            storeId = @CreatedStoreState.id,
//            info = @CreatedStoreState.info,
//            meta = @CreatedStoreState.meta
//          )
            to outlet StoreEvents.Events
          become entity Store to handler OpenStoreHandler
        }
        on command CloseStore {
          "ensure all orders associated with store are Delivered or Cancelled before closing store"
          set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//          (
//            createdOn = @CreatedStoreState.meta,
//            createdBy = @CreatedStoreState.meta,
//            lastUpdated = now(),
//            lastUpdatedBy = @CloseStore.closingMember,
//            currentState = @StoreStates.Closed
//          )
          send event StoreClosed
//          (
//            storeId = @CreatedStoreState.id,
//            info = @CreatedStoreState.info,
//            meta = @CreatedStoreState.meta
//          )
            to outlet StoreEvents.Events
          become entity Store to handler ClosedStoreHandler
        }
        on command AddProductsToStore {
          "add provided products to store definition"
          "and adjust meta fields to reflect the change"
          "yield the ProductsAddedToStore event"
          // TODO: Add cases where there is invalid product
        }
        on command RemoveProductsFromStore {
          "remove provided products from store"
          "adjust meta fields to reflect the change"
          "yield the ProductsRemovedFromStore event"
          // TODO: Add case where product to be removed doesn't exist in store
        }
        on command TerminateStore {
          set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//          (
//            createdOn = @CreatedStoreState.meta.createdOn,
//            createdBy = @CreatedStoreState.meta.createdBy,
//            lastUpdatedOn = now(),
//            lastUpdatedBy = @TerminateStore.terminatingMember,
//            currentState = @CreatedStoreState.meta
//          )
          morph entity Store to state TerminatedStore with record TerminatedStoreState
            // (lastMeta = @CreatedStoreState.meta)
        }
      }

      handler OpenStoreHandler is {
          on command CreateStore {
            error "Store already created"
          }
          on command EditStoreInfo {
            "copy fields from info to Draft info fields"
            "adjust meta fields to reflect the change"
            "yield the StoreUpdated event"
          }
          on command MakeStoreReady {
            error "Store must be in Draft state before being made Ready"
          }
          on command DeleteStore {
            error "Store must be closed before deleting it"
          }
          on command OpenStore {
            error "Store is already opened"
          }
          on command CloseStore {
            "ensure all orders associated with store are Delivered or Cancelled before closing store"
            set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//            (
//              createdOn = @CreatedStoreState.meta.createdOn,
//              createdBy = @CreatedStoreState.meta.createdBy,
//              lastUpdated = now(),
//              lastUpdatedBy = @CloseStore.closingMember,
//              currentState = @StoreStates.Closed
//            )
            send event StoreClosed
//            (
//              storeId = @CreatedStoreState.id,
//              info = @CreatedStoreState.info,
//              meta = @CreatedStoreState.meta
//            )
              to outlet StoreEvents.Events
            become entity Store to handler ClosedStoreHandler
          }
          on command AddProductsToStore {
            "add provided products to store definition"
            "and adjust meta fields to reflect the change"
            "yield the ProductsAddedToStore event"
            // TODO: Add cases where there is invalid product
          }
          on command RemoveProductsFromStore {
            "remove provided products from store"
            "adjust meta fields to reflect the change"
            "yield the ProductsRemovedFromStore event"
            // TODO: Add case where product to be removed doesn't exist in store
          }
          on command TerminateStore {
            set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//            (
//              createdOn = @CreatedStoreState.meta.createdOn,
//              createdBy = @CreatedStoreState.meta.createdBy,
//              lastUpdatedOn = now(),
//              lastUpdatedBy = @TerminateStore.terminatingMember,
//              currentState = @CreatedStoreState.meta
//            )
            morph entity Store to state TerminatedStore with record TerminatedStoreState
              // (lastMeta = @CreatedStoreState.meta)
          }
        }

        handler ClosedStoreHandler is {
          on command CreateStore {
            error "Store already created"
          }
          on command EditStoreInfo {
            "copy fields from info to Draft info fields"
            "adjust meta fields to reflect the change"
            "yield the StoreUpdated event"
          }
          on command MakeStoreReady {
            error "Store must be in Draft state before being made Ready"
          }
          on command DeleteStore {
            set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//            (
//              createdOn = @CreatedStoreState.meta.createdOn,
//              createdBy = @CreatedStoreState.meta.createdBy,
//              lastUpdated = now(),
//              lastUpdatedBy = @DeleteStore.deletingMember,
//              currentState = @StoreStates.Deleted
//            )
            send event StoreDeleted
//            (
//              storeId = @CreatedStoreState.id,
//              info = @CreatedStoreState.info,
//              meta = @CreatedStoreState.meta
//            )
              to outlet StoreEvents.Events
            morph entity Store to state DeletedStore with record DeletedStoreState
//            (
//              storeName = @CreatedStoreState.info.storeName,
//              event = @CreatedStoreState.info.event,
//              venue = @CreatedStoreState.info.venue,
//              location = @CreatedStoreState.info.location,
//              sponsoringOrg = @CreatedStoreState.info.sponsoringOrg,
//              meta = @CreatedStoreState.meta
//            )
          }
          on command OpenStore {
            set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//            (
//              createdOn = @CreatedStoreState.meta.createdOn,
//              createdBy = @CreatedStoreState.meta.createdBy,
//              lastUpdated = now(),
//              lastUpdatedBy = @OpenStore.openingMember,
//              currentState = @StoreStates.Open
//            )
            send event StoreOpened
//            (
//              storeId = @CreatedStoreState.id,
//              info = @CreatedStoreState.info,
//              meta = @CreatedStoreState.meta
//            )
              to outlet StoreEvents.Events
            become entity Store to handler OpenStoreHandler
          }
          on command CloseStore {
            error "Store is already closed."
          }
          on command AddProductsToStore {
            "add provided products to store definition"
            "and adjust meta fields to reflect the change"
            "yield the ProductsAddedToStore event"
            // TODO: Add cases where there is invalid product
          }
          on command RemoveProductsFromStore {
            "remove provided products from store"
            "adjust meta fields to reflect the change"
            "yield the ProductsRemovedFromStore event"
            // TODO: Add case where product to be removed doesn't exist in store
          }
          on command TerminateStore {
            set field CreatedStoreState.meta to "StoreContext.MetaInfo"
//            (
//              createdOn = @CreatedStoreState.meta.createdOn,
//              createdBy = @CreatedStoreState.meta.createdBy,
//              lastUpdatedOn = now(),
//              lastUpdatedBy = @TerminateStore.terminatingMember,
//              currentState = @CreatedStoreState.meta
//            )
            morph entity Store to state TerminatedStore with record TerminatedStoreState
              // (lastMeta = @CreatedStoreState.meta)
        }
      }
    }

    record DeletedStoreState is {
      storeName: String,
      event: EventId?,
      venue: VenueId,
      location: LocationId,
      sponsoringOrg: OrganizationId,
      meta: StoreContext.MetaInfo
    }
    state DeletedStore of DeletedStoreState is {
      handler DeletedStoreHandler is {
        on command TerminateStore {
          set field DeletedStoreState.meta to "StoreContext.MetaInfo"
//          (
//            createdOn = @DeletedStoreState.meta.createdOn,
//            createdBy = @DeletedStoreState.meta.createdBy,
//            lastUpdatedOn = now(),
//            lastUpdatedBy = @TerminateStore.terminatingMember,
//            currentState = @DeletedStoreState.meta
//          )
          morph entity Store to state TerminatedStore with record TerminatedStoreState
            // (lastMeta = @DeletedStoreState.meta)
        }
        on other {
         error "No actions are permitted on a Deleted store"
       }
      }
    }

    record TerminatedStoreState is {
      lastMeta: StoreContext.MetaInfo
    }
    state TerminatedStore of TerminatedStoreState is {
      handler TerminatedStoreHandler is {
        on other {
          error "No actions are permitted on a Terminated store"
        }
      }
    }
  }
}
