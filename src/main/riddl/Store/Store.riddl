context StoreContext is {
  type PublicStoreEvent is one of {
      StoreCreated,
      StoreInfoEdited,
      StoreIsReady,
      StoreDeleted,
      StoreOpened,
      StoreClosed,
      ProductsAddedToStore,
      ProductsRemovedFromStore
  }

  source StoreEvents is {
      outlet Events is type PublicStoreEvent
  } explained as "This is a source for Store Events"

  type StoreStates is any of {Draft, Ready, Open, Closed, Deleted}
  type StoreId is Id(StoreContext.Store)

  type RequiredDraftInfo is {
    name: String?,
    description: String?,
    products: SKU*,
    venue: VenueId?,
    location: LocationId?,
    sponsoringOrg: OrganizationId?
  }

  type OptionalDraftInfo is {
    event: EventId?
  }

  type Info is {
    name: String,
    description: String,
    products: SKU+,
    event: EventId?,
    venue: VenueId,
    location: LocationId,
    sponsoringOrg: OrganizationId
  }
  type MetaInfo is {
    createdBy: ^MembersContext.MemberId,
    createdOn: Date,
    lastModifiedBy: ^MembersContext.MemberId,
    lastModifiedOn: Date,
    state: StoreStates
  }
  type EditableInfo is {
    name: String?,
    description: String?,
    products: SKU*,
    event: EventId?,
    venue: VenueId?,
    location: LocationId?,
    sponsoringOrg: OrganizationId?
  }

  command CreateStore is {storeId: StoreId, info: StoreContext.Info, creatingMember: ^MembersContext.MemberId}
  event StoreCreated is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command EditStoreInfo is {storeId: StoreId, info: StoreContext.EditableInfo, updatingMember: ^MembersContext.MemberId}
  event StoreInfoEdited {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command MakeStoreReady is {storeId: StoreId, updatingMember: ^MembersContext.MemberId}
  event StoreIsReady is {storeId: StoreId, meta: StoreContext.MetaInfo}
  command DeleteStore is {storeId: StoreId, deletingMember: ^MembersContext.MemberId}
  event StoreDeleted is {storeId: StoreId, meta: StoreContext.MetaInfo}
  command OpenStore is {storeId: StoreId, openingMember: ^MembersContext.MemberId}
  event StoreOpened is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command CloseStore is {storeId: StoreId, closingMember: ^MembersContext.MemberId}
  event StoreClosed is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command TerminateStore is {storeId: StoreId, terminatingMember: ^MembersContext.MemberId}
  event StoreTerminated is {storeId: StoreId, lastMeta: StoreContext.MetaInfo}
  command AddProductsToStore is {storeId: StoreId, products: SKU+, addingMember: ^MembersContext.MemberId}
  event ProductsAddedToStore is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  command RemoveProductsFromStore is {storeId: StoreId, product: SKU+, removingMember: ^MembersContext.MemberId}
  event ProductsRemovedFromStore is {storeId: StoreId, info: StoreContext.Info, meta: StoreContext.MetaInfo}
  //command IncrementProductInventory is {???} //TODO: Should we pull in the Nike Inventory demo that Sean built?
  //command DecrementProductInventory is {???}
  query GetStoreInfo is {???}
  result StoreInfoResult is {???}
  query GetProductsInStore is {store: StoreId}
  result ProductsInStore is {store: StoreId, products: SKU*}

  entity Store is {
    options (event-sourced, available)

    handler DefaultStoreHandler is {
      on command CreateStore {
        then send event StoreCreated(
            storeId = @CreateStore.storeId,
            info = @CreateStore.info,
            meta = !StoreContext.MetaInfo(
                createdOn = now(),
                createdBy = @CreateStore.creatingMember,
                lastUpdatedOn = now(),
                lastUpdatedBy = @CreateStore.creatingMember,
                currentState = @CreateStore.Draft
            )
        ) to outlet StoreEvents.Events
        and morph entity Store to state DraftStore with !DraftStoreState(
            info = @CreateStore.info,
            meta = !StoreContext.MetaInfo(
                createdOn = now(),
                createdBy = @CreateStore.creatingMember,
                lastUpdatedOn = now(),
                lastUpdatedBy = @CreateStore.creatingMember,
                currentState = @StoreStates.Draft
            )
        )
      }
      on other {then error "Only the CreateStore command is allowed in the default state"}
    }

    record DraftStoreState is {
      id: StoreId,
      requiredInfo: StoreContext.RequiredDraftInfo,
      optionalInfo: StoreContext.OptionalDraftInfo,
      meta: StoreContext.MetaInfo
    }
    state DraftStore of DraftStoreState is {
      handler DraftStoreHandler is {
        on command CreateStore {
          then error "Store already created"
        }
        on command EditStoreInfo {
          then "copy fields from info to Draft info fields"
          and "adjust meta fields to reflect the change"
          and "yield the StoreUpdated event"
        }
        on command DeleteStore {
          then "remove all attributes not defined in the Deleted state"
          and "adjust meta fields to reflect change"
          and "yield the StoreDeleted event"
          and morph entity Store to state DeletedStore with !DeletedStoreState(
            storeName = @DraftStoreState.requiredInfo,
            event = @DraftStoreState.optionalInfo,
            venue = @DraftStoreState.requiredInfo,
            location = @DraftStoreState.requiredInfo,
            sponsoringOrg = @DraftStoreState.requiredInfo,
            meta = !StoreContext.MetaInfo(
               createdOn = @DraftStoreState.meta,
               createdBy = @DraftStoreState.meta,
               lastUpdatedOn = now(),
               lastUpdatedBy = @DeleteStore.deletingMember,
               currentState = @StoreStates.Deleted
           )
          )
        }
        on command MakeStoreReady {
          then "yield the StoreIsReady event"
          and morph entity Store to state CreatedStore with !CreatedStoreState(
            info = !StoreContext.Info(
                name = @DraftStoreState.requiredInfo,
                description = @DraftStoreState.optionalInfo,
                products = @DraftStoreState.requiredInfo,
                event = @DraftStoreState.requiredInfo,
                venue = @DraftStoreState.requiredInfo,
                location = @DraftStoreState.requiredInfo,
                sponsoringOrg = @DraftStoreState.requiredInfo
            ),
            meta = !StoreContext.MetaInfo(
                createdOn = @DraftStoreState.meta,
                createdBy = @DraftStoreState.meta,
                lastUpdatedOn = now(),
                lastUpdatedBy = @MakeStoreReady.updatingMember,
                currentState = @StoreStates.Ready
            )
          )
        }
        on command OpenStore {
          then error "store must be moved to the Ready state. All required attributes must be provided."
        }
        on command CloseStore {
          then error "A store in Draft state may not be closed"
        }
        on command AddProductsToStore {
          then "add provided products to store definition"
          and "and adjust meta fields to reflect the change"
          and "yield the ProductsAddedToStore event"
          //TODO: Add cases where there is invalid product
        }
        on command RemoveProductsFromStore {
          then "remove provided products from store"
          and "adjust meta fields to reflect the change"
          and "yield the ProductsRemovedFromStore event"
          //TODO: Add case where product to be removed doesn't exist in store
        }
      }
    }

    record CreatedStoreState is {
      id: StoreId,
      info: StoreContext.Info,
      meta: StoreContext.MetaInfo
    }
    state CreatedStore of CreatedStoreState is {
      handler ReadyStoreHandler is {
        on command CreateStore {
          then error "Store already created"
        }
        on command EditStoreInfo {
          then "copy fields from info to Draft info fields"
          and "adjust meta fields to reflect the change"
          and "yield the StoreUpdated event"
        }
        on command DeleteStore {
          then error "Store must be closed before deleting it"
        }
        on command MakeStoreReady {
          then error "Store must be in Draft state before being made Ready"
        }
        on command OpenStore {
          then set CreatedStoreState.meta to !StoreContext.MetaInfo(
            createdOn = @CreatedStoreState.meta,
            createdBy = @CreatedStoreState.meta,
            lastUpdated = now(),
            lastUpdatedBy = @OpenStore.openingMember,
            currentState = @StoreStates.Open
          )
          and send event StoreOpened(
            storeId = @CreatedStoreState.id,
            info = @CreatedStoreState.info,
            meta = @CreatedStoreState.meta
          ) to outlet StoreEvents.Events
          and become entity Store to handler OpenStoreHandler
        }
        on command CloseStore {
          then "ensure all orders associated with store are Delivered or Cancelled before closing store"
          and set CreatedStoreState.meta to !StoreContext.MetaInfo(
            createdOn = @CreatedStoreState.meta,
            createdBy = @CreatedStoreState.meta,
            lastUpdated = now(),
            lastUpdatedBy = @CloseStore.closingMember,
            currentState = @StoreStates.Closed
          )
          and send event StoreClosed(
            storeId = @CreatedStoreState.id,
            info = @CreatedStoreState.info,
            meta = @CreatedStoreState.meta
          ) to outlet StoreEvents.Events
          and become entity Store to handler ClosedStoreHandler
        }
        on command AddProductsToStore {
          then "add provided products to store definition"
          and "and adjust meta fields to reflect the change"
          and "yield the ProductsAddedToStore event"
          //TODO: Add cases where there is invalid product
        }
        on command RemoveProductsFromStore {
          then "remove provided products from store"
          and "adjust meta fields to reflect the change"
          and "yield the ProductsRemovedFromStore event"
          //TODO: Add case where product to be removed doesn't exist in store
        }
        on command TerminateStore {
          then set CreatedStoreState.meta to !StoreContext.MetaInfo(
              createdOn = @CreatedStoreState.meta,
              createdBy = @CreatedStoreState.meta,
              lastUpdatedOn = now(),
              lastUpdatedBy = @TerminateStore.terminatingMember,
              currentState = @CreatedStoreState.meta
          )
          and morph entity Store to state TerminatedStore with !TerminatedStoreState(lastMeta = @CreatedStoreState.meta)
        }
      }

      handler OpenStoreHandler is {
          on command CreateStore {
            then error "Store already created"
          }
          on command EditStoreInfo {
            then "copy fields from info to Draft info fields"
            and "adjust meta fields to reflect the change"
            and "yield the StoreUpdated event"
          }
          on command MakeStoreReady {
            then error "Store must be in Draft state before being made Ready"
          }
          on command DeleteStore {
            then error "Store must be closed before deleting it"
          }
          on command OpenStore {
            then error "Store is already opened"
          }
          on command CloseStore {
            then "ensure all orders associated with store are Delivered or Cancelled before closing store"
            and set CreatedStoreState.meta to !StoreContext.MetaInfo(
              createdOn = @CreatedStoreState.meta,
              createdBy = @CreatedStoreState.meta,
              lastUpdated = now(),
              lastUpdatedBy = @CloseStore.closingMember,
              currentState = @StoreStates.Closed
            )
            and send event StoreClosed(
              storeId = @CreatedStoreState.id,
              info = @CreatedStoreState.info,
              meta = @CreatedStoreState.meta
            ) to outlet StoreEvents.Events
            and become entity Store to handler ClosedStoreHandler
          }
          on command AddProductsToStore {
            then "add provided products to store definition"
            and "and adjust meta fields to reflect the change"
            and "yield the ProductsAddedToStore event"
            //TODO: Add cases where there is invalid product
          }
          on command RemoveProductsFromStore {
            then "remove provided products from store"
            and "adjust meta fields to reflect the change"
            and "yield the ProductsRemovedFromStore event"
            //TODO: Add case where product to be removed doesn't exist in store
          }
          on command TerminateStore {
              then set CreatedStoreState.meta to !StoreContext.MetaInfo(
                  createdOn = @CreatedStoreState.meta,
                  createdBy = @CreatedStoreState.meta,
                  lastUpdatedOn = now(),
                  lastUpdatedBy = @TerminateStore.terminatingMember,
                  currentState = @CreatedStoreState.meta
              )
              and morph entity Store to state TerminatedStore with !TerminatedStoreState(lastMeta = @CreatedStoreState.meta)
          }
        }

        handler ClosedStoreHandler is {
          on command CreateStore {
            then error "Store already created"
          }
          on command EditStoreInfo {
            then "copy fields from info to Draft info fields"
            and "adjust meta fields to reflect the change"
            and "yield the StoreUpdated event"
          }
          on command MakeStoreReady {
            then error "Store must be in Draft state before being made Ready"
          }
          on command DeleteStore {
            then set CreatedStoreState.meta to !StoreContext.MetaInfo(
              createdOn = @CreatedStoreState.meta,
              createdBy = @CreatedStoreState.meta,
              lastUpdated = now(),
              lastUpdatedBy = @DeleteStore.deletingMember,
              currentState = @StoreStates.Deleted
            )
            and send event StoreDeleted(
              storeId = @CreatedStoreState.id,
              info = @CreatedStoreState.info,
              meta = @CreatedStoreState.meta
            ) to outlet StoreEvents.Events
            and morph entity Store to state DeletedStore with !DeletedStoreState(
              storeName = @CreatedStoreState.info,
              event = @CreatedStoreState.info,
              venue = @CreatedStoreState.info,
              location = @CreatedStoreState.info,
              sponsoringOrg = @CreatedStoreState.info,
              meta = @CreatedStoreState.meta
            )
          }
          on command OpenStore {
            then set CreatedStoreState.meta to !StoreContext.MetaInfo(
              createdOn = @CreatedStoreState.meta,
              createdBy = @CreatedStoreState.meta,
              lastUpdated = now(),
              lastUpdatedBy = @OpenStore.openingMember,
              currentState = @StoreStates.Open
            )
            and send event StoreOpened(
              storeId = @CreatedStoreState.id,
              info = @CreatedStoreState.info,
              meta = @CreatedStoreState.meta
            ) to outlet StoreEvents.Events
            and become entity Store to handler OpenStoreHandler
          }
          on command CloseStore {
            then error "Store is already closed."
          }
          on command AddProductsToStore {
            then "add provided products to store definition"
            and "and adjust meta fields to reflect the change"
            and "yield the ProductsAddedToStore event"
            //TODO: Add cases where there is invalid product
          }
          on command RemoveProductsFromStore {
            then "remove provided products from store"
            and "adjust meta fields to reflect the change"
            and "yield the ProductsRemovedFromStore event"
            //TODO: Add case where product to be removed doesn't exist in store
          }
          on command TerminateStore {
          then set CreatedStoreState.meta to !StoreContext.MetaInfo(
              createdOn = @CreatedStoreState.meta,
              createdBy = @CreatedStoreState.meta,
              lastUpdatedOn = now(),
              lastUpdatedBy = @TerminateStore.terminatingMember,
              currentState = @CreatedStoreState.meta
          )
          and morph entity Store to state TerminatedStore with !TerminatedStoreState(lastMeta = @CreatedStoreState.meta)
        }
      }
    }

    record DeletedStoreState is {
      storeName: String,
      event: EventId?,
      venue: VenueId,
      location: LocationId,
      sponsoringOrg: OrganizationId,
      meta: StoreContext.MetaInfo
    }
    state DeletedStore of DeletedStoreState is {
      handler DeletedStoreHandler is {
        on command TerminateStore {
          then set DeletedStoreState.meta to !StoreContext.MetaInfo(
              createdOn = @DeletedStoreState.meta,
              createdBy = @DeletedStoreState.meta,
              lastUpdatedOn = now(),
              lastUpdatedBy = @TerminateStore.terminatingMember,
              currentState = @DeletedStoreState.meta
          )
          and morph entity Store to state TerminatedStore with !TerminatedStoreState(lastMeta = @DeletedStoreState.meta)
        }
        on other {then error "No actions are permitted on a Deleted store"}
      }
    }

    record TerminatedStoreState is {
      lastMeta: StoreContext.MetaInfo
    }
    state TerminatedStore of TerminatedStoreState is {
      handler TerminatedStoreHandler is {
        on other {then error "No actions are permitted on a Terminated store"}
      }
    }
  }
}
