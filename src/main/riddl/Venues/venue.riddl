type VenueId is Id (ImprovingApp.VenueContext.Venue)
  briefly "Unique identifier for Venue Entity"
type LocationId is Id (^VenueContext.Location)
  briefly "Unique identifier for Location Entity"
type ReservationId is Id(ImprovingApp.VenueContext.Reservation)
  briefly "Unique identifier for Reservation Entity"

context VenueContext is {
    entity Venue is {
        state Available is {
            fields {
                venueId: VenueId,
                orgId: OrganizationId, //Venues are defined by BaseOrgs. venueId and orgId make a composite key
                name: String,
                address: Address,
                isAvailable: Boolean
            }
            handler AvailableVenueHandler is {???}
        }
    }
    entity Location is {
        command ReserveLocation is {locationId: LocationId, org: OrganizationId, start: DateTime, end: DateTime}
        event LocationReserved is {locationId: LocationId, reservationId: ReservationId, org: OrganizationId, start: DateTime, end: DateTime}
        command CancelReservation is {reservationId: ReservationId}
        event ReservationCancelled is {reservationId: ReservationId}
        query GetLocationInfo is {locationId: LocationId}
        result LocationInfoResult is {locationId: LocationId, info: LocationInfo}
        query GetUpcomingReservations is {locationId: LocationId}
        query GetUpcomingReservationsInRange is {locationId: LocationId, start: Date, end: Date}
        result UpcomingReservations is {locationId: LocationId, reservations: ReservationId*}
        query FindAvailableLocationsInRange is {locationId: LocationId, start: Date, end: Date}
        query FindAvailableLocationsInRangeWithAmenities is {locationId: LocationId, start: Date, end: Date, desiredAmenities: String*}

        type LocationInfo is {
            name: String,
            description: String,
            directions: String, //how do you find this location
            latLong: LatLong,
            url: URL?,
            capacity: Integer?,
            accessible: Boolean, //is this location handicapped accessible
            amenities: String* //TODO: We may need amenities to be searchable - i.e. I need to find a Location that is handicaped accessible and has a kitchen
        }
        state LocationState is {
            fields {
                locationId: LocationId,
                locationInfo: LocationInfo,
                reservations: ReservationId*
            }
            handler LocationHandler is {
                on command ReserveLocation {???}
                on command CancelReservation {???}
                on query GetLocationInfo {???}
                on query GetUpcomingReservations {???}
                on query GetUpcomingReservationsInRange {???}
                on query FindAvailableLocationsInRange {???}
                on query FindAvailableLocationsInRangeWithAmenities {???}
            }
        }

    }

    entity Reservation is {
        type ReservationInfo is {
            startTime: DateTime,
            endTime: DateTime,
            forOrg: OrganizationId
        }

        command CreateReservation is {}
        event ReservationCreated is {reservationId: ReservationId, info: ReservationInfo}
        command DeleteReservation is {reservationId: ReservationId}
        event ReservationDeleted is {reservationId: ReservationId}
        query GetReservationInfo is {reservationId: ReservationId}
        result ReservationInfoResult is {reservationId: ReservationId, info: ReservationInfo}

        state ReservationState is {
            fields {
                reservationId: ReservationId,
                info: ReservationInfo
            }
            handler ReservationHandler is {
                on command CreateReservation {???}
                on command DeleteReservation {???}
                on query GetReservationInfo {???}
            }
        }
    }
}
