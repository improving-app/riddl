command EstablishLocation is {
  locationId: LocationId briefly "A unique identifier for this Location. This must be provided by the calling client.",
  info: LocationContext.Info
} briefly "Creates a Location with all top-level fields, potentially without Locations"

event LocationEstablished is {
  locationId: LocationId,
  locationInfo: LocationContext.Info,
  reservations: ReservationId*,
  meta: LocationContext.MetaInfo
}

command EditLocationInfo is {
  locationId: LocationId briefly "The unique Id of the location to create",
  newInfo: LocationContext.UpdateInfo briefly "The information about the location",
  editingMember: MemberId briefly "Id of the member who is creating the location"
} briefly "A command to edit the values of an Reservation's Info "
event LocationInfoUpdated is {
  reservationId: LocationId,
  info: LocationContext.Info,
  meta: LocationContext.MetaInfo
}

command UpdateLocationStatus is {
  locationId: LocationId,
  status: LocationContext.Status,
  updatingMember: MemberId
}
event LocationStatusUpdated is {
  reservationId: LocationId,
  newStatus: LocationContext.Status
}

query GetNextLocationReservations is {
  locationId: LocationId,
  maxCount: Integer,
	startDate: DateTime? briefly "Used as start date of query when present instead of now()"
}
query GetLocationReservations is {
	venueId: LocationId,
	ranges: 'TimeRange'+
}
result LocationReservations is {
	venueId: LocationId,
	schedule: ReservationId* briefly "All reservation that take place in the location within
																		the time range (for GetNextLocationReservations) or
																		maxCount+startDate (for GetLocationReservations) provided"
}

query GetNextLocationAvailability is {
	locationId: LocationId,
	maxCount: Integer,
	startDate: DateTime? briefly "Used as start date of query when present instead of now()"
}
result LocationAvailabilityCalendar is {
	locationId: LocationId,
	schedule: 'TimeRange'* briefly "A list of time ranges indicating availability"
}

query FindAvailableLocationsInRange is {locationId: LocationId, start: Date, end: Date}
query FindAvailableLocationsInRangeWithAmenities is {locationId: LocationId, start: Date, end: Date, desiredAmenities: String*}
