command EstablishLocation is {
  locationId: LocationId briefly "A unique identifier for this Location. This must be provided by the calling client.",
  name: String,
  description: String,
  directions: String,
  latLong: LatLong,
  url: URL?,
  capacity: Integer?,
  accessible: Boolean,
  amenities: String*,
  entrances: Address+,
  reservations: ReservationId*
} briefly "Creates a Location with all top-level fields, potentially without Locations"

event LocationEstablished is {
  locationId: LocationId,
  locationInfo: LocationContext.Info,
  reservations: ReservationId*,
  meta: LocationContext.MetaInfo
}

command AddLocationReservations is {
  locationId: LocationId,
  reservations: ReservationsId+
}
event VenueReservationsAdded is {
  locationId: LocationId,
  allReservations: ReservationId+
}

query GetUpcomingReservations is {
  locationId: LocationId,
  maxCount: Integer,
	startDate: DateTime? briefly "Used as start date of query when present instead of now()"
}
result LocationReservations is {
	venueId: LocationId,
	schedule: ReservationId* briefly "All reservation that take place in the venue within
																		the time range (for GetUpcomingReservations) or
																		maxCount+startDate (for GetVenueReservations) provided"
}

query GetReservationsInRange is {
	locationId: LocationId,
	range: TimeRange+
}

query FindAvailableLocationsInRange is {locationId: LocationId, start: Date, end: Date}
query FindAvailableLocationsInRangeWithAmenities is {locationId: LocationId, start: Date, end: Date, desiredAmenities: String*}
