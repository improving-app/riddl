command EstablishLocation is {
  locationId: Venues.LocationId,
  name: String,
  description: String,
  directions: String,
  //latLong: LatLong,
  url: URL?,
  capacity: Integer?,
  accessible: Boolean,
  amenities: String*,
  entrances: Address+,
  reservations: ReservationId*
} briefly "Creates a Location with all top-level fields, potentially without Locations"

event LocationEstablished is {
  locationId: Venues.LocationId,
  locationInfo: LocationContext.Info,
  reservations: ReservationId*,
  meta: LocationContext.MetaInfo
}

command AddLocationReservations is {
  locationId: Venues.LocationId,
  reservations: ReservationId+
}
event LocationReservationsAdded is {
  locationId: Venues.LocationId,
  allReservations: ReservationId+
}

command UpdateLocationStatus is {
  locationId: Venues.LocationId,
  status: LocationContext.Status,
  updatingMember: MemberId
}
event LocationStatusUpdated is {
  locationId: Venues.LocationId,
  newStatus: LocationContext.Status
}

command EditLocationInfo is {
  locationId: Venues.LocationId briefly "The unique Id of the location to create",
  newInfo: LocationContext.UpdateInfo briefly "The information about the location",
  editingMember: MemberId briefly "Id of the member who is creating the location"
} briefly "A command to edit the values of an Reservation's Info "
event LocationInfoUpdated is {
  locationId: Venues.LocationId,
  info: LocationContext.Info,
  meta: LocationContext.MetaInfo
}

query GetNextLocationReservations is {
  locationId: Venues.LocationId,
  maxCount: Integer,
  startDate: DateTime? briefly "Used as start date of query when present instead of now()"
}
query GetLocationReservations is {
  venueId: Venues.LocationId,
  ranges: TimeRange+
}
result LocationReservations is {
  venueId: Venues.LocationId,
  schedule: ReservationId* briefly "All reservation that take place in the location within
									the time range (for GetNextLocationReservations) or
									maxCount+startDate (for GetLocationReservations) provided"
}

query GetNextLocationAvailability is {
  locationId: Venues.LocationId,
  maxCount: Integer,
  startDate: DateTime? briefly "Used as start date of query when present instead of now()"
}
result LocationAvailabilityCalendar is {
  locationId: Venues.LocationId,
  schedule: TimeRange* briefly "A list of time ranges indicating availability"
}

query FindAvailableLocationsInRange is {locationId: Venues.LocationId, start: Date, end: Date}
query FindAvailableLocationsInRangeWithAmenities is {locationId: Venues.LocationId, start: Date, end: Date, desiredAmenities: String*}

query GetLocationVenue is {
  locationId: Venues.LocationId
}
result LocationVenue is {
  locationId: Venues.LocationId,
  venueId: VenueId
}