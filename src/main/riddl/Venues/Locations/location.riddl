type LocationId is Id (ImprovingApp.Venues.LocationContext.Location)
  briefly "Unique identifier for Location Entity"

context LocationContext is {
    include "locationTypeDefinitions"
    include "locationMessages"

    entity Location is {
        options (event-sourced, available)

		    handler LocationHandler is {
		        on command EstablishLocation {
                then "morph Location to Draft state"
                and "Copy info field from the command into Draft.locationInfo field"
                and "adjust meta fields to reflect the change set"
                and "yield event LocationEstablished"
		        }
		        on other { then error "Only EstablishLocation command is allowed in the default state"}
		    }

        record DraftState is {
            locationInfo: LocationContext.Info,
            locationMeta: LocationContext.MetaInfo
        }
		    state Draft of ^DraftState is {
		        handler DraftLocation is {
		            on command EstablishLocation {
		                then error "Location already established"
		            }
		            on command EditLocationInfo {
		                then "set Draft info fields to EditLocationInfo.info"
		                and "yield event LocationInfoUpdated"
		            }
		            on command UpdateLocationStatus {
		                then "morph Location to the state provided in UpdateVenueStatus"
                    and "set MetaInfo to capture change data"
                    and "yield event VenueInfoUpdated"
		            }
		            on query GetLocationVenue {
		                given "GetLocationVenue.locationId exists as an entity"
		                then "yield event LocationVenue"
		                else error "LocationId not found as requested"
		            }
		        }
		    }

        record OpenState is {
            locationInfo: LocationContext.Info,
            locationMeta: LocationContext.MetaInfo
        }
		    state Open of ^OpenState is {
		        handler OpenLocation is {
		            on command EstablishLocation {
		                then error "Location already established"
		            }
		            on command EditLocationInfo {
		                then "set OnHold info fields to EditLocationInfo.info"
		                and "yield event LocationInfoUpdated"
		            }
		            on command UpdateLocationStatus {
                    then "morph Location to the state provided in UpdateLocationStatus"
                    and "set MetaInfo to capture change data"
                    and "yield event LocationStatusUpdated"
		            }
		        }
		    }

        record ClosedState is {
            locationInfo: LocationContext.Info,
            locationMeta: LocationContext.MetaInfo
        }
		    state Closed of ^ClosedState is {
		        handler ClosedLocation is {
		            on command EstablishLocation {
		                then error "Location already established"
		            }
		            on command EditLocationInfo {
		                then "set OnHold info fields to EditLocationInfo.info"
		                and "yield event LocationInfoUpdated"
		            }
		            on command UpdateLocationStatus {
                    then "morph Location to the state provided in UpdateLocationStatus"
                    and "set MetaInfo to capture change data"
                    and "yield event LocationStatusUpdated"
		            }
		        }
		    }
    }
}
