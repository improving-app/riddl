type LocationId is Id (Venues.LocationContext.Location)
  briefly "Unique identifier for Location Entity"

context LocationContext is {
    include "locationTypeDefinitions"
    include "locationMessages"

    entity Location is {
        option event-sourced
        option available

		    handler LocationHandler is {
		        on command EstablishLocation {
              "morph Location to Draft state"
              "Copy info field from the command into Draft.locationInfo field"
              "adjust meta fields to reflect the change set"
              "yield event LocationEstablished"
		        }
		        on other {
		          error "Only EstablishLocation command is allowed in the default state"
		        }
		    }

        record DraftState is {
            locationInfo:  ImprovingApp.Venues.LocationContext.Info,
            locationMeta:  ImprovingApp.Venues.LocationContext.MetaInfo
        }
		    state Draft of Location.DraftState is {
		        handler DraftLocation is {
		            on command ImprovingApp.Venues.LocationContext.EstablishLocation {
		              error "Location already established"
		            }
		            on command ImprovingApp.Venues.LocationContext.EditLocationInfo {
		              "set Draft info fields to EditLocationInfo.info"
		              "yield event LocationInfoUpdated"
		            }
		            on command ImprovingApp.Venues.LocationContext.UpdateLocationStatus {
		              "morph Location to the state provided in UpdateVenueStatus"
                  "set MetaInfo to capture change data"
                  "yield event VenueInfoUpdated"
		            }
		            on query GetLocationVenue {
		              if "GetLocationVenue.locationId exists as an entity" then {
		                "yield event LocationVenue"
		              } else {
		                error "LocationId not found as requested"
		              }
		            }
		        }
		    }

        record OpenState is {
            locationInfo: ImprovingApp.Venues.LocationContext.Info,
            locationMeta: ImprovingApp.Venues.LocationContext.MetaInfo
        }
		    state Open of Location.OpenState is {
		        handler OpenLocation is {
		            on command ImprovingApp.Venues.LocationContext.EstablishLocation {
		              error "Location already established"
		            }
		            on command ImprovingApp.Venues.LocationContext.EditLocationInfo {
		              "set OnHold info fields to EditLocationInfo.info"
		              "yield event LocationInfoUpdated"
		            }
		            on command ImprovingApp.Venues.LocationContext.UpdateLocationStatus {
                  "morph Location to the state provided in UpdateLocationStatus"
                  "set MetaInfo to capture change data"
                  "yield event LocationStatusUpdated"
		            }
		        }
		    }

        record ClosedState is {
            locationInfo: ImprovingApp.Venues.LocationContext.Info,
            locationMeta: ImprovingApp.Venues.LocationContext.MetaInfo
        }
		    state Closed of Location.ClosedState is {
		        handler ClosedLocation is {
		            on command ImprovingApp.Venues.LocationContext.EstablishLocation {
		              error "Location already established"
		            }
		            on command ImprovingApp.Venues.LocationContext.EditLocationInfo {
		              "set OnHold info fields to EditLocationInfo.info"
		              "yield event LocationInfoUpdated"
		            }
		            on command ImprovingApp.Venues.LocationContext.UpdateLocationStatus {
                  "morph Location to the state provided in UpdateLocationStatus"
                  "set MetaInfo to capture change data"
                  "yield event LocationStatusUpdated"
		            }
		        }
		    }
    }
}
