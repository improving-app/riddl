command EstablishReservation is {
  reservationId: ReservationId briefly "A unique identifier for this Reservation. This must be provided by the calling client.",
  info: ReservationContext.Info briefly "Details about a Reservation required for it to exist. See ReservationContext.Info for details.",
  reservingMember: MemberId briefly "The Id of the Member who is issuing the create command.",
  owner: MemberId? briefly "Used in the case that reservingMember is not the owner"
} briefly "Creates a Reservation"

event ReservationEstablished is {
  reservationId: ReservationId,
  info: ReservationContext.Info,
  meta: ReservationContext.MetaInfo
}

command EditReservationInfo is {
  reservationId: ReservationId briefly "The unique Id of the reservation to create",
  newInfo: ReservationContext.UpdateInfo briefly "The information about the reservation",
  editingMember: MemberId briefly "Id of the member who is creating the reservation"
} briefly "A command to edit the values of an Reservation's Info "
event ReservationInfoUpdated is {
  reservationId: ReservationId,
  info: ReservationContext.Info,
  meta: ReservationContext.MetaInfo
}

command UpdateReservationStatus is {
  reservationId: ReservationId,
  status: ReservationContext.Status,
  updatingMember: MemberId
}
event ReservationStatusUpdated is {
  reservationId: ReservationId,
  newStatus: ReservationContext.Status
}

command AddReservationAttendees is {
  reservationId: ReservationId,
  attendees: MemberId+
}
event ReservationAttendeesAdded is {
  venueId: VenueId,
  allAttendees: MemberId+
}


command CreateReservation is {}
event ReservationCreated is {reservationId: ReservationId, info: ReservationContext.Info}
command DeleteReservation is {reservationId: ReservationId}
event ReservationDeleted is {reservationId: ReservationId}
query GetReservationInfo is {reservationId: ReservationId}
result ReservationInfoResult is {reservationId: ReservationId, info: ReservationContext.Info}